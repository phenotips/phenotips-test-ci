<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>ExportPreferences</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401822206000</creationDate>
  <parent>PhenoTips.Export</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401822206000</date>
  <contentUpdateDate>1401822206000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="PhenoTips.DatabaseFilters" /}}

{{velocity output="false"}}
#macro (__export__displayOrganizedFieldList $xclassName $targetFieldName $customFields $ignored $selectedFields)
#set ($remoteEnabledFields = $request.getParameterValues('enabledFields'))## fields enabled on the remote server
#if (!$remoteEnabledFields)
  ## This is a quick workaround, in the absence of this parameter in the request, which is the case for Excel and JSON exports, a warning will be printed in the logs several times
  #set ($remoteEnabledFields = [])
#end
#set($customExporters = {
    'PhenoTips.GeneClass' : {'name' : 'genes', 'label': "$services.localization.render('phenotips.exportPreferences.field.genes')"},
    'PhenoTips.GeneVariantClass': {'name' :'variants', 'label': "$services.localization.render('phenotips.exportPreferences.field.variants')", 'prerequisiteName': 'genes'},
    'PhenoTips.InvestigationClass' : {'name' : 'genes', 'label': "$services.localization.render('phenotips.exportPreferences.field.genes')"},
    'PhenoTips.AllergiesDataClass' : {'name': 'allergies', 'label' : "$services.localization.render('PhenoTips.AllergiesDataClass_allergies')"},
    'PhenoTips.ParentalInformationClass' : {'name': 'parentalAge', 'label': "$services.localization.render('phenotips.UIXField.parentalAge')"},
    'PhenoTips.ObstetricHistoryClass' : {'name': 'obstetricHistory', 'label': "$services.localization.render('phenotips.UIXField.obstetricHistory')"},
    'PhenoTips.ExternalFileClass' : {'name': 'additionalDocuments', 'label' : "$services.localization.render('phenotips.exportPreferences.field.additionalDocuments')"},
    'PhenoTips.ExternalImageClass' : {'name': 'additionalImages', 'label' : "$services.localization.render('phenotips.exportPreferences.field.additionalImages')"},
    'PhenoTips.LabeledIdentifierClass' : {'name': 'labeled_eids', 'label' : "$services.localization.render('phenotips.exportPreferences.field.labeledIdentifiers')"}
})
#set ($customLabels = {
    'apgar1' : "$services.localization.render('phenotips.exportPreferences.prenatalPerinatalHistory.apgarScores')"
})
#set($geneVariantsExtentionId = 'org.phenotips.patientSheet.field.gene-variants')
#set($genesExtentionId = 'org.phenotips.patientSheet.field.genes')
{{html clean="false" wiki="false"}}
## Display custom fields
#if(!$customFields.empty)
  #set($sectionContent = '')
  &lt;div class="checkbox_tree_container"&gt;
    &lt;h5&gt;&lt;label&gt;&lt;input type="checkbox" /&gt;&lt;span class="section-name-header select-all"&gt;${services.localization.render('phenotips.export.excel.label.documentInfo')}&lt;/span&gt;&lt;/label&gt;&lt;/h5&gt;
    &lt;ul class="field-list "&gt;
    #foreach($customField in $customFields.keySet())
      #set ($reportContent = "&lt;li class='checkbox_tree_container'&gt;&lt;label&gt;&lt;input type=""checkbox"" name=""${targetFieldName}"" id=""${targetFieldName}_${customField}"" value=""${customField}"" checked=""checked""/&gt;${customFields.get($customField)}&lt;/label&gt;&lt;/li&gt;")
      #set ($sectionContent = $sectionContent.concat($reportContent))
    #end
    $sectionContent
    &lt;/ul&gt;
  &lt;/div&gt;
#end

## Display fields from the record configuration
#set ($recordConfiguration = $services.recordConfiguration.getConfiguration('patient'))
#foreach ($section in $recordConfiguration.enabledSections)
 #set ($sectionContent = '')
 #foreach ($element in $section.enabledElements)
   #if ($element.extension.id == $geneVariantsExtentionId)#set($geneVariantsEnabled = true)#end
   #set ($disable = ($element.extension.id == $genesExtentionId &amp;&amp; $geneVariantsEnabled))
   #set ($eClasses = $element.extension.getParameters().pt_class.split(','))
   #if ($eClasses &amp;&amp; !$disable)
     #foreach ($eClass in $eClasses)
       #set ($eCMeta = $customExporters.get($eClass))
       #if (!$ignored.types.contains($eClass) &amp;&amp; "$!{eCMeta}" != '' &amp;&amp; ($remoteEnabledFields.empty || $remoteEnabledFields.contains("${eCMeta.name}")) &amp;&amp; $xwiki.getClass($eClass).properties.size() &gt; 0)
         #if ($eCMeta.prerequisiteName)
           #set ($extraclassname = "prerequisite-${targetFieldName}_$eCMeta.prerequisiteName")
         #else
           #set ($extraclassname = '')
         #end
         #set ($itemContent = "&lt;li class='checkbox_tree_container'&gt;&lt;label&gt;&lt;input type=""checkbox"" name=""${targetFieldName}"" id=""${targetFieldName}_${eCMeta.name}"" value=""$eCMeta.name"" class=""${extraclassname}""#if ($selectedFields.contains($eCMeta.name) || $selectedFields.empty) checked=""checked""#end/&gt;${eCMeta.label}&lt;/label&gt;&lt;/li&gt;")
         #set ($sectionContent = $sectionContent.concat($itemContent))
       #end
     #end
   #else
     #set ($eClass = $xwiki.getClass($xclassName))
     #set ($eFields = $element.extension.getParameters().fields.split(','))
     #if ($eFields)
       #foreach ($eField in $eFields)
          #set ($f = $eClass.get($eField))
          #if ("$!f" != '' &amp;&amp; !$ignored.fields.contains($eField) &amp;&amp; ($remoteEnabledFields.empty || $remoteEnabledFields.contains($eField)))
            #set ($itemContent = "&lt;li class='checkbox_tree_container'&gt;&lt;label&gt;&lt;input type=""checkbox"" name=""${targetFieldName}"" id=""${targetFieldName}_${f.name}"" value=""$f.name""#if ($selectedFields.contains($f.name) || $selectedFields.empty) checked=""checked""#end/&gt;#if($customLabels.get($f.name))${customLabels.get($f.name)}#{else}${f.translatedPrettyName}#end&lt;/label&gt;&lt;/li&gt;")
            #set ($sectionContent = $sectionContent.concat($itemContent))
            #if ($metaFields.contains(${f.name}))
              #set($metaContent = "&lt;li class='checkbox_tree_container'&gt;&lt;label&gt;&lt;input type=""checkbox"" name=""${targetFieldName}"" id=""${targetFieldName}_${f.name}_meta"" value=""${f.name}_meta"" #if($selectedFields.contains($f.name.concat('_meta')) || $selectedFields.empty) checked=""checked""#end/&gt;${services.localization.render('phenotips.exportPreferences.phenotype.qualifiers')}&lt;/label&gt;&lt;/li&gt;")
              #set ($sectionContent = $sectionContent.concat($metaContent))
            #end
          #end
       #end
     #end
   #end
 #end
 #if ($sectionContent != '')

 &lt;div class="checkbox_tree_container"&gt;
 &lt;h5&gt;&lt;label&gt;&lt;input type="checkbox" /&gt;&lt;span class="section-name-header field-no-user-select"&gt;$section.name&lt;/span&gt;&lt;/label&gt;&lt;/h5&gt;
 &lt;ul class="field-list#if ($foreach.index &gt; 0 || !$customFields.empty) v-collapsed#end"&gt;
 $sectionContent
 &lt;/ul&gt;
 &lt;/div&gt;
 #end
#end
&lt;input type="hidden" name="${targetFieldName}" value="" /&gt;{{/html}}
#end
{{/velocity}}

{{velocity}}
#set($ignored = {
  'fields' : ['apgar5'],
  'types'  : []
})
#set($metaFields = [])
#set($selectedFields = [])
#if ($request.push)
  #set($selectedFields = ['external_id', 'gender', 'phenotype', 'negative_phenotype', 'clinical_diagnosis', 'omim_id', 'genes'])
#else
  #if (${request.export_id} != 'phenotips_json_export')
    #set($metaFields = ['phenotype'])
    #set ($discard = $ignored.fields.add('reports_history'))
    #set ($discard = $ignored.types.add('PhenoTips.ExternalFileClass'))
    #set ($discard = $ignored.types.add('PhenoTips.ExternalImageClass'))
  #end
  #set($customFields = {
       'doc.name' : "$services.localization.render('phenotips.exportPreferences.field.docName')",
       'referrer' : "$services.localization.render('phenotips.exportPreferences.field.referrer')",
       'creationDate' : "$services.localization.render('phenotips.exportPreferences.field.creationDate')",
       'author' : "$services.localization.render('phenotips.exportPreferences.field.author')",
       'date' : "$services.localization.render('phenotips.exportPreferences.field.date')"
  })
#end

{{html clean="false" filter="indent"}}&lt;form class="xform" action="$!{escapetool.xml($!{request.get('export_endpoint')})}" method="post"&gt;&lt;div&gt;{{/html}}

#if (!$request.singlepatient)
(% class="section filters"%)(((
=== (% class="step" %)1(%%) $services.localization.render('phenotips.exportPreferences.filterTitle') ===
 #__filters_display('export-filters')

 {{info}} $services.localization.render('phenotips.exportPreferences.numMatchingRecords', [ "**(% id='filter-match-count'%) (%%)**" ]) {{/info}}

 )))##section filters
#end

#set($selectionTools = "&lt;div class='selection-tools'&gt;$services.localization.render('phenotips.DBWebHomeSheet.colSelect.label') &lt;span class='selection-tool select-all'&gt;$services.localization.render('phenotips.DBWebHomeSheet.colSelect.all')&lt;/span&gt; · &lt;span class='selection-tool select-none'&gt;$services.localization.render('phenotips.DBWebHomeSheet.colSelect.none')&lt;/span&gt; · &lt;span class='selection-tool select-invert'&gt;$services.localization.render('phenotips.DBWebHomeSheet.colSelect.invert')&lt;/span&gt; · &lt;span class='selection-tool select-restore'&gt;$services.localization.render('phenotips.DBWebHomeSheet.colSelect.restore')&lt;/span&gt;&lt;/div&gt;")
#if ($request.push)
  (% class="push-fields section columns#if (!$request.multipatient) singlepatient#end "%)(((
  === #if ($request.multipatient)(% class="step" %)2(%%) #end$services.localization.render('phenotips.exportPreferences.selectFields') ===
  {{html clean="false"}}$selectionTools{{/html}}##
  #__export__displayOrganizedFieldList( "PhenoTips.PatientClass" 'columns' [] $ignored $selectedFields)
  #set($exportTitle = "$services.localization.render('phenotips.exportPreferences.push.submit', [$request.remoteserver])")
  #if ($request.multipatient)
    #set($exportButtonID = "push-multiple-patients")
  #else
    #set($exportButtonID = "push-patient")
  #end
#else
  (% class="push-fields section columns"%)(((
  === (% class="step" %)2(%%) $services.localization.render('phenotips.exportPreferences.selectFields') ===
  {{html clean="false"}}$selectionTools{{/html}}##
  #__export__displayOrganizedFieldList( "PhenoTips.PatientClass" 'columns' $customFields $ignored $selectedFields)
  #set($exportTitle = "$services.localization.render('phenotips.exportPreferences.export')")
  #set($exportButtonID = "export-multiple-patients")
#end
)))##section columns

(% class="buttons"%)(((
{{html clean="false"}}&lt;input type="hidden" name="outputSyntax" value="plain"/&gt;&lt;span class="buttonwrapper"&gt;&lt;input type="submit" id="$exportButtonID" value="$exportTitle" class="button" id="export_submit"/&gt;&lt;/span&gt; &lt;span class="buttonwrapper"&gt;&lt;input type="button" value="$services.localization.render('phenotips.exportPreferences.cancel')" class="button secondary" id="export_cancel"/&gt;&lt;/span&gt;{{/html}}
{{html clean="false"}}&lt;/div&gt;&lt;/form&gt;{{/html}}
)))
{{/velocity}}</content>
</xwikidoc>
