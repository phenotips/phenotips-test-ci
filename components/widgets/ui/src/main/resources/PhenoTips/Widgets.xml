<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>Widgets</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401822215000</creationDate>
  <parent>PhenoTips.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401822215000</date>
  <contentUpdateDate>1401822215000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0e1a6de2-6050-432f-a39f-656bb3b90163</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips){

 var widgets = PhenoTips.widgets = PhenoTips.widgets || {};

 if (typeof XWiki.widgets.XList == 'undefined') {
  if (typeof console != "undefined" &amp;&amp; typeof console.warn == "function") {
    console.warn("[Suggest widget] Required class missing: XWiki.widgets.XList");
  }
 } else {
  widgets.XList = XWiki.widgets.XList;
  widgets.XListItem = XWiki.widgets.XListItem;
/**
 * Suggest class.
 * Provide value suggestions to users when starting to type in a text input.
 */
 widgets.Suggest = Class.create({
  options : {
    // The minimum number of characters after which to trigger the suggest
    minchars : 1,
    // The HTTP method for the AJAX request
    method : "get",
    // The name of the request parameter holding the input stub
    varname : "input",
    // The name of the request parameter holding the input stub for exact term search
    matchVarname : "id",
    // The CSS classname of the suggest list
    className : "ajaxsuggest",
    timeout : 30000,
    delay : 500,
    offsety : 0,
    // Display a "no results" message, or simply hide the suggest box when no suggestions are available
    shownoresults : true,
    // The message to display as the "no results" message
    noresults : "No results!",
    maxheight : 250,
    cache : false,
    seps : "",
    icon : null,
    // The name of the JSON variable or XML element holding the results.
    // "results" for the old suggest, "searchResults" for the REST search.
    resultsParameter : "results",
    // The name of the JSON parameter or XML attribute holding the result identifier.
    // "id" for both the old suggest and the REST search.
    resultId : "id",
    // The name of the JSON parameter or XML attribute holding the result value.
    // "value" for the old suggest, "pageFullName" for the REST page search.
    resultValue : "value",
    // The name of the JSON parameter or XML attribute holding the result auxiliary information.
    // "info" for the old suggest, "pageFullName" for the REST search.
    resultInfo : "info",
    // The name of the JSON parameter or XML attribute holding the result category.
    resultCategory : "category",
    // The name of the JSON parameter or XML attribute holding the result alternative name.
    resultAltName : "",
    // The name of the JSON parameter or XML attribute holding the result icon.
    resultIcon: "icon",
    // The name of the JSON parameter or XML attribute holding a potential result hint (displayed next to the value).
    resultHint: "hint",
    // What kind of tooltip (if any) should be attached to each entry. Default: none.
    tooltip: false,
    // If free text entries allowed, mark them as such. Default: false.
    markFreeText: false,
    // The id of the element that will hold the suggest element
    //parentContainer : "body",
    // Should results fragments be highlighted when matching typed input
    highlight: true,
    // Fade the suggestion container on clear
    fadeOnClear: false,
    // Show a 'hide suggestions' button
    enableHideButton: true,
    insertBeforeSuggestions: null,
    // Should id be displayed or hidden
    displayId: false,
    // If multiple ids are available will return only the first one iff set to true, all otherwise.
    forceFirstId : false,
    // Should value be displayed as a hint
    displayValue: false,
    // Display value prefix text
    displayValueText: "Value :",
    // How to align the suggestion list when its width is different from the input field width
    align: "left",
    // When there are several suggest sources, should the widget displays only one, unified, "loading" indicator for all requests undergoing,
    // Or should it displays one loading indicator per request next to the corresponding source.
    unifiedLoader: false,
    // The DOM node to use to display the loading indicator when in mode unified loader (it will receive a "loading" class name for the time of the loading)
    // Default is null, which falls back on the input itself. This option is used only when unifiedLoader is true.
    loaderNode: null,
    // A function returning true or false for each fetched suggestion. If defined, only suggestions for which 'true' is returned
    // are added to the list
    filterFunc: null,
    // The expected data format, XML or JSON by default
    json: true
  },
  sInput : "",
  nInputChars : 0,
  aSuggestions : [],
  iHighlighted : null,
  isActive : false,
  // True iff the suggest dropdown is displayed, or an item from it was just selected.
  suggestionSelected: false,
  // Input that has been submitted.
  lastSubmitted: "",

  /**
   * Initialize the suggest
   *
   * @param {Object} fld the suggest field
   * @param {Object} param the options
   */
  initialize: function (fld, param){

    if (!fld) {
      return false;
    }
    this.setInputField(fld);

    // Clone default options from the prototype so that they are not shared and extend options with passed parameters
    this.options = Object.extend(Object.clone(this.options), param || { });
    if (typeof this.options.sources == 'object' &amp;&amp; this.options.sources.length &gt; 1) {
      // We are in multi-sources mode
      this.sources = this.options.sources;
    } else {
      // We are in mono-source mode
      this.sources = this.options;
    }

    // Flatten sources
    this.sources = [ this.sources ].flatten().compact();

    // Reset the container if the configured parameter is not valid
    if (!$(this.options.parentContainer)) {
      this.options.parentContainer = $(document.body);
    }

    if (this.options.seps) {
      this.seps = this.options.seps;
    } else {
      this.seps = "";
    }

    // Initialize a request number that will keep track of the latest request being fired.
    // This will help to discard potential non-last requests callbacks ; this in order to have better performance
    // (less unneccessary DOM manipulation, and less unneccessary highlighting computation).
    this.latestRequest = 0;

    this.addInputObservers();
  },

  /**
   * Sets or replace the input field associated with this suggest.
   */
  setInputField: function(input){
    if (this.fld) {
      this.fld.stopObserving();
    }
    this.fld = $(input);
    this.fld._suggestWidget = this;
    // Bind the key listeners on the input field.
    this.fld.observe("keyup", this.onKeyUp.bindAsEventListener(this));
    if (Prototype.Browser.IE || Prototype.Browser.WebKit) {
      this.fld.observe("keydown", this.onKeyPress.bindAsEventListener(this));
    } else {
      this.fld.observe("keypress", this.onKeyPress.bindAsEventListener(this));
    }
    this.fld.observe("paste", this.onPaste.bindAsEventListener(this));

    // Prevent normal browser autocomplete
    this.fld.setAttribute("autocomplete", "off");

    this.fld.observe("blur", function(event){
      // Make sure any running request will be dropped after the input field has been left
      this.latestRequest++;
      this.fld.removeClassName("loading");
    }.bind(this));
  },

  addInputObservers: function() {
    this.fld.observe("ms:suggest:containerCreated", this.onSuggestCreated.bindAsEventListener(this));

    this.fld.observe("ms:suggest:selected", this.onDataSubmitted.bindAsEventListener(this));

    this.fld.observe("change", this.onInputChanged.bindAsEventListener(this));
  },

  /**
   * Treats normal characters and triggers the autocompletion behavior. This is needed since the field value is not
   * updated when keydown/keypress are called, so the suggest would work with the previous value. The disadvantage is
   * that keyUp is not fired for each stroke in a long keypress, but only once at the end. This is not a real problem,
   * though.
   */
  onKeyUp: function(event)
  {
    var key = event.keyCode;
    switch(key) {
      // Ignore special keys, which are treated in onKeyPress
      case Event.KEY_RETURN:
      case Event.KEY_TAB:
      case Event.KEY_ESC:
      case Event.KEY_UP:
      case Event.KEY_DOWN:
        break;
      default: {
        // If there are separators in the input string, get suggestions only for the text after the last separator
        // TODO The user might be typing in the middle of the field, not in the last item. Do a better detection by
        // comparing the new value with the old one.
        if(this.seps) {
          var lastIndx = -1;
          for(var i = 0; i &lt; this.seps.length; i++) {
            if(this.fld.value.lastIndexOf(this.seps.charAt(i)) &gt; lastIndx) {
              lastIndx = this.fld.value.lastIndexOf(this.seps.charAt(i));
            }
          }
          if(lastIndx == -1) {
            this.getSuggestions(this.fld.value);
          } else {
            this.getSuggestions(this.fld.value.substring(lastIndx+1));
          }
        } else {
          this.getSuggestions(this.fld.value);
        }
      }
    }
  },
  /**
   * Use the key press routine to search as if some "other" key was pressed;
   * Pasted value is not yet available at the time of the "paste" event, so schedule
   * the handler to fire immediately after paste processing is done.
   */
  onPaste: function(event) {
    setTimeout(function () {
        this.onKeyUp({"keyCode": null});
      }.bind(this),0);
  },
  /**
   * Treats Up and Down arrows, Enter and Escape, affecting the UI meta-behavior. Enter puts the currently selected
   * value inside the target field, Escape closes the suggest dropdown, Up and Down move the current selection.
   */
  onKeyPress: function(event) {
    if(!$(this.isActive)) {
      // Stop Return from submitting the form
      if (event.keyCode == Event.KEY_RETURN) {
        Event.stop(event);
      }
      // Let all other key events pass through if the UI is not displayed
      return;
    }
    var key = event.keyCode;

    switch(key) {
      case Event.KEY_RETURN:
        this.setHighlightedValue();
        Event.stop(event);
        break;
      case Event.KEY_TAB:
        this.clearSuggestions();
        break;
      case Event.KEY_ESC:
        this.clearSuggestions();
        Event.stop(event);
        break;
      case Event.KEY_UP:
        this.changeHighlight(key);
        Event.stop(event);
        break;
      case Event.KEY_DOWN:
        this.changeHighlight(key);
        Event.stop(event);
        break;
      default:
        break;
    }
  },

  /**
   * Attaches mousedown observers on newly created suggests.
   *
   * @param event the event being observed
   */
  onSuggestCreated : function (event) {
    this.suggestionSelected = false;
    var _this = this;
    // A mousedown event occurred in the suggest. Don't want onInputChanged to perform a search on this loss of focus
    event.memo.container &amp;&amp; $(event.memo.container).observe("mousedown", function(event) {
      _this.suggestionSelected = true;
    });
  },

  /**
   * Reset the suggest variable.
   *
   * @param event the event being observed
   */
  onDataSubmitted : function (event) {
    // Prevents the onInputChanged performing searches unnecessarily, as an item was just selected from dropdown.
    this.suggestionSelected = true;
    this.lastSubmitted = event.memo.value || this.fld.value.strip();
  },

  /**
   * If no items are selected from the suggest dropdown, checks the suggest widget suggestions for exact matches.
   * If no exact match is found, performs a server-side search for the exact match.
   *
   * @param event the event being observed
   */
  onInputChanged : function (event) {
    if (this.suggestionSelected || this.fld.value.length &lt; this.options.minchars) {
      this.suggestionSelected = false;
      return;
    }
    // Prepare the query.
    var query = this.fld.value.strip();

    // Try to find a match among the suggest items.
    var matchSubmitted = this.submitDropdownMatch(query);

    // If no match found in suggest widget, perform a server-side search for the exact match.
    // This will most likely never happen.
    if (!matchSubmitted) {
      Event.fire(this.fld, "ms:suggest:not-selected");
      // Our input didn't change. No need to search again.
      if (query == this.lastSubmitted &amp;&amp; query.length &gt; 1) {
        return;
      }
      clearTimeout(this.ajID);
      this.submitAjaxSearchMatch(query, ++this.latestRequest);
    }
  },

  /**
   * Finds a match among the dropdown menu items, if exists, and submits it through the suggest widget.
   *
   * @param query the search query
   * @return {boolean} true iff a match was found, false otherwise
   */
  submitDropdownMatch : function (query) {
    if (typeof this.aSuggestions == 'undefined' || this.aSuggestions.length &lt;= 0) {
      return false;
    }
    var modQuery = query.toUpperCase();
    for (var i = 0; i &lt; this.aSuggestions.length; i++) {
      var item = this.aSuggestions[i];
      if (item.value.strip().toUpperCase() === modQuery || item.id.strip().toUpperCase() === modQuery) {
        this.acceptEntry(item, item.value, item.value);
        return true;
      }
    }
    return false;
  },

  /**
   * Performs a server-side search for the query, and submits if an exact match exists.
   *
   * @param query the search query
   * @param requestId the id of the current request
   */
  submitAjaxSearchMatch : function (query, requestId) {
    this.lastSubmitted = this.fld.value.strip();
    if (requestId &lt; this.latestRequest || this.fld.value.strip().length &lt; this.options.minchars) {
      return;
    }

    for (var i = 0; i &lt; this.sources.length; i++) {
      var source = this.sources[i];

      if (!source.matchScript) {
        continue;
      }

      var url = source.matchScript + source.matchVarname + "=" + encodeURIComponent(query);
      var method = source.method || "get";
      var headers = {};
      if (source.json) {
        headers.Accept = "application/json";
      } else {
        headers.Accept = "application/xml";
      }
      var ajx = new Ajax.Request(url, {
        method: method,
        requestHeaders: headers,
        onCreate : function () {
          this.fld.addClassName("loading");
        }.bind(this),
        onSuccess: this.setSearchData.bindAsEventListener(this, source, query, requestId),
        onComplete : function () {
          if (requestId &lt; this.latestRequest) {
            return;
          }
          this.fld.removeClassName("loading");
        }.bind(this)
      });
    }
  },

  /**
   * Process and set the data obtained from the ajax request.
   *
   * @param response the response from the ajax request
   * @param source
   * @param query the user-entered query term
   * @param requestId the ID of the current request
   * @return {boolean} false iff no json or xml data is available
   */
  setSearchData : function (response, source, query, requestId) {
    if (requestId &lt; this.latestRequest) {
      return false;
    }

    var result, _getResultFieldValue, _getResultFieldValueAsArray;
    if (source &amp;&amp; source.json) {
      var result = response.responseJSON;
      if (!result) {
        return false;
      }

      _getResultFieldValue = function(data, fieldName) {
        return data &amp;&amp; (data[fieldName + "_translated"] || data[fieldName]) || '';
      };

      _getResultFieldValueAsArray = function(data, fieldName) {
        return new Array(data &amp;&amp; (data[fieldName + "_translated"] || data[fieldName]) || '').flatten();
      };
    } else {
      var result = response.responseXML;
      if (!result) {
        return false;
      }

      _getResultFieldValue = function(data, selector) {
        var element = data &amp;&amp; Element.down(data, selector);
      return element &amp;&amp; element.firstChild &amp;&amp; element.firstChild.nodeValue || '';
      };

      _getResultFieldValueAsArray = function(data, selector) {
        var result = [];
        if (data) {
          Element.select(data, selector).each(function(item) {
            var value = item.firstChild &amp;&amp; item.firstChild.nodeValue;
            if (value) {
              result.push(value);
            }
          });
        }
        return result;
      };
    }
    var data = {
      'suggest' : this,
      'id': this._processId(_getResultFieldValue(result, source.resultId || this.options.resultId), source.forceFirstId || this.options.forceFirstId),
      'value': _getResultFieldValue(result, source.resultValue || this.options.resultValue),
      'info'    : this.generateResultInfo(result, _getResultFieldValueAsArray),
      'icon': _getResultFieldValue(result, source.resultIcon || this.options.resultIcon),
      'category': this.generateResultCategory(result, _getResultFieldValueAsArray)
    };

    this.acceptTypedInput(data, data.value)
  },

  /**
   * Accept the data provided.
   *
   * @param data the provided data
   * @param newValue the new displayed value for the input
   * @param silent true if the data should not be displayed in the input
   */
  acceptTypedInput : function (data, newValue, silent) {
    var event = Event.fire(this.fld, "ms:suggest:selected", data);
    if (!event.stopped) {
      if (!silent) {
        this.fld.value = newValue || this.fld.defaultValue || '';
      }
      // pass selected object to callback function, if exists
      if (typeof(this.options.callback) == "function") {
        this.options.callback(data);
      }
    }
  },

  /**
   * Get suggestions
   *
   * @param {Object} val the value to get suggestions for
   */
  getSuggestions: function (val)
  {
    // if input stays the same, do nothing
    //
    val = val.strip().toLowerCase();
    if (val == this.sInput &amp;&amp; val.length &gt; 1) {
      return false;
    }

    if (val.length == 0) {
      this.sInput = "";
      this.clearSuggestions();
      return false;
    }
    // input length is less than the min required to trigger a request
    // reset input string
    // do nothing
    //
    if (val.length &lt; this.options.minchars) {
      this.sInput = "";
      return false;
    }

    // if caching enabled, and user is typing (ie. length of input is increasing)
    // filter results out of aSuggestions from last request
    //
    if (val.length&gt;this.nInputChars &amp;&amp; this.aSuggestions.length &amp;&amp; this.options.cache)
    {
      var arr = [];
      for (var i=0;i&lt;this.aSuggestions.length;i++) {
        if (this.aSuggestions[i].value.substr(0,val.length).toLowerCase() == val) {
          arr.push( this.aSuggestions[i] );
        }
      }

      this.sInput = val;
      this.nInputChars = val.length;
      this.aSuggestions = arr;

      this.createList(this.aSuggestions);

      return false;
    } else  {
      // do new request
      this.sInput = val;
      this.nInputChars = val.length;

      this.prepareContainer();

      this.latestRequest++;
      var pointer = this;
      var requestId = this.latestRequest;
      clearTimeout(this.ajID);
      this.ajID = setTimeout( function() { pointer.doAjaxRequests(requestId) }, this.options.delay );

    }
    return false;
  },

  /**
   * Fire the AJAX Request(s) that will get suggestions
   */
  doAjaxRequests: function (requestId)
  {
    if (requestId &lt; this.latestRequest) {
      return;
    }

    if (this.fld.value.length &lt; this.options.minchars) {
      return;
    }

    for (var i=0;i&lt;this.sources.length;i++) {
      var source = this.sources[i];

      // create ajax request
      var query = this.fld.value.strip();
      var url = source.script + source.varname + "=" + encodeURIComponent(query);
      var method = source.method || "get";
      var headers = {};
      if (source.json) {
        headers.Accept = "application/json";
      } else {
        headers.Accept = "application/xml";
      }

      var ajx = new Ajax.Request(url, {
        method: method,
        requestHeaders: headers,
        onCreate : function () {
          this.fld.addClassName("loading");
        }.bind(this),
        onSuccess: this.setSuggestions.bindAsEventListener(this, source, requestId),
        onFailure: function (response) {
          //new PhenoTips.widgets.Notification("Failed to retrieve suggestions : ')" + response.statusText, "error", {timeout: 5});
          alert("Failed to retrieve suggestions : " + response.statusText);
        },
        onComplete : function () {
          if (requestId &lt; this.latestRequest) {
            return;
          }
          this.fld.removeClassName("loading");
        }.bind(this)
      });
    }
  },

  /**
   * Set suggestions
   *
   * @param {Object} req
   * @param {Object} source
   * @param {Number} requestId the identifier of the request for which this callback is triggered.
   */
  setSuggestions: function (req, source, requestId)
  {

    // If there has been one or several requests fired in the mean time (between the time the request for which this callback
    // has been triggered and the time of the callback itself) ; we don't do anything and leave it to following callbacks to
    // set potential suggestions
    if (requestId &lt; this.latestRequest) {
      return;
    }

    this.aSuggestions = this.getSuggestionList(req, source);
    this.createList(this.aSuggestions, source);
  },

  getSuggestionList : function (req, source) {
    var aSuggestions = [];
    if (source &amp;&amp; source.json) {
      var jsondata = req.responseJSON;
      if (!jsondata) {
        return false;
      }
      var results = jsondata[source.resultsParameter || this.options.resultsParameter];

      var _getResultFieldValue = function(data, fieldName) {
        return data &amp;&amp; (data[fieldName + "_translated"] || data[fieldName]) || '';
      }

      var _getResultFieldValueAsArray = function(data, fieldName) {
        return new Array(data &amp;&amp; (data[fieldName + "_translated"] || data[fieldName]) || '').flatten();
      };
    } else {
      var xmldata = req.responseXML;
      if (!xmldata) {
        return false;
      }
      var results = xmldata.getElementsByTagName((source &amp;&amp; source.resultsParameter) || this.options.resultsParameter);

      var _getResultFieldValue = function(data, selector) {
        var element = data &amp;&amp; Element.down(data, selector);
        return element &amp;&amp; element.firstChild &amp;&amp; element.firstChild.nodeValue || '';
      }

      var _getResultFieldValueAsArray = function(data, selector) {
        var result = new Array();
        if (data) {
          Element.select(data, selector).each(function(item) {
            var value = item.firstChild &amp;&amp; item.firstChild.nodeValue;
            if (value) {
              result.push(value);
            }
          });
        }
        return result;
      };
    }

    for (var i = 0; i &lt; results.length; i++) {
      var info = this.generateResultInfo(results[i], _getResultFieldValueAsArray);
      var category = this.generateResultCategory(results[i], _getResultFieldValueAsArray);

      if (this.options.resultAltName) {
        var bestNameMatch = '';
        var name =  _getResultFieldValue(results[i], source.resultValue || this.options.resultValue);
        var altNames = _getResultFieldValueAsArray(results[i], source.resultAltName || this.options.resultAltName);
        var nameMatchScore = this.computeSimilarity(name, this.sInput);
        for (var k = 0; k &lt; altNames.length; ++k) {
           var altNameMatchScore = this.computeSimilarity(altNames[k], this.sInput);
           if (altNameMatchScore &gt; nameMatchScore) {
             bestNameMatch = altNames[k];
             nameMatchScore = altNameMatchScore;
           }
        }
      }

      aSuggestions.push({
        'id': this._processId(_getResultFieldValue(results[i], source.resultId || this.options.resultId), source.forceFirstId || this.options.forceFirstId),
        'value': _getResultFieldValue(results[i], source.resultValue || this.options.resultValue),
        'icon': _getResultFieldValue(results[i], source.resultIcon || this.options.resultIcon),
        'altName': bestNameMatch,
        'info'    : info,
        'category': category
      });
    }
    return aSuggestions;
  },

  _processId : function (identifier, forceFirstId) {
      if (identifier.constructor === Array &amp;&amp; forceFirstId) {
        return identifier.length &gt; 0 ? identifier[0] : '';
      } else {
        return identifier;
      }
  },

  /**
   * Generates HTML containing the result information.
   *
   * @param result the ajax search result
   * @param getResultValueAsArray callback function
   * @return {*} the info html string
   * @private
   */
  generateResultInfo : function (result, getResultValueAsArray) {
    var info = new Element("dl");
    var _this = this;
    for (var section in this.options.resultInfo) {
      var sOptions = this.options.resultInfo[section];
      var sectionClass = section.strip().toLowerCase().replace(/[^a-z0-9 ]/gi, '').replace(/\s+/gi, "-");
      var sectionState = "";
      if (sOptions.collapsed) {
        sectionState = "collapsed";
      }
      var processingFunction = sOptions.processor;
      if (sOptions.extern) {
        var trigger =  new Element("a").update(section);
        trigger._processingFunction = processingFunction;
        info.insert({"bottom" : new Element("dt", {'class' : sectionState + " " + sectionClass})
          .insert({'bottom' : trigger})});
        trigger._processingFunction.call(this, trigger);
        continue;
      }
      var selector = sOptions.selector;
      if (!selector) {
        continue;
      }
      var sectionContents = null;
      getResultValueAsArray(result, selector).each(function(item) {
        var text = item || '';
        if (typeof (processingFunction) == "function") {
          text = processingFunction(text);
        }
        if (text == '') {return;}
        if (!sectionContents) {
          var trigger = new Element("a", {'class' : 'expand-tool'})
            .update(_this._getExpandCollapseTriggerSymbol(sOptions.collapsed));
          info.insert({"bottom" : new Element("dt", {'class' : sectionState})
            .insert({'top' : trigger})
            .insert({'bottom' : section})});
          sectionContents = new Element("dd", {'class' : 'expandable'});
          info.insert({"bottom" : sectionContents});
          trigger.observe('click', function(event) {
            event.stop();
            trigger.up().toggleClassName('collapsed');
            trigger.update(_this._getExpandCollapseTriggerSymbol(trigger.up().hasClassName('collapsed')));
          }.bindAsEventListener(this));
        }
        sectionContents.insert({"bottom" : new Element("div").update(text)});
      });
    }
    if (!info.hasChildNodes()) {
      info = '';
    }
    return info;
  },

  /**
   * Generates HTML if result category is set.
   *
   * @param result the ajax search result
   * @param getResultValueAsArray callback function
   * @return {*} the category html string
   * @private
   */
  generateResultCategory : function (result, getResultValueAsArray) {
    if (this.options.resultCategory) {
      var category = new Element("span", {'class' : 'hidden term-category'});
      getResultValueAsArray(result, this.options.resultCategory).each(function(c) {
        category.insert(new Element('input', {'type' : 'hidden', 'value' : c}));
      });
    }
    if (!this.options.resultCategory || !category.hasChildNodes()) {
      category = '';
    }
    return category;
  },

  _getExpandCollapseTriggerSymbol : function(isCollapsed) {
    if (isCollapsed) return "&amp;#x25B8;";
    return "&amp;#x25BE;";
  },

  /**
   * Compute the Smith Waterman similarity between two strings
   */
  computeSimilarity: function(str1, str2) {
    var score;
    var maxSoFar=0;
    var gapCost = 2;

    // get values
    var a = str1;
    var m = a.length;

    //n is the length of currFieldValue
    var b = str2;
    var n = b.length;

    //declare the matrix
    var d = new Array();

    for (i = 0; i &lt; n; i++) {
      d[i] = new Array();

      // get the substitution score
      score = (a.charAt(i) == b.charAt(0))? 1: -1;

      if (i == 0) {
        d[0][0] = Math.max(0,-gapCost,score);
      }else {
        d[i][0] = Math.max(0,d[i - 1][0] - gapCost,score);
      }

      //update max possible if available
      if (d[i][0] &gt; maxSoFar) {
        maxSoFar = d[i][0];
      }
    }

    for (j = 0; j &lt; m; j++) {
      // get the substitution score
      score = (a.charAt(0) == b.charAt(j))? 1: -1;

      if (j == 0) {
        d[0][0] = Math.max(0,-gapCost,score);
      }else {
        d[0][j] = Math.max(0,d[0][j - 1] - gapCost,score);
      }

      //update max possible if available
      if (d[0][j] &gt; maxSoFar) {
        maxSoFar = d[0][j];
      }
    }

    // cycle through rest of table filling values from the lowest cost value of the three part cost function
    for (i = 1; i &lt; n; i++) {
      for (j = 1; j &lt; m; j++) {
        // get the substitution score
        score = (a.charAt(i) == b.charAt(j))? 1: -1;

        // find lowest cost at point from three possible
        d[i][j] = Math.max(0,d[i - 1][j] - gapCost,d[i][j - 1] - gapCost,d[i - 1][j - 1] + score);
        //update max possible if available
        if (d[i][j] &gt; maxSoFar) {
          maxSoFar = d[i][j];
        }
      }
    }
    // return max value within matrix as holds the maximum edit score
    return maxSoFar;
  },


  /**
   * Creates the container that will hold one or multiple source results.
   */
  prepareContainer: function() {

    var crtContainer = $(this.options.parentContainer).down('.suggestItems');

    if (crtContainer &amp;&amp; crtContainer.__targetField != this.fld) {
       if (crtContainer.__targetField) {
         crtContainer.__targetField._suggest.clearSuggestions();
       } else {
         crtContainer.remove();
       }
       crtContainer = false;
    }

    if (!crtContainer) {
      // If the suggestion top container is not in the DOM already, we create it and inject it

      var div = new Element("div", { 'class': "suggestItems "+ this.options.className });

      // Get position of target textfield
      var pos = $(this.options.parentContainer).tagName.toLowerCase() == 'body' ? this.fld.cumulativeOffset() : this.fld.positionedOffset();

      // Container width is passed as an option, or field width if no width provided.
      // The 2px substracted correspond to one pixel of border on each side of the field,
      // this allows to have the suggestion box borders well aligned with the field borders.
      // FIXME this should be computed instead, since border might not always be 1px.
      var containerWidth = this.options.width ? this.options.width : (this.fld.offsetWidth - 2)

      if (this.options.align == 'left') {
        // Align the box on the left
        div.style.left = pos.left + "px";
      } else if (this.options.align == "center") {
        // Align the box to the center
        div.style.left = pos.left + (this.fld.getWidth() - containerWidth - 2) / 2 + "px";
      } else {
        // Align the box on the right.
        // This has a visible effect only when the container width is not the same as the input width
        div.style.left = (pos.left - containerWidth + this.fld.offsetWidth - 2) + "px";
      }

      div.style.top = (pos.top + this.fld.offsetHeight + this.options.offsety) + "px";
      div.style.width = containerWidth + "px";

      // set mouseover functions for div
      // when mouse pointer leaves div, set a timeout to remove the list after an interval
      // when mouse enters div, kill the timeout so the list won't be removed
      var pointer = this;
      div.onmouseover = function(){ pointer.killTimeout() }
      div.onmouseout = function(){ pointer.resetTimeout() }

      this.resultContainer = new Element("div", {'class':'resultContainer'});
      div.appendChild(this.resultContainer);

      // add DIV to document
      $(this.options.parentContainer).insert(div);

      this.container = div;

      if (this.options.insertBeforeSuggestions) {
        this.resultContainer.insert(this.options.insertBeforeSuggestions);
      }

      this.fld.fire("ms:suggest:containerCreated", {
        'container' : this.container,
        'suggest' : this
      });
    }

    if (this.sources.length &gt; 1) {
      // If we are in multi-source mode, we need to prepare a sub-container for each of the suggestion source
      for (var i=0;i&lt;this.sources.length;i++) {

        var source = this.sources[i];
        source.id = i

        if(this.resultContainer.down('.results' + source.id)) {
          // If the sub-container for this source is already present, we just re-initialize it :
          // - remove its content
          // - set it as loading
          if (this.resultContainer.down('.results' + source.id).down('ul')) {
            this.resultContainer.down('.results' + source.id).down('ul').remove();
          }
          if (!this.options.unifiedLoader) {
            this.resultContainer.down('.results' + source.id).down('.sourceContent').addClassName('loading');
          }
          else {
            (this.options.loaderNode || this.fld).addClassName("loading");
            this.resultContainer.down('.results' + source.id).addClassName('hidden loading');
          }
        }
        else {
          // The sub-container for this source has not been created yet
          // Really create the subcontainer for this source and inject it in the global container
          var sourceContainer = new Element('div', {'class' : 'results results' + source.id}),
              sourceHeader = new Element('div', {'class':'sourceName'});

          if (this.options.unifiedLoader) {
            sourceContainer.addClassName('hidden loading');
          }

          if (typeof source.icon != 'undefined') {
            // If there is an icon for this source group, set it as background image
            var iconImage = new Image();
            iconImage.onload = function(){
              this.sourceHeader.setStyle({
                backgroundImage: "url(" + this.iconImage.src + ")"
              });
              this.sourceHeader.setStyle({
                textIndent:(this.iconImage.width + 6) + 'px'
              });
            }.bind({
              sourceHeader:sourceHeader,
              iconImage:iconImage
            });
            iconImage.src = source.icon;
          }
          sourceHeader.insert(source.name)
          sourceContainer.insert( sourceHeader );
          var classes = "sourceContent " + (this.options.unifiedLoader ? "" : "loading");
          sourceContainer.insert( new Element('div', {'class':classes}));

          if (typeof source.before !== 'undefined') {
            this.resultContainer.insert(source.before);
          }
          this.resultContainer.insert(sourceContainer);
          if (typeof source.after !== 'undefined') {
            this.resultContainer.insert(source.after);
          }
        }
      }
    } else {
      // In mono-source mode, reset the list if present
      if (this.resultContainer.down("ul")) {
        this.resultContainer.down("ul").remove();
      }
    }

    var ev = this.container.fire("ms:suggest:containerPrepared", {
      'container' : this.container,
      'suggest' : this
    });

    this.container.__targetField = this.fld;
    if (this.options.enableHideButton &amp;&amp; !this.container.down('.hide-button')) {
      var hideButton = new Element('span', {'class' : 'hide-button'}).update("$services.localization.render('phenotips.widgets.suggest.hideSuggestions')");
      hideButton.observe('click', this.clearSuggestions.bindAsEventListener(this));
      this.container.insert({top : new Element('div', {'class' : 'hide-button-wrapper'}).update(hideButton)});

      hideButton = new Element('span', {'class' : 'hide-button'}).update("$services.localization.render('phenotips.widgets.suggest.hideSuggestions')");
      hideButton.observe('click', this.clearSuggestions.bindAsEventListener(this));
      this.container.insert({bottom : new Element('div', {'class' : 'hide-button-wrapper'}).update(hideButton)});
    }
    return this.container;
  },

  /**
   * Create the HTML list of suggestions.
   *
   * @param {Object} arr
   * @param {Object} source the source for data for which to create this list of results.
   */
  createList: function(arr, source)
  {
    this.isActive = true;
    var pointer = this;

    this.killTimeout();
    this.clearHighlight();

    // create holding div
    //
    if (this.sources.length &gt; 1) {
      var div = this.resultContainer.down(".results" + source.id);
      if (arr.length &gt; 0 || this.options.shownoresults) {
        div.down('.sourceContent').removeClassName('loading');
        this.resultContainer.down(".results" + source.id).removeClassName("hidden loading");
      }

      // If we are in mode "unified loader" (showing one loading indicator for all requests and not one per request)
      // and there aren't any source still loading, we remove the unified loading status.
      if (this.options.unifiedLoader &amp;&amp; !this.resultContainer.down("loading")) {
        (this.options.loaderNode || this.fld).removeClassName("loading");
      }
    }
    else {
      var div = this.resultContainer;
    }

    // if no results, and shownoresults is false, go no further
    if (arr.length == 0 &amp;&amp; !this.options.shownoresults) {
      return false;
    }

    // Ensure any previous list of results for this source gets removed
    if (div.down('ul')) {
      div.down('ul').remove();
    }

    // create and populate list
    var list = this.createListElement(arr, pointer);
    div.appendChild(list);
    Event.fire(document, "xwiki:dom:updated", {elements : [list]})

    this.suggest = div;

    // remove list after an interval
    var pointer = this;
    if (this.options.timeout &gt; 0) {
      this.toID = setTimeout(function () { pointer.clearSuggestions() }, this.options.timeout);
    }
    this.highlightFirst();
  },

  createListElement : function(arr, pointer) {
    var list = new PhenoTips.widgets.XList([], {
       icon: this.options.icon,
       classes: 'suggestList',
       eventListeners: {
          'click' : function () { pointer.setHighlightedValue(); return false; },
          'mouseover' : function () { pointer.setHighlight( this.getElement() ); }
       }
    });

    // loop throught arr of suggestions
    // creating an XlistItem for each suggestion
    //
    // at the same time check if any of the suggestions
    // is the exact case-insensitive match of the input
    //
    var exactMatch = false;
    for (var i = 0,len = arr.length; i &lt; len; i++)
    {
       if (arr[i].value.toLowerCase() == this.fld.value.strip().toLowerCase()
           || arr[i].id.toLowerCase() == this.fld.value.strip().toLowerCase()) {
           exactMatch = arr[i];
       }
       if (!this.options.filterFunc || this.options.filterFunc(arr[i])) {
           list.addItem(this.generateListItem(arr[i]));
       }
    }
    // no results
    if (arr.length == 0)
    {
      list.addItem( new PhenoTips.widgets.XListItem(this.options.noresults, {
                          'classes' : 'noSuggestion',
                          noHighlight :true }) );
    }
    if (this.fld.hasClassName('accept-value') &amp;&amp; !exactMatch) {
       var customItemId = this.fld.value.replace(/[^a-z0-9_]+/gi, "_");
       var customItemCategoryInfo = this.fld.next('input[name="_category"]');
       var customItemCategories = customItemCategoryInfo &amp;&amp; customItemCategoryInfo.value.split(",") || [];
       var customItemCategoriesElt = new Element('div', {'class' : 'hidden term-category'});
       var categoryFieldName = this.fld.name + "__" + customItemId + "__category";
       customItemCategories.each(function (c) {
         if (c) {
           customItemCategoriesElt.insert(new Element('input', {'type' : 'hidden', name: categoryFieldName, value: c}));
         }
       });
       list.addItem(this.generateListItem({
         id: this.fld.value,
         value: this.fld.value,
         category: customItemCategoriesElt,
         custom: true,
         info: new Element('div', {'class' : 'hint'}).update('(your text, not a standard term)')
       }, 'custom-value', true));
    }
    return list.getElement();
  },

  generateListItem : function(data, cssClass, disableTooltip) {
    var displayNode = new Element("div", {'class': 'tooltip-'+this.options.tooltip});
    // If the search result contains an icon information, we insert this icon in the result entry.
    if (data.icon) {
      displayNode.insert(new Element("img", {'src' : data.icon, 'class' : 'icon' }));
    }
    if (this.options.displayId) {
        displayNode.insert(new Element('span', {'class':'suggestId'}).update(data.id.escapeHTML()));
    }
    displayNode.insert(new Element('span', {'class':'suggestValue'}).update(data.value.escapeHTML()));

    if (this.options.tooltip &amp;&amp; !disableTooltip) {
      var infoTool = new Element('span', {'class' : 'fa fa-info-circle xHelpButton ' + this.options.tooltip, 'title' : data.id, 'data-source' : this.fld.id});
      infoTool.observe('click', function(event) {event.stop()});
      displayNode.insert(' ').insert(infoTool);
    }
    var displayInfo = new Element('div', {'class':'suggestInfo'}).update(data.info);
    displayNode.insert(displayInfo);
    if(data.altName){
        displayInfo.insert({'top' : new Element('span', {'class':'matching-alternative-name'}).update(data.altName.escapeHTML())});
    }

    var valueNode = new Element('div')
            .insert(new Element('span', {'class':'suggestId'}).update(data.id.escapeHTML()))
            .insert(new Element('span', {'class':'suggestValue'}).update(data.value.escapeHTML()))
            .insert(new Element('div', {'class':'suggestCategory'}).update(data.category));
    data.custom &amp;&amp; valueNode.insert(new Element('div', {'class':'isCustom'}).update(data.custom));
    valueNode.store('itemData', data);

    var item = new PhenoTips.widgets.XListItem( displayNode , {
        containerClasses: 'suggestItem ' + (cssClass || ''),
        value: valueNode,
        noHighlight: true // we do the highlighting ourselves
    });

    Event.fire(this.fld, "ms:suggest:suggestionCreated", {element: item.getElement(), suggest: this});

    return item;
  },

  /**
   * Emphesize the elements in passed value that matches one of the words typed as input by the user.
   *
   * @param String input the (typed) input
   * @param String value the value to emphasize
   */
  emphasizeMatches:function(input, value)
  {
    // If the source declares that results are matching, we highlight them in the value
    var output = value,
        // Separate words (called fragments hereafter) in user input
        fragments = input.split(' ').uniq().compact(),
        offset = 0,
        matches = {};

    for (var j=0,flen=fragments.length;j&lt;flen;j++) {
      // We iterate over each fragments, and try to find one or several matches in this suggestion
      // item display value.
      var index = output.toLowerCase().indexOf(fragments[j].toLowerCase());
      while (index &gt;= 0) {
        // As long as we have matches, we store their index and replace them in the output string with the space char
        // so that they don't get matched for ever.
        // Note that the space char is the only one safe to use, as it cannot be part of a fragment.
        var match = output.substring(index, index + fragments[j].length),
            placeholder = "";
        fragments[j].length.times(function(){
          placeholder += " ";
        });
        matches[index] = match;
        output = output.substring(0, index) + placeholder + output.substring(index + fragments[j].length);
        index = output.toLowerCase().indexOf(fragments[j].toLowerCase());
      }
    }
    // Now that we have found all matches for all possible fragments, we iterate over them
    // to construct the final "output String" that will be injected as a suggestion item,
    // with all matches emphasized
    Object.keys(matches).sortBy(function(s){return parseInt(s)}).each(function(key){
      var before = output.substring(0, parseInt(key) + offset);
      var after = output.substring(parseInt(key) + matches[key].length + offset);
      // Emphasize the match in the output string that will be displayed
      output = before + "&lt;em&gt;" + matches[key] + "&lt;/em&gt;" + after;
      // Increase the offset by 9, which correspond to the number of chars in the opening and closing "em" tags
      // we have introduced for this match in the output String
      offset += 9;
    });

    return output;
  },

  /**
   * Change highlight
   *
   * @param {Object} key
   */
  changeHighlight: function(key)
  {
    var list = this.resultContainer;
    if (!list)
      return false;

    var n, elem;

    if (this.iHighlighted) {
      // If there is already a highlighted element, we look for the next or previous highlightable item in the list
      // of results, according to which key has been pressed.
      if (key == Event.KEY_DOWN) {
        elem = this.iHighlighted.next();
        if (!elem &amp;&amp; this.iHighlighted.up('div.results')) {
          // if the next item could not be found and multi-source mode, find the next not empty source
          var source = this.iHighlighted.up('div.results').next();
          while (source &amp;&amp; !elem) {
            elem = source.down('li');
            source = source.next();
          }
        }
        if(!elem) {
          elem = list.down('li');
        }
      }
      else if (key == Event.KEY_UP) {
        elem = this.iHighlighted.previous();
        if (!elem &amp;&amp; this.iHighlighted.up('div.results')) {
          // if the previous item could not be found and multi-source mode, find the previous not empty source
          var source = this.iHighlighted.up('div.results').previous();
          while(source &amp;&amp; !elem) {
            elem = source.down('li:last-child');
            source = source.previous();
          }
        }
        if (!elem) {
          elem =  list.select('ul')[list.select('ul').length - 1].down('li:last-child');
        }
      }
    }
    else {
      // No item is highlighted yet, so we just look for the first or last highlightable item,
      // according to which key, up or down, has been pressed.
      if (key == Event.KEY_DOWN) {
        if (list.down('div.results')) {
          elem = list.down('div.results').down('li')
        }
        else {
          elem = list.down('li');
        }
      }
      else if (key == Event.KEY_UP)
        if (list.select('li') &gt; 0) {
          elem = list.select('li')[list.select('li').length - 1];
        }
    }

    if (elem) {
      this.setHighlight(elem);
    }
  },

  /**
   * Set highlight
   *
   * @param {Object} n
   */
  setHighlight: function(highlightedItem)
  {
    if (this.iHighlighted)
      this.clearHighlight();

    highlightedItem.addClassName("xhighlight");

    this.iHighlighted = highlightedItem;

    this.killTimeout();
  },

  /**
   * Clear highlight
   */
  clearHighlight: function()
  {
    if (this.iHighlighted) {
      this.iHighlighted.removeClassName("xhighlight");
      delete this.iHighlighted;
    }
  },

  highlightFirst: function()
  {
    if (this.suggest &amp;&amp; this.suggest.down('ul')) {
      var first = this.suggest.down('ul').down('li');
      if (first) {
        this.setHighlight(first);
      }
    }
  },

  /**
   * return true if a suggestion is highlighted, false otherwise
   */
  hasActiveSelection: function(){
    return this.iHighlighted;
  },

  setHighlightedValue: function ()
  {
    if (this.iHighlighted &amp;&amp; !this.iHighlighted.hasClassName('noSuggestion'))
    {
      var selection, newFieldValue
      if(this.sInput == "" &amp;&amp; this.fld.value == "")
        selection = newFieldValue = this.iHighlighted.down(".suggestValue").innerHTML;
      else {
        if(this.seps) {
           var lastIndx = -1;
           for(var i = 0; i &lt; this.seps.length; i++)
             if(this.fld.value.lastIndexOf(this.seps.charAt(i)) &gt; lastIndx)
               lastIndx = this.fld.value.lastIndexOf(this.seps.charAt(i));
            if(lastIndx == -1)
              selection = newFieldValue = this.iHighlighted.down(".suggestValue").innerHTML;
            else
            {
               newFieldValue = this.fld.value.substring(0, lastIndx+1) + this.iHighlighted.down(".suggestValue").innerHTML;
               selection = newFieldValue.substring(lastIndx+1);
           }
        }
        else
          selection = newFieldValue = this.iHighlighted.down(".suggestValue").innerHTML;
      }

      var inputData = this.iHighlighted.down('.value div').retrieve('itemData');
      var data = {
        suggest  : this,
        id       : inputData.id || this.iHighlighted.down(".suggestId").innerHTML,
        value    : inputData.value || this.iHighlighted.down(".suggestValue").innerHTML,
        info     : inputData.info || this.iHighlighted.down(".suggestInfo").innerHTML,
        icon     : inputData.icon || (this.iHighlighted.down('img.icon') ? this.iHighlighted.down('img.icon').src : ''),
        category : this.iHighlighted.down(".suggestCategory").innerHTML,
        custom   : inputData.custom || false
      };
      this.acceptEntry(data, selection, newFieldValue);
    }
  },

  acceptEntry : function(data, selection, newFieldValue, silent) {
      var event = Event.fire(this.fld, "ms:suggest:selected", data);

      if (!event.stopped) {
        if (!silent) {
          this.sInput = selection;
          this.fld.value = newFieldValue || this.fld.defaultValue || '';
          this.fld.focus();
          this.clearSuggestions();
        }
        // pass selected object to callback function, if exists
        if (typeof(this.options.callback) == "function") {
          this.options.callback(data);
        }

        //there is a hidden input
        if(this.fld.id.indexOf("_suggest") &gt; 0) {
          var hidden_id = this.fld.id.substring(0, this.fld.id.indexOf("_suggest"));
          var hidden_inp = $(hidden_id);
          if (hidden_inp) {
            hidden_inp.value =  info;
          }
        }
      }
  },

  /**
   * Kill timeout
   */
  killTimeout: function()
  {
    clearTimeout(this.toID);
  },

  /**
   * Reset timeout
   */
  resetTimeout: function()
  {
    clearTimeout(this.toID);
    var pointer = this;
    this.toID = setTimeout(function () { pointer.clearSuggestions() }, 1000000);
  },

  /**
   * Clear suggestions
   */
  clearSuggestions: function() {
    this.killTimeout();
    this.isActive = false;
    var ele = $(this.container);
    var pointer = this;
    if (ele &amp;&amp; ele.parentNode) {

      // if clearSuggestions() was called not from inside widget
      // when user clicked outside suggestion container - no suggestion was explicitly selected.
      // Calling onInputChanged() to check the suggest widget suggestions for exact matches
      // and if find one - the code subsequently fires "ms:suggest:selected" event
      if (!this.suggestionSelected) {
        this.onInputChanged();
      }

      if (this.options.fadeOnClear) {
        var fade = new Effect.Fade(ele, {duration: "0.25", afterFinish : function() {
          if($(pointer.container)) {
            $(pointer.container).remove();
          }
        }});
      }
      else {
        if (ele &amp;&amp; ele.parentNode) { ele.remove(); }
      }
      document.fire("ms:suggest:clearSuggestions", { 'suggest' : this});
      this.suggestionSelected = false;
    }
  }

 });

 }

 return PhenoTips;

})(PhenoTips || {});</code>
    </property>
    <property>
      <name>Modified suggest widget</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d12911da-ec96-4e6b-bee9-8e6a5673edf8</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.SuggestPicker = Class.create({

  options : {
    'showKey' : true,
    'showTooltip' : false,
    'showDeleteTool' : true,
    'enableSort' : true,
    'showClearTool' : true,
    'inputType': 'hidden',
    'listInsertionElt' : null,
    'listInsertionPosition' : 'after',
    'predefinedEntries' : null,
    'acceptFreeText' : false
  },
  initialize: function(element, suggest, options, serializedDataInput) {
    this.options = Object.extend(Object.clone(this.options), options || { });
    this.serializedDataInput = serializedDataInput;
    this.input = element;
    this.suggest = suggest;
    this.inputName = this.input.name;
    if (!this.options.acceptFreeText) {
      this.input.name = this.input.name + "__suggested";
    } else {
      this.input.addClassName("accept-value");
    }
    this.suggest.options.callback = this.acceptSuggestion.bind(this);
    this.list = new Element('ul', {'class' : 'accepted-suggestions'});
    var listInsertionElement;
    if (this.options.listInsertionElt) {
      if (typeof(this.options.listInsertionElt) == "string") {
        listInsertionElement = this.input.up().down(this.options.listInsertionElt);
      } else {
        listInsertionElement = this.options.listInsertionElt;
      }
    }
    if (!listInsertionElement) {
      listInsertionElement = this.input;
    }
    var insertion = {};
    insertion[this.options.listInsertionPosition] = this.list;
    listInsertionElement.insert(insertion);
    this.predefinedEntries = this.options.predefinedEntries ? $(this.options.predefinedEntries) : null;
    if (this.options.showClearTool) {
      this.clearTool = new Element('span', {'class' : 'clear-tool delete-tool invisible', 'title' : "$services.localization.render('phenotips.widgets.multiSuggest.clear.title')"}).update('$services.localization.render('phenotips.widgets.multiSuggest.clear') &amp;#x2716;');
      this.clearTool.observe('click', this.clearAcceptedList.bindAsEventListener(this));
      this.list.insert({'after': this.clearTool});
    }
    if (typeof(this.options.onItemAdded) == "function") {
      this.onItemAdded = this.options.onItemAdded;
    }
  },

  acceptAddItem : function (key, negative) {
    var searchFor = 'input[id="' + this.getInputId(key, negative).replace(/[^a-zA-Z0-9_-]/g, '\\$&amp;') + '"]';
    var input = this.predefinedEntries ? this.predefinedEntries.down(searchFor) : this.list ? this.list.down(searchFor) : $(this.getInputId(key, negative));
    if (input) {
      input.checked = true;
      Event.fire(input, 'suggest:change');
      //this.ensureVisible(input.up(), true);
      this.synchronizeSelection(input);
      return false;
    }
    return true;
  },

  ensureVisible : function (element, force) {
    if (this.silent || (!force &amp;&amp; this.options.silent) || element.up('.hidden')) {return;}
    var section = element.up('.collapsed:not(.force-collapse)');
    while (section) {
      section.removeClassName('collapsed');
      if (section.down('.expand-tool')) {
        section.down('.expand-tool').update('▼');
      }
      section = section.up('.collapsed:not(.force-collapse)');
    }
    if (element.viewportOffset().top &gt; this.input.viewportOffset().top) {
      if (element.viewportOffset().top &gt; document.viewport.getHeight()) {
        if (element.viewportOffset().top - this.input.viewportOffset().top &lt; document.viewport.getHeight()) {
          this.input.scrollTo();
        } else {
          element.scrollTo();
        }
      }
    } else {
      if (element.cumulativeOffset().top &lt; document.viewport.getScrollOffsets().top) {
        element.scrollTo();
      }
    }
  },

  acceptSuggestion : function(obj) {
    this.input.value = this.input.defaultValue || "";
    if (this.acceptAddItem(obj.id || obj.value, obj.negative)) {
      this.addItem(obj.id || obj.value, obj.value, obj.info, obj.category, obj.custom);
    }
    return false;
  },

  addItem : function(key, value, info, category, custom) {
    if (!key) {
      return;
    }
    var id = this.getInputId(key);
    var listItem = new Element("li");
    var displayedValue = new Element("label", {"class": "accepted-suggestion", "for" : id});
    // insert input
    var inputOptions = {"type" : this.options.inputType, "name" : this.inputName, "id" : id, "value" : key};
    if (this.options.inputType == 'checkbox') {
      inputOptions.checked = true;
    }
    displayedValue.insert({'bottom' : new Element("input", inputOptions)});
    // if the key should be displayed, insert it
    if (this.options.showKey &amp;&amp; !custom) {
      displayedValue.insert({'bottom' : new Element("span", {"class": "key"}).update("[" + key.escapeHTML() + "]")});
      displayedValue.insert({'bottom' : new Element("span", {"class": "sep"}).update(" ")});
    }
    // insert the displayed value
    displayedValue.insert({'bottom' : new Element("span", {"class": "value"}).update(value.escapeHTML())});
    listItem.insert(displayedValue);
    if(this.suggest.options.tooltip) {
      var infoTool = this.suggest.options.markFreeText &amp;&amp; custom ? new Element('span', {'class' : 'fa fa-fw fa-exclamation-triangle', 'title' : this.suggest.options.freeTextTooltipHint || ''}) : new Element('span', {'class' : 'fa fa-info-circle xHelpButton ' + this.suggest.options.tooltip, title : key, 'data-source' : this.input &amp;&amp; this.input.id || ''});
      listItem.insert(infoTool);
    }
    if (category &amp;&amp; category != '') {
      listItem.insert(category);
    }
    // delete tool
    if (this.options.showDeleteTool) {
      var deleteTool = new Element("span", {'class': "delete-tool", "title" : "Delete this term"}).update('&amp;#x2716;');
      deleteTool.observe('click', this.removeItem.bindAsEventListener(this));
      listItem.appendChild(deleteTool);
    }
    // tooltip, if information exists and the options state there should be a tooltip
    if (this.options.showTooltip &amp;&amp; info) {
      listItem.appendChild(new Element("div", {'class' : "tooltip"}).update(info));
      listItem.select('.expand-tool').invoke('observe', 'click', function(event){event.stop();});
    }
    this.list.insert(listItem);
    var newItem = this.list ? this.list.down('input[id="' + id.replace(/[^a-zA-Z0-9_-]/g, '\\$&amp;') + '"]') : $(id);
    //this.ensureVisible(newItem);
    this.synchronizeSelection(newItem);
    newItem.observe('change', this.synchronizeSelection.bind(this, newItem));
    this.updateListTools();
    Event.fire(document, 'xwiki:dom:updated', {'elements' : [listItem]});
    this.onItemAdded(newItem)
    return newItem;
  },

  onItemAdded : function (element) {
  },

  removeItem : function(e) {
    // The parameter can be an event or a target element, depending on how it is called
    var item = e.findElement &amp;&amp; e.findElement('li') || e;
    this.synchronizeSelection({
      value   : (item.down('input[type=checkbox]') || item.down('input')).value,
      checked : false
    });
    item.remove();
    this.notifySelectionChange(item);
    this.input.value = this.input.defaultValue || "";
    this.updateListTools();
  },

  clearAcceptedList : function () {
    var _this = this;
    // note: removal of one item may trigger (via an event and event handler in client code) removal or addition of
    // other items, so need to use a while() loop to remove whatever elements happen to be there after each removeItem()
    while(this.list.select('li').length &gt; 0) {
      _this.removeItem(this.list.select('li')[0]);
    };
  },

  updateListTools : function () {
    if (this.clearTool) {
      if (this.list.select('li .accepted-suggestion').length &gt; 0) {
        this.clearTool.removeClassName('invisible');
      } else {
        this.clearTool.addClassName('invisible');
      }
    }
    if (this.options.enableSort &amp;&amp; this.list.select('li .accepted-suggestion').length &gt; 0 &amp;&amp; typeof(Sortable) != "undefined") {
      Sortable.create(this.list);
    }
    if (this.serializedDataInput) {
      var value = '';
      this.list.select('li .accepted-suggestion input[type=checkbox]').each(function (entry) {
        value += entry.value + '|';
      });
      this.serializedDataInput.value = value;
    }
  },

  getInputId : function(key, negative) {
    return (negative ? this.inputName.replace(/(_\d+)_/, "$1_negative_") : this.inputName) + "_" + key;
  },

  synchronizeSelection : function (input) {
    var element = (typeof (input.up) == 'function') &amp;&amp; input.up('li');
    if (element) {
      if (this.input.hasClassName('generateYesNo') &amp;&amp; !input.up('.yes-no-picker')) {
        Element.select(element, 'input[name="fieldName"][type="hidden"]').each(function(n) {
          var target = n.up('li').down('input[type="checkbox"]');
          var originalName = target.name;
          target.id = target.id.replace(target.name, n.value);
          target.name = n.value;
          target.up('label').addClassName(n.className);
          target.up('label').htmlFor = target.id;
          n.value = originalName;
          if (n.up('.term-category')) {
            n.up('.term-category').insert({before: n});
          }
        });
        var positiveName = this.input.name.replace(/__suggested$/, "");
        var negativeName = this.input.name.replace(/(_\d+)_/, "$1_negative_").replace(/__suggested$/, "");;
        var value = input.value;
        var text = element.down('.value').firstChild.nodeValue;
        var ynpickerElt = YesNoPicker.generatePickerElement([
              {type: 'na',                         selected: !isValueSelected(positiveName, value) &amp;&amp; !isValueSelected(negativeName, value)},
              {type: 'yes', name: positiveName, selected: isValueSelected(positiveName, value)},
              {type: 'no' , name: negativeName,    selected: isValueSelected(negativeName, value)}
        ], value, text, true, input.next());
        input.insert({before: ynpickerElt});
        input.hide();
        input.name = '';
        input.id = '';
        input.value = '';
        enableHighlightChecked(ynpickerElt.down('.yes input'));
        enableHighlightChecked(ynpickerElt.down('.no input'));
      }
    }
    if (element) {
      this.notifySelectionChange(element);
    }
  },

  notifySelectionChange : function(elt) {
    if (!elt.__categoryArray) {
      elt.__categoryArray = [];
      Element.select(elt, '.term-category input[type=hidden]').each(function(c) {
        elt.__categoryArray.push(c.value);
      });
    }
    Event.fire(this.input, 'xwiki:form:field-value-changed');
    Event.fire(document, "custom:selection:changed", {
       'categories' : elt.__categoryArray,
       'trigger'    : this.input,
       'fieldName'  : this.inputName,
       'customElement' : elt
    });
  }
});
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Multi-suggest</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>8671764c-5e4b-4641-a1ae-0a77d30d8009</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
// Start PhenoTips augmentation.
var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
widgets.ModalPopup = Class.create({
  /** Configuration. Empty values will fall back to the CSS. */
  options : {
    idPrefix : "modal-popup-",
    title : "",
    displayCloseButton : true,
    screenColor : "",
    borderColor : "",
    titleColor : "",
    backgroundColor : "",
    screenOpacity : "0.5",
    verticalPosition : "center",
    horizontalPosition : "center",
    resetPositionOnShow: true,
    removeOnClose : false,
    onClose : Prototype.emptyFunction
  },
  /** Constructor. Registers the key listener that pops up the dialog. */
  initialize : function(content, shortcuts, options) {
    /** Shortcut configuration. Action name -&amp;gt; {method: function(evt), keys: string[]}. */
    this.shortcuts = {
      "show" : { method : this.showDialog, keys : []},
      "close" : { method : this.closeDialog, keys : ['Esc']}
    },

    this.content = content || "Hello world!";
    // Add the new shortcuts
    this.shortcuts = Object.extend(Object.clone(this.shortcuts), shortcuts || { });
    // Add the custom options
    this.options = Object.extend(Object.clone(this.options), options || { });
    // Register a shortcut for showing the dialog.
    this.registerShortcuts("show");

    if (typeof (widgets.ModalPopup.instanceCounter) == 'undefined') {
      widgets.ModalPopup.instanceCounter = 0;
    }
    this.id = ++widgets.ModalPopup.instanceCounter;
  },

  getBoxId : function() {
    return this.options.idPrefix + this.id;
  },

  /** Create the dialog, if it is not already loaded. Otherwise, just make it visible again. */
  createDialog : function(event) {
    this.dialog = new Element('div', {'class': 'msdialog-modal-container'});
    if (this.options.extraDialogClassName) {
      this.dialog.addClassName(this.options.extraDialogClassName);
    }
    // A full-screen semi-transparent screen covering the main document
    this.screen = new Element('div', {'class': 'msdialog-screen'}).setStyle({
      opacity : this.options.screenOpacity,
      backgroundColor : this.options.screenColor
    });
    this.dialog.update(this.screen);
    // The dialog chrome
    this.dialogBox = new Element('div', {'class': 'msdialog-box', 'id' : this.getBoxId()});
    if (this.options.extraClassName) {
      this.dialogBox.addClassName(this.options.extraClassName);
    }
    // Insert the content
    this.dialogBox._x_contentPlug = new Element('div', {'class' : 'content'});
    this.dialogBox.update(this.dialogBox._x_contentPlug);
    this.dialogBox._x_contentPlug.update(this.content);
    // Add the dialog title
    if (this.options.title) {
      var title = new Element('div', {'class': 'msdialog-title'}).update(this.options.title);
      title.setStyle({"color" : this.options.titleColor, "backgroundColor" : this.options.borderColor});
      this.dialogBox.insertBefore(title, this.dialogBox.firstChild);
    }
    // Add the close button
    if (this.options.displayCloseButton) {
      var closeButton = new Element('div', {'class': 'msdialog-close', 'title': 'Close'}).update("&amp;#215;");
      closeButton.setStyle({"color": this.options.titleColor});
      closeButton.observe("click", this.closeDialog.bindAsEventListener(this));
      this.dialogBox.insertBefore(closeButton, this.dialogBox.firstChild);
    }
    this.dialog.appendChild(this.dialogBox);
    this.dialogBox.setStyle({
      "textAlign": "left",
      "borderColor": this.options.borderColor,
      "backgroundColor" : this.options.backgroundColor
    });
    this.positionDialog();
    // Append to the end of the document body.
    document.body.appendChild(this.dialog);
    if (typeof (Draggable) != 'undefined') {
      new Draggable(this.getBoxId(), {
        handle: $(this.getBoxId()).down('.msdialog-title'),
        scroll: window,
        change: this.updateScreenSize.bind(this)
      });
    }
    this.dialog.hide();
    var __enableUpdateScreenSize = function (event) {
      if (this.dialog.visible()) {
        this.updateScreenSize();
      }
    }.bindAsEventListener(this);
    ['resize', 'scroll'].each(function(eventName) {
       Event.observe(window, eventName, __enableUpdateScreenSize);
    }.bind(this));
    Event.observe(document, 'ms:popup:content-updated', __enableUpdateScreenSize);
  },
  positionDialog : function() {
    switch(this.options.verticalPosition) {
      case "top":
        this.dialogBox.setStyle({"top": (document.viewport.getScrollOffsets().top + 6) + "px"});
        break;
      case "bottom":
        this.dialogBox.setStyle({"bottom": ".5em"});
        break;
      default:
        var targetPercentage = 35;
        var targetPosition = targetPercentage + "%";
        try {
          // if parent element is longer than the screen (e.g. patient form) make sure dialog pops up within the
          // area currently visible by the user, which can be achieved by absolute positioning
          if (this.dialogBox.parentElement.clientHeight &gt; window.innerHeight) {
              targetPosition = Math.floor(window.pageYOffset + window.innerHeight * targetPercentage / 100) + "px";
          }
        } catch (err) {
          // something went wrong, maybe parent element is undefined
        }
        this.dialogBox.setStyle({"top": targetPosition});
        break;
    }
    this.dialogBox.setStyle({"left": "", "right" : ""});
    switch(this.options.horizontalPosition) {
      case "left":
        this.dialog.setStyle({"textAlign": "left"});
        break;
      case "right":
        this.dialog.setStyle({"textAlign": "right"});
        break;
      default:
        this.dialog.setStyle({"textAlign": "center"});
        this.dialogBox.setStyle({"margin": "auto"});
      break;
    }
  },
  positionDialogInViewport : function(left, top) {
    this.dialogBox.setStyle({
      "left": (document.viewport.getScrollOffsets().left + left) + "px",
      "top" : (document.viewport.getScrollOffsets().top  + top ) + "px",
      "margin" : "0"
    });
  },
  getPositionInViewport : function() {
    return this.dialogBox.viewportOffset();
  },

  updateScreenSize : function() {
    var __getNewDimension = function (eltToFit, dimensionAccessFunction, position) {
      var crtDimension = $(document.documentElement)[dimensionAccessFunction]();
      var viewportDimension = document.viewport.getScrollOffsets()[position] + document.viewport[dimensionAccessFunction]();
      if (eltToFit) {
        var limit = eltToFit.cumulativeOffset()[position] + eltToFit[dimensionAccessFunction]();
      }
      var result = '';
      if (crtDimension &lt; viewportDimension) {
        result = viewportDimension + 'px';
      }
      /*if (limit &amp;&amp; crtDimension &lt; limit) {
        result = limit + 'px';
      } else if (limit &amp;&amp; limit &lt; viewportDimension) {
        result = viewportDimension + 'px';
      }*/
      return result;
    };
    this.screen.style.width  = __getNewDimension(this.dialogBox, 'getWidth', 'left');
    this.screen.style.height = __getNewDimension(this.dialogBox, 'getHeight', 'top');
  },
  /** Set a class name to the dialog box */
  setClass : function(className) {
    this.dialogBox.addClassName('msdialog-box-' + className);
  },
  /** Remove a class name from the dialog box */
  removeClass : function(className) {
    this.dialogBox.removeClassName('msdialog-box-' + className);
  },
  /** Set the content of the dialog box */
  setContent : function(content) {
     this.content = content;
     this.dialogBox._x_contentPlug.update(this.content);
     this.updateScreenSize();
  },
  /** Called when the dialog is displayed. Enables the key listeners and gives focus to the (cleared) input. */
  showDialog : function(event) {
    if (event) {
      Event.stop(event);
    }
    // Only do this if the dialog is not already active.
    //if (!widgets.ModalPopup.active) {
    //  widgets.ModalPopup.active = true;
    if (!this.active) {
      this.active = true;
      if (!this.dialog) {
        // The dialog wasn't loaded, create it.
        this.createDialog();
      }
      // Start listening to keyboard events
      this.attachKeyListeners();
      // In IE, position: fixed does not work.
      /*if (Prototype.Browser.IE6x) {
        this.dialog.setStyle({top : document.viewport.getScrollOffsets().top + "px"});
        this.dialog._x_scrollListener = this.onScroll.bindAsEventListener(this);
        Event.observe(window, "scroll", this.dialog._x_scrollListener);
        $$("select").each(function(item) {
          item._x_initiallyVisible = item.style.visibility;
          item.style.visibility = 'hidden';
        });
      }*/
      // Display the dialog
      this.dialog.show();
      if (this.options.resetPositionOnShow) {
        this.positionDialog();
      }
      this.updateScreenSize();
    }
  },
  onScroll : function(event) {
    this.dialog.setStyle({top : document.viewport.getScrollOffsets().top + "px"});
  },
  /** Called when the dialog is closed. Disables the key listeners, hides the UI and re-enables the 'Show' behavior. */
  closeDialog : function(event) {
    if (event) {
      Event.stop(event);
    }
    /*if (window.browser.isIE6x) {
      Event.stopObserving(window, "scroll", this.dialog._x_scrollListener);
      $$("select").each(function(item) {
        item.style.visibility = item._x_initiallyVisible;
      });
    }*/
    // Call optional callback
    this.options.onClose.call(this);
    // Hide the dialog, without removing it from the DOM.
    this.dialog.hide();
    if (this.options.removeOnClose) {
      this.dialog.remove();
    }
    // Stop the UI shortcuts (except the initial Show Dialog one).
    this.detachKeyListeners();
    // Re-enable the 'show' behavior.
    // widgets.ModalPopup.active = false;
    this.active = false;
  },
  /** Enables all the keyboard shortcuts, except the one that opens the dialog, which is already enabled. */
  attachKeyListeners : function() {
    for (var action in this.shortcuts) {
      if (action != "show") {
        this.registerShortcuts(action);
      }
    }
  },
  /** Disables all the keyboard shortcuts, except the one that opens the dialog. */
  detachKeyListeners : function() {
    for (var action in this.shortcuts) {
      if (action != "show") {
        this.unregisterShortcuts(action);
      }
    }
  },
  /**
   * Enables the keyboard shortcuts for a specific action.
   *
   * @param {String} action The action to register
   * {@see #shortcuts}
   */
  registerShortcuts : function(action) {
    var shortcuts = this.shortcuts[action].keys;
    var method = this.shortcuts[action].method;
    for (var i = 0; i &lt; shortcuts.size(); ++i) {
      if (Prototype.Browser.IE || Prototype.Browser.WebKit) {
        shortcut.add(shortcuts[i], method.bindAsEventListener(this, action), {type: 'keyup'});
      } else {
        shortcut.add(shortcuts[i], method.bindAsEventListener(this, action), {type: 'keypress'});
      }
    }
  },
  /**
   * Disables the keyboard shortcuts for a specific action.
   *
   * @param {String} action The action to unregister {@see #shortcuts}
   */
  unregisterShortcuts : function(action) {
    for (var i = 0; i &lt; this.shortcuts[action].keys.size(); ++i) {
      shortcut.remove(this.shortcuts[action].keys[i]);
    }
  },
  createButton : function(type, text, title, id) {
    var wrapper = new Element("span", {"class" : "buttonwrapper"});
    var button = new Element("input", {
      "type" : type,
      "class" : "button",
      "value" : text,
      "title" : title,
      "id" : id
    });
    wrapper.update(button);
    return wrapper;
  },
  show : function(event) {
    this.showDialog(event);
  },
  close : function(event) {
    this.closeDialog(event);
  }
});
/** Whether or not the dialog is already active (or activating). */
widgets.ModalPopup.active = false;
// End PhenoTips augmentation.
return PhenoTips;
}(PhenoTips || {}));
</code>
    </property>
    <property>
      <name>Modified modal popup</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d536b27d-9de4-4d3d-9bc8-e458d3274c16</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.SolrQueryProcessor = Class.create({
  initialize: function(queryFields, restriction) {
    this.queryFields = queryFields;
    this.restriction = restriction;
  },

  processQuery: function(query)
  {
    return this.inflateQuery(query);
  },

  generateParameters: function(query)
  {
    var parameters = {'defType': 'edismax', 'spellcheck.collate': true, 'spellcheck': true, 'lowercaseOperators': false};
    if (this.setupMandatoryQuery(query, parameters)) {
      return parameters;
    }
    this.restrictQuery(query, parameters);
    this.setupQueryFields(query, parameters);
    return parameters;
  },

  setupMandatoryQuery : function(query, parameters)
  {
    var txt = query.strip();
    var mandatoryQuery = "";
    var hasMandatoryFields = false;
    for (var field in this.queryFields) {
      var fieldOptions = this.queryFields[field];
      var activationRegex = fieldOptions['activationRegex'];
      if (!fieldOptions['mandatory'] || !activationRegex || !txt.match(activationRegex)) {
        continue;
      }
      mandatoryQuery += field + ":" + (fieldOptions['transform'] ? fieldOptions['transform'](query) : query) + " ";
      hasMandatoryFields = true;
    }
    if (mandatoryQuery) {
      parameters.fq = mandatoryQuery.strip();
    }
    return hasMandatoryFields;
  },

  restrictQuery : function(query, parameters)
  {
    if (!this.restriction) {
      return;
    }
    var result = "";
    for (var rField in this.restriction) {
      var restrictionString = (rField.substring(0, 1) == '-' ? '-' : '+') + "(";
      for (var i = 0; i &lt; this.restriction[rField].length; ++i) {
        restrictionString += rField.replace(/^-/, '') + ":" + this.restriction[rField][i].replace(/:/g, "\\:") + " ";
      }
      restrictionString = restrictionString.strip() + ") ";
      result += restrictionString;
    }
    if (result) {
      parameters.fq = result.strip();
    }
  },

  setupQueryFields : function(query, parameters)
  {
    var txt = query.strip();
    var wordFields = "";
    var phraseFields = "";
    var boostQuery = "";
    var lastWord = query.replace(/.*\W/g, '');
    for (var field in this.queryFields) {
      var fieldOptions = this.queryFields[field];
      var activationRegex = fieldOptions['activationRegex'];
      if (activationRegex &amp;&amp; !txt.match(activationRegex)) {
        continue;
      }
      if (fieldOptions['wordBoost']) {
        wordFields += field + "^" + fieldOptions['wordBoost'] + " ";
      }
      if (fieldOptions['phraseBoost']) {
        phraseFields += field + "^" + fieldOptions['phraseBoost'] + (fieldOptions['phraseSlop'] ? "~" + fieldOptions['phraseSlop'] : "") + " ";
      }
      if (lastWord &amp;&amp; fieldOptions['stubBoost']) {
        boostQuery += field + ":" + lastWord.replace(/:/g, "\\:")+ "*^" + fieldOptions['stubBoost'] + " ";
      }
    }
    if (wordFields) {
      parameters.qf = wordFields.strip();
    }
    if (phraseFields) {
      parameters.pf = phraseFields.strip();
    }
    if (boostQuery) {
      parameters.bq = boostQuery.strip();
    }
  },

  inflateQuery : function(query)
  {
    var lastWord = query.replace(/.*\W/g, '');
    if (!lastWord) {
      return query;
    }
    var result = query;

    for (var field in this.queryFields) {
      if (this.queryFields[field].stubTrigger) {
        result += " " + field + ":" + lastWord.replace(/:/g, "\\:") + "*";
      }
    }
    return result.strip();
  }
});
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Solr Query Processor</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>4</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>984c7b53-5644-489c-8ddc-ef51a196254a</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.OntologyBrowser = Class.create({
  options : {
    script : XWiki.contextPath + "/rest/vocabularies/hpo/suggest?sort=nameSort asc&amp;maxResults=10000&amp;",
    json : true,
    varname: "input",
    method : "get",
    responseFormat : "application/json",
    resultsParameter : "rows",
    resultId : "id",
    resultValue : "name",
    resultCategory : "term_category",
    resultParent : {
      selector : 'parents',
      processingFunction : function (parent) {
        return {'id': parent.id, 'value': parent.name_translated || parent.name};
      }
    },
    noresults: "No sub-terms",
    showParents : true,
    showRoot : true,
    enableSelection : true,
    enableBrowse : true,
    isTermSelected : function (id) {return false;},
    unselectTerm : function(id) {},

    defaultEntryAction: 'browse' /* {browse, select} */
  },

  initialize: function(suggest, container, options) {
    this.options = Object.extend(Object.clone(this.options), options || { });
    this.suggest = suggest;
    this.loadingMessage = new Element('div', {'class' : 'plainmessage loading'}).update("$escapetool.javascript($services.localization.render('phenotips.widgets.vocabularyBrowser.loading'))");
    if (container) {
      this.container = container;
    } else {
      this.container = new PhenoTips.widgets.ModalPopup(this.loadingMessage, {}, {
        idPrefix : 'ontology-browser-window-',
        title : "$escapetool.javascript($services.localization.render('phenotips.widgets.vocabularyBrowser.title'))",
        backgroundColor : "#ffffff",
        verticalPosition : "top",
        extraDialogClassName : "dialog-ontology-browser",
        removeOnClose: true
      });
      this.options.modal = true;
    }
    this._obrowserExpandEventHandler = this._obrowserExpandEventHandler.bindAsEventListener(this);
  },

  load : function(id) {
      this.setContent(this.loadingMessage);
      var url = this.options.script + this.options.varname + "=" + encodeURIComponent(id);
      var headers = {};
      headers.Accept = this.options.responseFormat;

      var ajx = new Ajax.Request(url, {
        method: this.options.method,
        requestHeaders: headers,
        onSuccess: function (response) {
          this.setContent(this.buildTree(this._getDataFromResponse(response)));
          this.__crtRoot = id;
          if (this.container.content) {
            Event.fire(document, 'xwiki:dom:updated', {'elements' : [this.container.contentContainer || this.container.content]});
          }
        }.bind(this),
        onFailure: function (response) {
          this.setContent("$escapetool.javascript($services.localization.render('phenotips.widgets.vocabularyBrowser.loading.error'))" + response.statusText);
          this.__crtRoot = '';
        }.bind(this)
      });
  },

  expandTo : function (termId, categories) {
    if (categories.indexOf(this.__crtRoot) == -1) {
      // not in the right tree, nothing to do
      return;
    }
    this._expandToStep(termId, categories.without(this.__crtRoot, termId));
  },

  _expandToStep : function (termId, categories) {
    var _this = this;
    //alert ("expanding " + termId + " " + categories);
    var target = this.container.contentContainer.down('li.entry input.select-tool[value="' + termId.replace(/"/g, '\\"') + '"]');
    if (target) {
       return;
    }
    var finishedStep = false;
    categories.each(function(category) {
      if (finishedStep) {return}
      var categoryInput = _this.container.contentContainer.down('li.entry input.select-tool[value="' + category.replace(/"/g, '\\"') + '"]');
      if (categoryInput) {
        //alert ("start expanding " + category + " " + categories);
        var categoryEntry = categoryInput.up('li');
        if (categoryEntry.hasClassName('collapsed') || !categoryEntry.down('.descendents')) {
          Event.observe(categoryEntry, "obrowser:expand:finished", function(event) {
            Event.stopObserving(categoryEntry, "obrowser:expand:finished");
            _this._expandToStep(termId, categories.without(category));
          });
          _this._toggleExpandState(categoryEntry);
          finishedStep = true;
        }
      }
    });
  },

  expand : function (element, doPopulate) {
      var query = element.__termId;
      var parameters = {};
      if (query.match(/^HP:[0-9]+$/i)) {
        parameters.customFilter ="is_a:" + query.toUpperCase().replace(/:/g, "\\:");
      }
      var url = this.options.script + this.options.varname + "=" + encodeURIComponent(query);
      var headers = {};
      headers.Accept = this.options.responseFormat;

      var ajx = new Ajax.Request(url, {
        method: this.options.method,
        requestHeaders: headers,
        parameters: parameters,
        onCreate: function() {this._lockExpandTool(element)}.bind(this),
        onSuccess: function (response) {
          var memo = {};
          if (doPopulate) {
            var newAdditions = this.buildDescendentsList(this._getDataFromResponse(response));
            element.insert({'bottom': newAdditions});
            Event.fire(document, "obrowser:content:added", {added: newAdditions, obrowser: this});
            Event.fire(element, "obrowser:expand:finished");
            Event.fire(this.container.contentContainer || document, "obrowser:expand:finished");
            Event.fire(document, 'xwiki:dom:updated', {'elements' : [newAdditions]});
            //memo.data = this.buildDescendentsList(this._getDataFromResponse(response));
            //Event.fire(element, 'obrowser:expand:done', memo);
          } else {
            memo.count = this.countDescendents(this._getDataFromResponse(response));
            //Event.fire(element, 'obrowser:count:done', memo);
          }
          if ((memo.count === 0) || (doPopulate &amp;&amp; !element.down('.descendents .entry, .error'))) {
            element.addClassName('collapsed');
            var expandTool = element.down('.expand-tool');
            if (expandTool) {
              expandTool.update(this._getExpandCollapseSymbol(true)).addClassName('disabled');
              expandTool.stopObserving('click');
            }
          }
          Event.fire(document, "ms:popup:content-updated", {popup: this.container});
        }.bind(this),
        onFailure: function (response) {
          Event.fire(element, 'obrowser:expand:failed', {data: new Element('div', {'class' : 'error'}).update("$escapetool.javascript($services.localization.render('phenotips.widgets.vocabularyBrowser.expand.error'))" + response.statusText), count: -1});
        },
        onComplete: function() {this._unlockExpandTool(element)}.bind(this)
      });
  },

  _getDataFromResponse : function(response) {
    if (this.options.json) {
      return response.responseJSON;
    }
    return response.responseXML;
  },
  _getResultset_json : function(data, fieldName) {
    return data &amp;&amp; data[fieldName] || [];
  },
  _getResultFieldValue_json : function(data, fieldName) {
    return data &amp;&amp; (data[fieldName + "_translated"] || data[fieldName]) || '';
  },
  _getResultFieldValueAsArray_json : function(data, fieldName) {
    return new Array(data &amp;&amp; (data[fieldName + "_translated"] || data[fieldName]) || '').flatten();
  },
  _getResultset_xml : function(data, selector) {
    var elements = data &amp;&amp; data.getElementsByTagName(selector);
    return elements;
  },
  _getResultFieldValue_xml : function(data, selector) {
    var element = data &amp;&amp; Element.down(data, selector);
    return element &amp;&amp; element.firstChild &amp;&amp; element.firstChild.nodeValue || '';
  },
  _getResultFieldValueAsArray_xml : function(data, selector) {
    var result = new Array();
    if (data) {
      Element.select(data, selector).each(function(item) {
        var value = item.firstChild &amp;&amp; item.firstChild.nodeValue;
        if (value) {
          result.push(value);
        }
      });
    }
    return result;
  },
  _getResultset : function(data, fieldName) {
    if (this.options.json) {
      return this._getResultset_json(data, fieldName);
    }
    return this._getResultset_xml(data, fieldName);
  },
  _getResultFieldValue : function(data, fieldName) {
    if (this.options.json) {
      return this._getResultFieldValue_json(data, fieldName);
    }
    return this._getResultFieldValue_xml(data, fieldName);
  },
  _getResultFieldValueAsArray : function(data, fieldName) {
    if (this.options.json) {
      return this._getResultFieldValueAsArray_json(data, fieldName);
    }
    return this._getResultFieldValueAsArray_xml(data, fieldName);
  },

  buildTree : function (data) {
    var results = this._getResultset(data, this.options.resultsParameter);
    if (results.length == 0) {
      return new Element('div', {'class' : 'error'}).update(this.options.noresults);
    }
    var targetResult = results[0];
    var newContent = new Element('div');
    if (this.options.showParents) {
      var parents = new Element('ul', {'class': 'parents'});
      this._getResultFieldValueAsArray(targetResult, this.options.resultParent.selector).each(function(item) {
        var text = item;
        var data = {};
        if (typeof (this.options.resultParent.processingFunction) == "function") {
          data = this.options.resultParent.processingFunction(text);
        }
        parents.insert({'bottom' : this._createParentBranch(data)});
      }.bind(this));
      if (parents.hasChildNodes()) {
        newContent.insert({'top' : parents});
      }
      Event.fire(document, "obrowser:content:added", {added: parents, obrowser: this});
    }
    var data = {
      id : this._getResultFieldValue(targetResult, this.options.resultId),
      value : this._getResultFieldValue(targetResult, this.options.resultValue),
      category: this._generateEntryCategory(targetResult)
    }
    var root = this._createRoot(data);
    newContent.insert({'bottom' : root});
    Event.fire(document, "obrowser:content:added", {added: root, obrowser: this});
    //this._toggleExpandState(root);
    return newContent;
  },

  countDescendents : function(xml) {
    return this._getResultset(xml, this.options.resultsParameter).length;
  },

  buildDescendentsList : function(xml) {
    var results = this._getResultset(xml, this.options.resultsParameter);
    var list = new Element('ul', {'class' : 'descendents'});
    for (var i = 0; i &lt; results.length; i++) {
        var data = {
          id : this._getResultFieldValue(results[i], this.options.resultId),
          value : this._getResultFieldValue(results[i], this.options.resultValue),
          category: this._generateEntryCategory(results[i])
        };
        list.insert({'bottom': this._createDescendentBranch(data)});
    }
    if (list.hasChildNodes()) {
      return list;
    }
    return new Element('div', {'class' : 'descendents hint empty'}).update(this.options.noresults);
  },

  _createBranch: function (eltName, className, data, expandable) {
    var element =  new Element(eltName, {'class' : 'entry ' + className});
    element.__termId = data.id;
    element.__termCategory = data.category;
    var wrapper = new Element('div', {'class' : 'entry-data'});
    wrapper.insert({'bottom': this._generateEntryTitle(data.id, data.value)});
    var entryTools = new Element('span', {'class' : 'entry-tools'});
    entryTools.observe('click', function(event) {event.stop()}); // don't forward click events
    wrapper.insert({'bottom': entryTools});
    element.update(wrapper);

    if (!this._isRootEntry(element)) {
      if (this.options.defaultEntryAction == 'browse') {
        wrapper.down('.info').observe('click', this._browseEntry.bindAsEventListener(this));
      }
    }
    entryTools.insert(new Element('span', {'class' : 'fa fa-info-circle phenotype-info xHelpButton', title : data.id, 'data-source' :  this.suggest &amp;&amp; this.suggest.fld &amp;&amp; this.suggest.fld.id}));

    if (this.options.enableSelection) {
      element.__selectTool = new Element('input', {'type' : 'checkbox', name: 'term_selector', value: data.id, 'class' : 'select-tool'});
      wrapper.insert({'top': element.__selectTool});
      if (this.options.isTermSelected(element.__termId)) {
        element.addClassName('accepted');
        element.__selectTool.checked = 'checked';
      }
      element.__selectTool.observe('click', this._toggleEntrySelection.bindAsEventListener(this));
      if (this.options.defaultEntryAction == 'select') {
         wrapper.down('.info').observe('click', this._toggleEntrySelection.bindAsEventListener(this));
      }
    }

    if (expandable) {
      var expandTool = new Element('span', {'class' : 'expand-tool'}).update(this._getExpandCollapseSymbol(!element.hasClassName('root')));
      expandTool.observe('click', function(event) {
        var entry = event.element().up('.entry');
        if (!this._isExpandToolLocked(entry)){
          this._toggleExpandState(entry);
        }
      }.bindAsEventListener(this));
      var expandOnSelect = function (e) {
        if(!this._isExpandToolLocked(element) &amp;&amp; e.memo.selected == "yes") {
          this._expandEntry(element);
        }
      }
      element.observe('obrowser:entry:selected', expandOnSelect.bindAsEventListener(this));
      element.observe('ynpicker:selectionChanged', expandOnSelect.bindAsEventListener(this));
      wrapper.insert({'top': expandTool});
      this.expand(element, element.hasClassName('root'));
      //element.observe('obrowser:expand:done', this._obrowserExpandEventHandler);
      //element.observe('obrowser:count:done', this._obrowserExpandEventHandler);
      //element.observe('obrowser:expand:failed', this._obrowserExpandEventHandler);
    }
    return element;
  },

  _generateEntryTitle : function(id, value) {
    return  new Element('span', {'class' : 'info'}).insert(
                     {'bottom' : new Element('span', {'class' : 'key'}).update('[' + id + ']')}).insert(
                     {'bottom' : ' '}).insert(
                     {'bottom' : new Element('span', {'class' : 'value'}).update(value)});
  },

  _generateEntryCategory : function (xmlFragment) {
    var category = new Element("span", {'class' : 'hidden term-category'});
    if (this.options.resultCategory) {
      this._getResultFieldValueAsArray(xmlFragment, this.options.resultCategory).each(function(c) {
        category.insert(new Element('input', {'type' : 'hidden', 'value' : c}));
      });
    }
    if (category.hasChildNodes()) {
      return category;
    } else {
      return null;
    }
  },

  _expandEntry : function(target) {
    if(!target) return;
    if (!target.down('.descendents')){
      //This is the first expansion, fetch subterms
      target.down(".error") &amp;&amp; target.down(".error").remove();
      this.expand(target, true);
    } else {
      Event.fire(target, "obrowser:expand:finished");
    }
    target.removeClassName('collapsed');
    target.down('.expand-tool') &amp;&amp; target.down('.expand-tool').update(this._getExpandCollapseSymbol(false));
  },
  _collapseEntry : function(target) {
    if(!target) return;
    target.addClassName('collapsed');
    Event.fire(target, "obrowser:expand:finished");
    target.down('.expand-tool') &amp;&amp; target.down('.expand-tool').update(this._getExpandCollapseSymbol(true));
  },
  _toggleExpandState : function(target) {
    if (target) {
      if (!target.down('.descendents') || target.hasClassName('collapsed')){
        this._expandEntry(target);
      } else {
        this._collapseEntry(target);
      }
    }
  },

  _obrowserExpandEventHandler : function(event) {
     var element = event.element();
     if (!event.memo) {
       return;
    }
    if (event.memo.data) {
       element.insert({'bottom': event.memo.data});
       element.stopObserving('obrowser:expand:done', this._obrowserExpandEventHandler);
    } else if (typeof (event.memo.count) != "undefined") {
       element.stopObserving('obrowser:count:done', this._obrowserExpandEventHandler);
    }
    element.stopObserving('obrowser:expand:failed', this._obrowserExpandEventHandler);
    if ((event.memo.count == "0") || (!element.hasClassName('root') &amp;&amp; event.memo.data &amp;&amp; !element.down('.descendents .entry, .error'))) {
      element.addClassName('collapsed');
      var expandTool = element.down('.expand-tool');
      if (expandTool) {
        expandTool.update(this._getExpandCollapseSymbol(true)).addClassName('disabled');
        expandTool.stopObserving('click');
      }
    }
    this._unlockExpandTool(element);
    Event.fire(document, "ms:popup:content-updated", {popup: this.container});
    if (event.memo.data) {
      Event.fire(element, "obrowser:expand:finished");
    }
  },

  _lockExpandTool : function(element) {
    var expandTool = element.down('.expand-tool');
    if (expandTool) {
      expandTool.addClassName('locked');
    }
  },

  _unlockExpandTool : function(element) {
    var expandTool = element.down('.expand-tool');
    if (expandTool) {
      expandTool.removeClassName('locked');
    }
  },

  _isExpandToolLocked : function(element) {
    if (element.down('.expand-tool.locked')) {
      return true;
    }
    return false;
  },

  _getExpandCollapseSymbol : function (isCollapsed) {
    if (isCollapsed) {
      return "&amp;#x25ba;";
    }
    return "&amp;#x25bc;";
  },
  _toggleEntrySelection : function(event) {
    var trigger = event.element();
    if (!trigger.hasClassName('select-tool')) {
      trigger.up('.entry').down('input').click();
      return;
    }
    var elt = trigger.up('.entry');
    if (trigger.checked) {
      this._selectEntry(elt);
    } else {
      this._unselectEntry(elt);
    }
  },
  _selectEntry: function (entry) {
    if (this.suggest) {
      if (this.options.modal &amp;&amp; typeof (this.container.getPositionInViewport) == 'function') {
        var prevPosition = this.container.getPositionInViewport();
      }
      var value = entry.down('.value').firstChild.nodeValue;
      this.suggest.acceptEntry({'id':entry.__termId, 'value':value, 'category' : entry.__termCategory, 'negative' : entry.down('.selected.no')}, value, '', true);
      entry.addClassName('accepted');
      if (prevPosition &amp;&amp; (typeof (this.container.positionDialogInViewport) == 'function')) {
        this.container.positionDialogInViewport(prevPosition.left, prevPosition.top);
      }
      entry.fire('obrowser:entry:selected', {selected: (entry.down('.selected.no')) ? "no" : "yes"});
    }
  },
  _unselectEntry: function (entry) {
     this.options.unselectTerm(entry.__termId);
     this.options.unselectTerm(entry.__termId, true);
     entry.removeClassName('accepted');
  },

  _browseEntry : function(event) {
    event.stop();
    var elt = event.element().up('.entry');
    this.load(elt.__termId);
  },

  _createParentBranch: function (parent) {
    var parent = this._createBranch('li', 'parent', parent, false);
    return parent;
  },

  _createRoot : function (data) {
    var root = this._createBranch('div', 'root', data, true);
    if (!this.options.showRoot) {
      root.addClassName('no-root');
      root.down('.entry-data').addClassName('invisible');
    }
    return root;
  },

  _createDescendentBranch : function(data) {
    return this._createBranch('li', 'descendent', data, true);
  },

  _isRootEntry : function(element) {
    return element.hasClassName('entry') &amp;&amp; element.hasClassName('root');
  },

  setContent : function(content) {
    this.container.setContent(new Element('div', {'class' : 'ontology-tree'}).update(content));
  },

  show : function(id) {
    if (id) {
      this.container.show();
      if (this.__crtRoot != id) {
        this.load(id);
      } else {
        Event.fire(this.container.contentContainer || document, 'obrowser:expand:finished');
      }
    }
  },

  hide : function() {
    this.container.close();
  }
  });

  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Ontology browser</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>5</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>62a03919-3321-48ca-ae5a-b748ca291f63</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.DropDown = Class.create({
  options : {},
  initialize : function (element) {
    this.element = element;
    this.hasForceOpen = false;
    var existingDropdown = element.next(".dropdown")
    if (existingDropdown) {
      this.contentContainer = null;
      this.dropdown = existingDropdown;
      this.hasForceOpen = true;
    } else {
      this.dropdown = new Element('div', {'class' : 'dropdown'});

      this.contentContainer = new Element('div');
      this.dropdown.update(this.contentContainer);
    }
    //var closeButton = new Element('div', {'class': 'close', 'title': 'Close'}).update("&amp;#215;");
    //closeButton.observe("click", this.close.bindAsEventListener(this));
    //this.dropdown.insert({top: closeButton});
  },
  setContent : function(content) {
    this.contentContainer != null ? this.contentContainer.update(content) : null;
  },
  show : function (force) {
    if (force &amp;&amp; !this.hasForceOpen) {
      return false;
    }
    if (this.dropdown.hasClassName('invisible')) {
      this.dropdown.removeClassName('invisible');
    } else  {
      this.element.insert({after : this.dropdown});
    }
    return true;
  },
  close : function (force) {
    if (force &amp;&amp; !this.hasForceOpen) {
      return false;
    }
    this.dropdown.addClassName('invisible');
    return true;
    //this.dropdown.remove();
  }
  });
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Dropdown ontology browser</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>6</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>1cc2a76f-aca1-4bfa-a468-3a599799c13c</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>StickyBox = Class.create({
    options : {
      offsetTop : 6,
      offsetBottom: 0,
      resize : false,
      isSticky : function(element) {return true}
    },
    initialize : function(stickyElement, stickyAreaElement, options) {
      this.stickyElement = stickyElement;
      this.stickyAreaElement = stickyAreaElement;
      if (this.stickyElement &amp;&amp; this.stickyAreaElement) {
        this.options = Object.extend(Object.clone(this.options), options || { });
        // Temporary, for backwards compatibility with deprecated parameter 'shadowSize'
        if (this.options.shadowSize &amp;&amp; options.offsetTop === undefined) {
          this.options.offsetTop = this.options.shadowSize;
        }
        this.resetPosition = this.resetPosition.bindAsEventListener(this);
        Event.observe(window, 'scroll', this.resetPosition);
        Event.observe(window, 'resize', this.resetPosition);
        if (typeof(this.options.makeDefault) == 'function') {
          this.makeDefault = this.options.makeDefault.bind(this);
        }
        this.resetPosition();
      }
    },

    resetPosition : function() {
      if (!this.options.isSticky(this.stickyElement) || this.stickyElement.getHeight() &gt;= this.stickyAreaElement.getHeight()) {
        return;
      }
      this.stickyElement.style.height = '';
      this.stickyElement.style.overflow = '';
      this.stickyElement.fire('size:changed');
      this.boxHeight = this.stickyElement.getHeight();
      var maxBoxHeight = document.viewport.getHeight() - this.options.offsetTop - this.options.offsetBottom;
      if (this.options.resize) {
         var memo =  {'diff' : (maxBoxHeight - this.boxHeight), 'original': this.boxHeight};
         this.boxHeight = maxBoxHeight;
         this.stickyElement.style.height = this.boxHeight + "px";
         this.stickyElement.style.overflow = 'auto';
         this.stickyElement.fire('size:changed', memo);
      }
      this.boxWidth = this.stickyElement.getWidth();
      this.boxMinTop = this.stickyAreaElement.cumulativeOffset().top + this.options.offsetTop;
      this.boxMaxTop = this.stickyAreaElement.cumulativeOffset().top + this.stickyAreaElement.getHeight() - this.boxHeight;
      this.boxLeft = this.stickyElement.cumulativeOffset().left;
      this.boxRelativeLeft = this.boxLeft - this.stickyElement.getOffsetParent().viewportOffset().left;
      var relativeContentPosition = this.stickyAreaElement.viewportOffset().top;
      this.direction = 0;
      if (this.stickyAreaElement._prevPosition) {
        if (this.stickyAreaElement._prevPosition &gt; relativeContentPosition) {
          this.direction = 1;
        } else if (this.stickyAreaElement._prevPosition &lt; relativeContentPosition) {
          this.direction = -1;
        }
      }
      if ((this.options.isSticky(this.stickyElement) || this.direction == 1) &amp;&amp;
        document.viewport.getScrollOffsets().top &gt;= this.boxMinTop &amp;&amp;
        document.viewport.getScrollOffsets().top &lt; this.boxMaxTop) {
        this.makeFixed();
      } else if ((this.options.isSticky(this.stickyElement) || this.direction == -1) &amp;&amp;
        document.viewport.getScrollOffsets().top &gt;= this.boxMaxTop) {
        this.makeAbsolute();
      } else {
        this.makeDefault();
      }
      this.stickyAreaElement._prevPosition = relativeContentPosition;
    },

    makeFixed : function() {
      if (this.stickyElement.style.position != 'fixed') {
        this.stickyElement.addClassName('sticky');
        this.stickyElement.style.left = this.boxLeft + 'px';
        this.stickyElement.style.width = (this.boxWidth) + 'px';
        this.stickyElement.style.top = this.options.offsetTop + 'px';
        this.stickyElement.style.right = '';
        this.stickyElement.style.position = 'fixed';
      }
    },
    makeAbsolute : function(top) {
      if (this.stickyElement.style.position != 'absolute') { // || top &amp;&amp; this.stickyElement.style.top != top + 'px'){
        this.stickyElement.addClassName('sticky');
        top = top || (this.stickyAreaElement.getHeight() - this.stickyElement.getHeight());
        this.stickyElement.style.top = top + 'px';
        this.stickyElement.style.right = '';
        var originalPosition = this.stickyElement.getStyle('position');
        this.stickyElement.style.position = 'absolute';
        if (originalPosition == 'fixed' &amp;&amp; !Prototype.Browser.WebKit) {
          this.stickyElement.style.left = (this.boxRelativeLeft - this.stickyElement.getOffsetParent().viewportOffset().left + 2) + 'px';
        } else {
          this.stickyElement.style.left = this.boxRelativeLeft + 'px';
        }
      }
    },
    makeDefault : function() {
      if (this.stickyElement.style.position != ''){
        this.stickyElement.removeClassName('sticky');
        this.stickyElement.style.position = '';
        this.stickyElement.style.top = '';
        this.stickyElement.style.left = '';
        this.stickyElement.style.right = '';
        this.stickyElement.style.width = '';
      }
    },
    isFixed: function() {
      return (this.stickyElement.style.position == 'fixed');
    },
    isAbsolute: function() {
      return (this.stickyElement.style.position == 'absolute');
    },
    isDefault: function() {
      return (this.stickyElement.style.position == '');
    }
});</code>
    </property>
    <property>
      <name>Sticky Box</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>7</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>576a48e8-6707-4310-941b-0abb9e532d23</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.FreeMultiselect = Class.create({
    counter : 1,
    options : {
      returnKeyNavigation : false,
      extraClasses : ""
    },
    initialize: function(element, options) {
      this.options = Object.extend(Object.clone(this.options), options || { });
      var _this = this;

      var extraClassesSource = element.previous('input[name="xwiki-free-multiselect-suggest-extraclasses"][type="hidden"]');
      if (extraClassesSource) {
        this.options.extraClasses = extraClassesSource.value;
      }
      // Suggest?
      var suggestInfoSource = element.previous('input[name="xwiki-free-multiselect-suggest-script"][type="hidden"]');
      if (suggestInfoSource &amp;&amp; suggestInfoSource.value &amp;&amp; typeof(PhenoTips.widgets.Suggest) != "undefined") {
        this.suggestOptions = {
          script : suggestInfoSource.value,
          shownoresults : false,
          varname: "input",
          timeout : 0,
          resultsParameter : "rows",
          resultValue : "name",
          resultInfo : {}
        }
      }

      // Add a delete button and a "KEY_RETURN" keypress event listener for each line
      this.enhanceLine = this.enhanceLine.bind(this);
      var values = element.select('li input.xwiki-free-multiselect-value');
      values.each(this.enhanceLine);

      // Generate and insert the "add" button, edit mode only
      if (element.down('input.xwiki-free-multiselect-value')) {
        var addTool = new Element('a', {'title' : 'add', 'href' : '#' + element.id}).update('+…');
        element.insert(addTool.wrap('li'));
        addTool.observe('click', function(event) {
          event.stop();
          var prevLine = addTool.up('li').previous();
          var template = prevLine &amp;&amp; prevLine.down('input.xwiki-free-multiselect-value');
          if (template) {
            _this.generateInput(template);
          }
        }.bindAsEventListener(this));
      }
    },

    enhanceLine : function(element) {
      element.id = this.generateId(element);
      element.up('li').addClassName('xwiki-free-multiselect-line');
      this.attachDeleteTool(element);
      if (this.suggestOptions) {
        new PhenoTips.widgets.Suggest(element, this.suggestOptions);
      }
      this.enableAddInput(element);
    },

    attachDeleteTool : function(element) {
      var wrapper = element.up('.xwiki-free-multiselect-line');
      var deleteTool = new Element('a', {'title' : 'delete', 'href' : '#' + element.id}).update('✖');
      wrapper.insert(' ').insert(deleteTool);
      deleteTool.observe('click', function(event) {
        event.stop();
        var wrapper = event.findElement('.xwiki-free-multiselect-line');
        if (wrapper.previous('.xwiki-free-multiselect-line') || wrapper.next('.xwiki-free-multiselect-line')) {
          wrapper.remove();
        } else {
          var target = wrapper.down('input');
          target.value = '';
          target.focus();
        }
      });
    },

    enableAddInput : function(element) {
      var wrapper = element.up('.xwiki-free-multiselect-line');
      var _this = this;
      if (!wrapper) {return;}
      element.observe('keypress', function(event) {
        if (event.keyCode == Event.KEY_RETURN) {
          event.stop();
          var next = wrapper.next('.xwiki-free-multiselect-line');
          if (_this.options.returnKeyNavigation &amp;&amp; next &amp;&amp; next.down('input')) {
            next.down('input').focus();
          } else {
            element.next().removeClassName('inactive');
            _this.generateInput(element);
          }
        } else if (event.keyCode == Event.KEY_BACKSPACE &amp;&amp; element.value == '') {
          event.stop();
          var previous = wrapper.previous('.xwiki-free-multiselect-line');
          if (previous &amp;&amp; previous.down('input')) {
            previous.down('input').focus();
            element.up('.xwiki-free-multiselect-line').remove();
          }
        }
      });
    },

    generateInput : function(template) {
      var newInput = new Element('input', {'name' : template.name, id : this.generateId(template), type: template.type, size: template.size, 'class' : 'xwiki-free-multiselect-value ' + this.options.extraClasses});
      var newWrapper = new Element('li');
      newWrapper.insert(newInput);
      template.up('.xwiki-free-multiselect-line').insert({after: newWrapper});
      this.enhanceLine(newInput);
      newInput.focus();
      Event.fire(document, 'new:xwiki-free-multiselect-input', {'newInput': newInput});
    },

    generateId : function(element) {
      return element.name + '_' + this.nextIndex();
    },

    nextIndex : function() {
      return ++this.counter;
    },

    lastIndex : function() {
      return this.counter;
    }

  });
  return PhenoTips;
}(PhenoTips || {}));

var init = function(event) {
  ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(element) {
    element.select('.xwiki-free-multiselect').each(function(element) {
      new PhenoTips.widgets.FreeMultiselect(element);
    });
  });
};
(XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
document.observe("xwiki:dom:updated", init);
</code>
    </property>
    <property>
      <name>Free Multiselect</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>8</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>a81251a5-7e93-4dda-b851-c37f4841d346</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function(XWiki) {
  // Start XWiki augmentation
  var widgets = XWiki.widgets = XWiki.widgets || {};

  widgets.VisibilityController =  Class.create({
    initialize : function(element) {
      this.element = element;
      this.reverse = this.element.hasClassName("exclude");
      this.controller = this.element.select(".controller input[type=checkbox]");
      var eventName = "change";
      if (this.controller.length == 0) {
        return;
      } else if (this.controller.length == 1) {
        this.controller = this.controller[0];
      } else {
        this.controller = this.element.down(".controller .yes input[type=checkbox]");
        eventName = "picker:change";
      }
      if (!this.controller) {
        // No controller, nothing else to do...
        return;
      }
      this.controlled = this.element.select(".controlled");
      if (this.element.hasClassName("complete-hide")) {
        this.hiddenStyle = {"display" : "none"};
        this.visibleStyle = {"display" : ""};
      } else {
        this.hiddenStyle = {"visibility" : "hidden"};
        this.visibleStyle = {"visibility" : "visible"};
      }
      this.controlVisibility();
      if (this.element.hasClassName("confirm")) {
        this.controller.observe(eventName, this.confirm.bindAsEventListener(this));
      } else {
        this.controller.observe(eventName, this.controlVisibility.bindAsEventListener(this));
      }
    },
    controlVisibility : function() {
      if (this.controller.checked ^ this.reverse) {
         this.controlled.invoke("setStyle", this.hiddenStyle);
         this.element.select(".controlled input").invoke("disable");
      } else {
         this.controlled.invoke("setStyle", this.visibleStyle);
         this.element.select(".controlled input").invoke("enable");
      }
    },
    confirm : function(event) {
      if (this.element.hasClassName('confirm-yes') &amp;&amp; !this.controller.checked || this.element.hasClassName('confirm-no') &amp;&amp; this.controller.checked) {
        this.controlVisibility();
        return;
      }
      new XWiki.widgets.ConfirmationBox(
        {
          onYes: function(){
            this.controlVisibility();
          }.bind(this),
          onNo: function(){
            this.controller.checked = !this.controller.checked;
          }.bind(this),
        },
        {
          confirmationText: "This will remove all table data entered below. Are you sure you want to proceed?",
          showCancelButton: false
        }
      );
    }
  });

  var init = function(event) {
    ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(element) {
      element.select(".controlled-group").each(function(group) {
        if (!group.__visibilityController) {
          group.__visibilityController = new XWiki.widgets.VisibilityController(group);
        }
      });
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  document.observe("xwiki:dom:updated", init);

  // End XWiki augmentation.
  return XWiki;
}(XWiki || {}));
</code>
    </property>
    <property>
      <name>Controlled visibility groups</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>9</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>ce0e1cc4-d0b1-4bf0-9815-444160042fd0</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.UnitConverter = Class.create({

     CONVERSION_META : {
        'weight': {
           'imperial_units' : ['lb', 'oz'],
           'metric_unit' : 'kg',
           'inter_unit_scale' : 16,
           'inter_system_scale' : 0.0283495
        },
        'length': {
           'imperial_units' : ['ft', 'in'],
           'metric_unit' : 'cm',
           'inter_unit_scale' : 12,
           'inter_system_scale' : 2.54
        }
     },

     DEFAULT_UNIT_SYSTEM : 'metric',

     initialize : function (container, selector, triggerInsertionElt, triggerInsertionPosition, system) {
       this._selector = selector;
       this._container = container || document.documentElement;
       if (!this._selector || !triggerInsertionElt) {return;}

       this.crtUnitSystem = system || this.DEFAULT_UNIT_SYSTEM;

       this.initializeElements = this.initializeElements.bind(this);
       this.attachConverter = this.attachConverter.bind(this);

       this.generateTrigger(triggerInsertionElt, triggerInsertionPosition || 'bottom');

       this.initializeElements();
       var _this = this;
       document.observe('xwiki:dom:updated', function(event) {
         if (event.memo &amp;&amp; event.memo.elements) {
           event.memo.elements.each(_this.initializeElements.bind(_this));
         }
       });
     },

     generateTrigger : function(atElement, position) {
       this._trigger = new Element('select', {"class" : "unit-system-selector"});

       var optionMetric = new Element('option', {
                value : 'metric',
         }).update('Metric units (' + this.CONVERSION_META.weight.metric_unit + ', ' + this.CONVERSION_META.length.metric_unit + ')');
       if (this.crtUnitSystem == 'metric') {
          optionMetric.selected = 'selected';
       }
       var optionImperial = new Element('option', {
                value : 'imperial',
         }).update('Imperial units (' + this.CONVERSION_META.weight.imperial_units.join(' / ') + ', ' + this.CONVERSION_META.length.imperial_units.join(' / ') + ')');
       if (this.crtUnitSystem == 'imperial') {
          optionImperial.selected = 'selected';
       }
       this._trigger.insert(optionMetric).insert(optionImperial);

       insertionInfo = {};
       insertionInfo[position] = this._trigger;
       atElement.insert(insertionInfo);

       var _this = this;
       this._trigger.observe('change', function(event) {
         _this.crtUnitSystem = _this._trigger.options[_this._trigger.selectedIndex].value;
         _this.switchUnits(_this.crtUnitSystem);
       });
     },

     initializeElements : function(element) {
       container = element || this._container;
        if (container.__unitSwitcher || (!container.up('.measurements') &amp;&amp; !container.hasClassName('measurements'))) {
         return;
       }
       container.__unitSwitcher = this;
       container.select(this._selector).each(this.attachConverter);
       this.switchUnits(this.crtUnitSystem, container);
     },

     switchUnits : function(type, element) {
       container = element || this._container;
       container.select('.unit-conversion-values .unit-type').each(function(item) {
          if (item.hasClassName(type)) {
            item.show();
          } else {
            item.hide();
          }
       });
     },

     attachConverter : function(element) {
       if (element.tagName.toLowerCase() != 'input' || element.type != 'text') {
         return;
       }
       var unitElt = element.next('.unit');
       var converterElement = new Element('div', {'class' : 'unit-conversion-values'});
       var imperialUnits;
       var type = (element.up('.weight')) ? 'weight' : 'length';

       converterElement.addClassName(type);
       converterElement._meta = this.CONVERSION_META[type];

       var values = this.metricToImperial(converterElement._meta, parseFloat(element.value) || 0);

       var metricZone = element.up('.metric');
       if (!metricZone) {
         metricZone = new Element('div', {'class' : 'unit-type metric'});
         metricZone.insert(element).insert(unitElt || converterElement._meta.metric_unit);
         element.insert({after: converterElement});
       } else {
         metricZone.addClassName('unit-type');
         metricZone.insert({after: converterElement});
       }
       var imperialZone = new Element('div', {'class' : 'unit-type imperial'});
       converterElement.insert(metricZone).insert(imperialZone);

       converterElement._meta.imperial_units.each(function (unit) {
         imperialZone.insert(new Element('label').insert(new Element('input', {'style' : 'width: auto', 'name' : unit, type: 'text', size : 3, value : (values[unit] || '')})).insert(unit));
       });

       this.enableSyncValues(converterElement);
     },

     enableSyncValues : function (element) {
       var _this = this;
       element.select('.imperial input').invoke('observe', 'change', function(event) {_this.syncMetricWithImperial(element);});
       element.select('.metric input').invoke('observe', 'change', function(event) {_this.syncImperialWithMetric(element);});
     },

     syncMetricWithImperial : function (element) {
        var metricInput =  element.down('.metric input');
        metricInput.value  = this.imperialToMetric(element._meta,
                                                      parseFloat(element.down('.imperial input[name="' + element._meta.imperial_units[0] + '"]').value) || 0,
                                                      parseFloat(element.down('.imperial input[name="' + element._meta.imperial_units[1] + '"]').value) || 0
                                                ) || '';
        Event.fire(metricInput, 'phenotips:measurement-updated');
     },

     syncImperialWithMetric : function (element) {
        var imperialValues = this.metricToImperial(element._meta, parseFloat(element.down('.metric input').value) || 0);
        element._meta.imperial_units.each(function (unit) {
          element.down('.imperial input[name="' + unit + '"]').value = imperialValues[unit] || '';
        });
     },

     metricToImperial : function (conversionMeta, value) {
        var result = {};
        var lowerUnitValue = value / conversionMeta.inter_system_scale;
        var higherUnitValue = Math.floor (lowerUnitValue / conversionMeta.inter_unit_scale);
        lowerUnitValue = lowerUnitValue - higherUnitValue * conversionMeta.inter_unit_scale;
        if (lowerUnitValue) {
          lowerUnitValue = lowerUnitValue.toFixed(2);
        }
        result[conversionMeta.imperial_units[0]] = higherUnitValue;
        result[conversionMeta.imperial_units[1]] = lowerUnitValue;
        return result;
     },

     imperialToMetric : function (conversionMeta, higherUnitValue, lowerUnitValue) {
        return ((conversionMeta.inter_unit_scale * higherUnitValue + lowerUnitValue) * conversionMeta.inter_system_scale).toFixed(2);
     }
  });
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Switcher between metric and imperial units for measurements</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>10</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>34bc814b-fee0-4738-bc6d-b5803a08a0dc</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  // Start augmentation
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};

  widgets.HelpButton = Class.create({
    ADVANCED_INFO_MAX_ITEMS : 5,
    infoServices : {
      'xHelpButton' : {
         'hint'     : "$services.localization.render('phenotips.widgets.helpButtons.xHelpButton.hint')",
         'callback' : function (helpButton) {
           helpButton.helpBox.content.update(helpButton._information || '');
         }
       },
      'phenotype-info' : {
        'hint'     : "$services.localization.render('phenotips.widgets.helpButtons.phenotype.hint')",
        'vocabulary' : 'hpo',
        'database' : {
          'name' : "$services.vocabularies.hpo.name",
          'link' : "$services.vocabularies.hpo.website",
          'citation' : "$services.vocabularies.hpo.citation",
          'version': "$services.vocabularies.hpo.version"
        },
        'callback' : function (helpButton, json) {
          var c = helpButton.helpBox.content;
          var elt = function(type, cssClass, content) {
            return new Element(type, cssClass &amp;&amp; {'class' : cssClass} || {}).update(content || '');
          };

          c.update(
                    elt('span', 'info').insert(elt('span', 'key').update(json.id))
                                       .insert(' ')
                                       .insert(elt('span', 'value').update(json.name_translated))
                  );
          json.def_translated &amp;&amp; c.insert(elt('p').update(json.def_translated.replace(/\s*\n\s*/, ' ').replace(/`([^`]+)`\s+\(([A-Z]+:[0-9]+)`?\)/g, '&lt;em title="$2"&gt;$1&lt;/em&gt;')));

          var labels = {'synonym' : "$services.localization.render('phenotips.widgets.helpButtons.phenotype.synonym')", 'parents' : "$services.localization.render('phenotips.widgets.helpButtons.phenotype.typeOf')"};
          var advancedInfo = elt('dl');
          for (var l in labels) {
            if (json[l]) {
              advancedInfo.insert(elt('dt', '', labels[l]));
              json[l].each(function (item) {
                advancedInfo.insert(elt('dd', '', item.name_translated || item));
              })
            }
          }
          if (advancedInfo.firstDescendant()) {
            c.insert(advancedInfo);
          }

          var suggestedInput = helpButton.icon.getAttribute('data-source') &amp;&amp; $(helpButton.icon.getAttribute('data-source')) || $('quick-phenotype-search') || $$('input.suggest-hpo')[0];
          if (PhenoTips.widgets.OntologyBrowser &amp;&amp; suggestedInput) {
            var browseButton = new Element('a', {'class' : 'button', href : '#'}).update("$services.localization.render('phenotips.widgets.helpButtons.phenotype.browseRelated')");
            browseButton._id = json.id;
            browseButton.observe('click', function(event){
              event.stop();
              var suggest = suggestedInput._suggest;
              var params = {};
              if (typeof isPhenotypeSelected !== 'undefined') {
                params = {
                  isTermSelected : isPhenotypeSelected,
                  unselectTerm : unselectPhenotype
                };
              }
              browseButton._obrowser = new PhenoTips.widgets.OntologyBrowser(suggest, null, params);
              browseButton._obrowser.show(browseButton._id);
            });
            c.insert(elt('div', 'term-tools').insert(browseButton.wrap('span', {'class' : 'buttonwrapper'})));
          }
        }
      },
      'phenotype-qualifier-info' : {
        'hint'     : "$services.localization.render('phenotips.widgets.helpButtons.phenotypeQualifier.hint')",
        'vocabulary' : 'hpo',
        'database' : {
          'name' : "$services.vocabularies.hpo.name",
          'link' : "$services.vocabularies.hpo.website",
          'citation' : "$services.vocabularies.hpo.citation",
          'version': "$services.vocabularies.hpo.version"
        },
        'callback' : function (helpButton, json) {
          var c = helpButton.helpBox.content;
          var elt = function(type, cssClass, content) {
            return new Element(type, cssClass &amp;&amp; {'class' : cssClass} || {}).update(content || '');
          };
          c.update(
                    elt('span', 'info').insert(elt('span', 'key').update(json.id))
                                       .insert(' ')
                                       .insert(elt('span', 'value').update(json.name_translated))
                  );
          json.def_translated &amp;&amp; c.insert(elt('p').update(json.def_translated.replace(/\s*\n\s*/, ' ').replace(/`([^`]+)`\s+\(([A-Z]+:[0-9]+)`?\)/g, '&lt;em title="$2"&gt;$1&lt;/em&gt;')));
        }
      },
      'omim-disease-info' : {
        'hint' : "$services.localization.render('phenotips.widgets.helpButtons.omimDisease.hint')",
        'vocabulary' : 'omim',
        'database' : {
          'name' : "$services.vocabularies.omim.name",
          'link' : "$services.vocabularies.omim.website",
          'citation' : "$services.vocabularies.omim.citation",
          'version': "$services.vocabularies.omim.version"
        },
        'callback' : function (helpButton, json) {
          var c = helpButton.helpBox.content;
          var elt = function(type, cssClass, content) {
            return new Element(type, cssClass &amp;&amp; {'class' : cssClass} || {}).update(content || '');
          };

          c.update(
                    elt('span', 'info').insert(elt('span', 'key').update((json.symbol || '') + json.id))
                                       .insert(' ')
                                       .insert(elt('span', 'value').update(json.name_translated))
                  );

          var labels = {
            'short_name' : {
              "name" : '',
              "display" : helpButton._insertAdvancedInfo.bind(helpButton)
            },
            'synonym': {
              "name" : "$services.localization.render('phenotips.widgets.helpButtons.omimDisease.synonym')",
              "display" : helpButton._insertAdvancedInfo.bind(helpButton)
            },
            'included_name' : {
              "name" : "$services.localization.render('phenotips.widgets.helpButtons.omimDisease.included')",
              "display" : helpButton._insertAdvancedInfo.bind(helpButton)
            },
            'actual_symptom' : {
              "name" : "$services.localization.render('phenotips.widgets.helpButtons.omimDisease.symptoms')",
              "display" : helpButton._insertFormattedAdvancedInfo.bind(helpButton)
            },
            'actual_not_symptom' : {
              "name" : "$services.localization.render('phenotips.widgets.helpButtons.omimDisease.notSymptoms')",
              "display" : helpButton._insertFormattedAdvancedInfo.bind(helpButton)
            }
          };
          var advancedInfo = elt('div', 'advanced-info');
          advancedInfo.hide();
          for (var l in labels) {
            labels[l].display(advancedInfo, labels[l].name, json[l]);
          }
          c.insert(advancedInfo);

          var viewButton = new Element('a', {'class' : 'button', href : 'http://www.omim.org/entry/' + json.id, 'target' : '_blank'}).update("$services.localization.render('phenotips.widgets.helpButtons.omimDisease.linkToOmim')");
          c.insert(elt('div', 'term-tools').insert(viewButton.wrap('span', {'class' : 'buttonwrapper'})));
          viewButton.observe('click', function(event) {
            event.stop();
            window.open(viewButton.href);
          });
          if (json.gene_reviews_link) {
            var geneReviewsButton = new Element('a', {'class' : 'button', href : json.gene_reviews_link, 'target' : '_blank'}).update("$services.localization.render('phenotips.widgets.helpButtons.omimDisease.linkToGeneReviews')");
            c.insert(elt('div', 'term-tools').insert(geneReviewsButton.wrap('span', {'class' : 'buttonwrapper'})));
            geneReviewsButton.observe('click', function(event) {
              event.stop();
              window.open(geneReviewsButton.href);
            });
          }
        }
      },
      'ordo-disease-info' : {
        'hint' : "$services.localization.render('phenotips.widgets.helpButtons.ordoDisease.hint')",
        'vocabulary' : 'ordo',
        'database' : {
          'name' : "$services.vocabularies.ordo.name",
          'link' : "$services.vocabularies.ordo.website",
          'citation' : "$services.vocabularies.ordo.citation",
          'version': "$services.vocabularies.ordo.version"
        },
        'externalDBs' : [
                        { name : 'Ensembl', url : 'http://useast.ensembl.org/Homo_sapiens/Gene/Compara_Tree?g=', field : 'ensembl_id'},
                        { name : 'GenAtlas', url : 'http://genatlas.medecine.univ-paris5.fr/fiche.php?symbol=', field : 'genatlas_id'},
                        { name : 'HGNC', url : 'http://www.genenames.org/cgi-bin/gene_symbol_report?hgnc_id=', field : 'hgnc_id'},
                        { name : 'ICD-10', url : 'http://icdlist.com/icd-10/', field : 'icd-10_id'},
                        { name : 'IUPHAR', url : 'http://guidetopharmacology.org/GRAC/ObjectDisplayForward?objectId=', field : 'iuphar_id'},
                        { name : 'MedDRA', url : 'http://purl.bioontology.org/ontology/MEDDRA/', field : 'meddra_id'},
                        { name : 'MeSH', url : 'https://www.ncbi.nlm.nih.gov/mesh/', field : 'mesh_id'},
                        { name : 'OMIM', url : 'http://www.omim.org/entry/', field : 'omim_id'},
                        { name : 'UniProt', url : 'http://www.uniprot.org/uniprot/', field : 'swissprot_id'},
                        { name : 'UMLS', url : 'https://uts.nlm.nih.gov/metathesaurus.html?cui=', field : 'umls_id'}
        ],
        'callback' : function (helpButton, json) {
          var c = helpButton.helpBox.content;
          var elt = function(type, cssClass, content) {
            return new Element(type, cssClass &amp;&amp; {'class' : cssClass} || {}).update(content || '');
          };

          c.update(
                    elt('span', 'info').insert(elt('span', 'key').update(json.id))
                                       .insert(' ')
                                       .insert(elt('span', 'value').update(json.name_translated))
                  );
          json.def_translated &amp;&amp; c.insert(elt('p').update(json.def_translated.replace(/\s*\n\s*/, ' ')));

          var labels = {
            'synonym': {
              "name" : "$services.localization.render('phenotips.widgets.helpButtons.ordoDisease.synonym')",
              "display" : helpButton._insertAdvancedInfo.bind(helpButton)
            },
            'parents' : {
              "name" : "$escapetool.javascript($services.localization.render('phenotips.widgets.helpButtons.ordoDisease.parents'))",
              "display" : helpButton._insertAdvancedInfo.bind(helpButton)
            },
            'actual_symptom' : {
              "name" : "$services.localization.render('phenotips.widgets.helpButtons.ordoDisease.symptoms')",
              "display" : helpButton._insertFormattedAdvancedInfo.bind(helpButton)
            },
            'actual_not_symptom' : {
              "name" : "$services.localization.render('phenotips.widgets.helpButtons.ordoDisease.notSymptoms')",
              "display" : helpButton._insertFormattedAdvancedInfo.bind(helpButton)
            },
            'age_of_onset' : {
              "name" : "$services.localization.render('phenotips.widgets.helpButtons.ordoDisease.age_of_onset')",
              "display" : helpButton._insertAdvancedInfo.bind(helpButton)
            },
            'inheritance' : {
              "name" : "$services.localization.render('phenotips.widgets.helpButtons.ordoDisease.inheritance')",
              "display" : helpButton._insertAdvancedInfo.bind(helpButton)
            },
            'birth_prevalence' : {
              "name" : "$services.localization.render('phenotips.widgets.helpButtons.ordoDisease.birth_prevalence')",
              "display" : helpButton._insertAdvancedInfo.bind(helpButton)
            },
            'lifetime_prevalence' : {
              "name" : "$services.localization.render('phenotips.widgets.helpButtons.ordoDisease.lifetime_prevalence')",
              "display" : helpButton._insertAdvancedInfo.bind(helpButton)
            },
            'point_prevalence' : {
              "name" : "$services.localization.render('phenotips.widgets.helpButtons.ordoDisease.point_prevalence')",
              "display" : helpButton._insertAdvancedInfo.bind(helpButton)
            }
          };
          var advancedInfo = elt('div', 'advanced-info');
          advancedInfo.hide();
          for (var l in labels) {
            labels[l].display(advancedInfo, labels[l].name, json[l]);
          }
          c.insert(advancedInfo);

          var tools = elt('div', 'term-tools');
          this.externalDBs.each(function (item) {
            var value = json[item.field];
            if (value) {
              if (!value.each) {
                value = [value];
              }
              value.each (function (id) {
                tools.insert(new Element('a', {
                  'href'   : item.url + id,
                  'class'  : 'button'
                }).update(item.name + ': ' + id).wrap('span', {'class' : 'buttonwrapper'}));
              });
            }
          });
          // We must stop the event, otherwise this item will be selected; as a consequence, we must also manually open the link
          tools.select('a').each(function(item) {
            item.observe('click', function(event) {
              event.stop();
              window.open(item.href);
            })
          });
          if (tools.firstDescendant()) {
            c.insert(tools);
          }
        }
      },
      'gene-info' : {
        'hint' : "$services.localization.render('phenotips.widgets.helpButtons.gene.hint')",
        'vocabulary' : 'hgnc',
        'database' : {
          'name' : "$services.vocabularies.hgnc.name",
          'link' : "$services.vocabularies.hgnc.website",
          'citation' : "$services.vocabularies.hgnc.citation",
          'version': "$services.vocabularies.hgnc.version"
        },
        externalDBs : [
                        { name : 'GENECARDS',    url : 'http://www.genecards.org/cgi-bin/carddisp.pl?gene=',          field : 'genecards_id'},
                        { name : 'OMIM',         url : 'http://www.omim.org/entry/',                                  field : 'omim_id'},
                        { name : 'Entrez',       url : 'http://www.ncbi.nlm.nih.gov/gene/?term=',                     field : 'entrez_id'},
                        { name : 'RefSeq',       url : 'http://www.ncbi.nlm.nih.gov/nuccore/',                        field : 'refseq_accession'},
                        { name : 'Ensembl',      url : 'http://useast.ensembl.org/Homo_sapiens/Gene/Compara_Tree?g=', field : 'ensembl_gene_id'}
            ],
        'callback' : function (helpButton, json) {
          var c = helpButton.helpBox.content;
          var elt = function(type, cssClass, content) {
            return new Element(type, cssClass &amp;&amp; {'class' : cssClass} || {}).update(content || '');
          };

          c.update(
                    elt('span', 'info').insert(elt('span', 'key').update(json.symbol))
                                       .insert(' ')
                                       .insert(elt('span', 'value').update(json.name_translated))
                  );

          var labels = {'alias_symbol' : "$services.localization.render('phenotips.widgets.helpButtons.gene.alias')", 'prev_symbol' : "$services.localization.render('phenotips.widgets.helpButtons.gene.previousSymbols')", 'gene_family' : "$services.localization.render('phenotips.widgets.helpButtons.gene.family')"};
          var advancedInfo = elt('dl');
          for (var l in labels) {
            if (json[l] &amp;&amp; json[l].length &gt; 0) {
              advancedInfo.insert(elt('dt', '', labels[l]));
              if (Object.prototype.toString.call(json[l]) === '[object Array]') {
                json[l].each(function (item) {
                  advancedInfo.insert(elt('dd', '', item.name_translated || item));
                })
              } else {
                 advancedInfo.insert(elt('dd', '', json[l]));
              }
            }
          }
          if (advancedInfo.firstDescendant()) {
            c.insert(advancedInfo);
          }

          var tools = elt('div', 'term-tools');
          this.externalDBs.each(function (item) {
            var value = json[item.field];
            if (value) {
              if (!value.each) {
                value = [value];
              }
              value.each (function (id) {
                tools.insert(new Element('a', {
                  'href'   : item.url + id,
                  'class'  : 'button'
                }).update(item.name + ': ' + id).wrap('span', {'class' : 'buttonwrapper'}));
              });
            }
          });
          // We must stop the event, otherwise this item will be selected; as a consequence, we must also manually open the link
          tools.select('a').each(function(item) {
            item.observe('click', function(event) {
              event.stop();
              window.open(item.href);
            })
          });
          if (tools.firstDescendant()) {
            c.insert(tools);
          }
        }
      }
    },

    initialize : function(icon) {
      this.icon = icon;
      this._information = this.icon._information || this.icon.title;
      for (var label in this.infoServices) {
        if (this.icon.hasClassName(label)) {
          this._builder = this.infoServices[label];
          this.icon.title = this.infoServices[label].hint || '';
        }
      }
      if (!this._builder) {
        return;
      }
      this.icon.observe("click", this.toggleHelp.bindAsEventListener(this));
      this.hideAllHelpOnOutsideClick = this.hideAllHelpOnOutsideClick.bindAsEventListener(this);
    },

    _insertAdvancedInfo : function(container, label, values) {
      var elt = function(type, cssClass, content) {
        return new Element(type, cssClass &amp;&amp; {'class' : cssClass} || {}).update(content || '');
      };
      if (values &amp;&amp; values.length &gt; 0) {
        var expandableContainer = elt('dl');
        container.insert(expandableContainer);
        container.show();
        expandableContainer.insert(elt('dt', '', label));
        values.each(function (item) {
          expandableContainer.insert(elt('dd', '', item.name_translated || item.label || item));
        });
        this._limitDefListSize(expandableContainer);
      }
    },

    _insertFormattedAdvancedInfo : function(container, label, values) {
      if (!values || !values.length) { return; }
      var _this = this;
      new Ajax.Request(XWiki.contextPath + "/rest/vocabularies/terms/fetch", {
        parameters : {"term-id" : values},
        method: "GET",
        onSuccess: function(response) {
          var json = response &amp;&amp; response.responseJSON;
          var formattedValues = json &amp;&amp; json.rows &amp;&amp; json.rows.map(function(item) {
            return item.name_translated || item.name;
          });
          _this._insertAdvancedInfo(container, label, formattedValues);
        }
      });
    },

    _limitDefListSize : function(container) {
      var elements = container.select("dd");
      // If one over ADVANCED_INFO_MAX_ITEMS, display all, since "show more" and the extra item will occupy same amount of space.
      if (elements.length &lt;= this.ADVANCED_INFO_MAX_ITEMS + 1) { return; };
      var hiddenElems = elements.slice(this.ADVANCED_INFO_MAX_ITEMS);
      var expandButton = new Element("div", {"class" : "expand-button"});
      this._toggleAdvancedInfoExpand(container, expandButton, hiddenElems);
      container.insert({"after" : expandButton});
      var _this = this;
      expandButton.observe("click", function(event) {
        event.stop();
        _this._toggleAdvancedInfoExpand(container, expandButton, hiddenElems);
      });
    },

    _toggleAdvancedInfoExpand : function(container, expandButton, hiddenElems) {
      var minifiedLabel = "minified";
      if (container.hasClassName(minifiedLabel)) {
        this._expandAdvancedInfo(container, expandButton, hiddenElems, minifiedLabel, "$escapetool.javascript($services.localization.render('phenotips.widgets.helpButtons.advancedInfo.less'))");
      } else {
        this._collapseAdvancedInfo(container, expandButton, hiddenElems, minifiedLabel, "$escapetool.javascript($services.localization.render('phenotips.widgets.helpButtons.advancedInfo.more'))".replace("___numItems___", hiddenElems.length));
      }
    },

    _expandAdvancedInfo : function(container, expandButton, displayedElems, minifiedMarker, buttonLabel) {
      container.removeClassName(minifiedMarker);
      expandButton.update(buttonLabel);
      displayedElems.invoke("show");
    },

    _collapseAdvancedInfo : function(container, expandButton, hiddenElems, minifiedMarker, buttonLabel) {
      container.addClassName(minifiedMarker);
      expandButton.update(buttonLabel);
      hiddenElems.invoke("hide");
    },

    toggleHelp : function() {
      if (!this.helpBox || this.helpBox.hasClassName('hidden')) {
        this.showHelp();
        document.observe('click', this.hideAllHelpOnOutsideClick);
      } else {
        this.hideHelp();
      }
    },

    hideAllHelpOnOutsideClick : function (event) {
      if (!event.findElement('.xTooltip') &amp;&amp; !event.findElement('.xHelpButton')) {
        this.hideHelp();
        document.stopObserving('click', this.hideAllHelpOnOutsideClick);
      }
    },

    hideHelp : function(event) {
      event &amp;&amp; event.stop();
      if (this.helpBox) {
        if (this.helpBox.hasClassName('error')) {
          this.helpBox.remove();
          delete this.helpBox;
        } else {
          this.helpBox.addClassName('hidden');
        }
      }
    },

    showHelp : function() {
      if (!this.helpBox) {
        this.createHelpBox();
      }
      $$('div.xTooltip:not(.hidden)').invoke('_hideHelp');
      this.helpBox.removeClassName('hidden');
    },

    createHelpBox : function() {
      this.helpBox = new Element('div', {'class': 'hidden xTooltip'});
      this.helpBox._behavior = this;
      this.helpBox._hideHelp = function() {
         this._behavior.hideHelp();
      }.bind(this.helpBox);

      this.helpBox.content = new Element('div');
      this.helpBox.insert(this.helpBox.content);

      if (this._builder.service || this._builder.vocabulary) {
        this.createHelpContentFromService();
      } else {
        this._builder.callback &amp;&amp; this._builder.callback(this);
      }

      var closeButton = new Element('span', {'class': 'hide-tool', 'title': 'Hide'});
      closeButton.update('×');
      closeButton.observe('click', this.hideHelp.bindAsEventListener(this));
      this.helpBox.insert({'top': closeButton});
      this.icon.insert({'after' : this.helpBox});
    },

    createHelpContentFromService : function() {
      var _this = this;
      var url = XWiki.contextPath + "/rest/vocabularies/" + _this._builder.vocabulary + "/" + _this._information;
      new Ajax.Request(url, {
        parameters: {'id' : _this._information},
        method : 'get',
        onCreate : function () {
          _this.helpBox.content.update(new Element('span', {'class' : 'hint temporary'}).update("$services.localization.render('phenotips.widgets.helpButtons.loading')"));
        },
        onSuccess: function (response) {
          _this._builder.callback(_this, response.responseJSON);
        },
        onFailure: function (response) {
          _this.helpBox.addClassName('error');
          _this.helpBox.down('.temporary').remove();
          _this.helpBox.insert("$services.localization.render('phenotips.widgets.helpButtons.failedToLoad')".replace("__subject__", _this._information) + " : "+ response.statusText);
        }
      });
      this.addDatabaseCreditInfo();
    },

    addDatabaseCreditInfo : function () {
      var version = "$services.localization.render('phenotips.indexVocabulary.version', ['" + this._builder.database.version + "'])";
      var citation = this._builder.database.citation.concat(". ").concat(version);
      var credits = new Element('a', {'class' : 'reference', href : this._builder.database.link, 'target' : '_blank', 'title' : citation}).update(this._builder.database.name);
      var creditsWrapper = new Element('div', {'class' : 'hint'}).update(credits.wrap('span', {'class' : 'reference-wrapper'}));
      this.helpBox.insert({'top': creditsWrapper});

      // Need to stop the propagation of the click to the parent element when following the database credits link,
      // otherwise it will be selected.
      credits.observe('click', function(event) {
        event.stopPropagation();
      });
    }
  });

  var init = function(event) {
    ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(element) {
      (element.hasClassName("xHelpButton") ? [element] : element.select(".xHelpButton")).each(function(icon) {
        if (!icon.__helpController) {
          icon.__helpController = new PhenoTips.widgets.HelpButton(icon);
        }
      });
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  document.observe("xwiki:dom:updated", init);

  // End augmentation.
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Help buttons</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>11</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>f35b7996-c858-464b-aa26-f58512b40b50</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};

  widgets.FuzzyDatePickerDropdown = Class.create({
    initialize : function(options) {
      this.span     = new Element('span');
      this.options  = options;
      this.callback = null;
    },

    populate : function(values) {
      var selectedIndex = this.dropdown ? (this.dropdown.selectedIndex || this._tmpSelectedIndex) : 0;

      // using raw HTML for performance reasons: generating many years takes a noticeable time using
      // more proper methods (e.g. new Element()...)
      // (Note: using span around select because IE9 does not allow setting innerHTML of &lt;select&gt;-s)
      var optionsHTML = '&lt;select name="' + this.options.name +
                             '" class="' + (this.options.cssClass || this.options.name || '') +
                             '" placeholder="' + (this.options.hint || this.options.name || '') +
                             '" title="'       + (this.options.hint || this.options.name || '') + '"&gt;';

      optionsHTML += '&lt;option value="" class="empty"&gt; &lt;/option&gt;';
      values.each(function (item) {
         optionsHTML += '&lt;option value="' + item.value + '"';
         if (item.cssClass) {
             optionsHTML += ' class="' + item.cssClass + '"';
         }
         if (item.selected) {
             optionsHTML += ' selected="selected"';
         }
         optionsHTML += '&gt;' + (item.text || item.value || '') + '&lt;/option&gt;';
      });
      optionsHTML += "&lt;/select&gt;";
      this.span.innerHTML = optionsHTML;
      this.dropdown = this.span.firstChild;
      this.callback &amp;&amp; this.onSelect(this.callback);
      if (this.dropdown.selectedIndex &lt;= 0 &amp;&amp; selectedIndex &gt;= 0 &amp;&amp; selectedIndex &lt; this.dropdown.options.length) {
        this.dropdown.selectedIndex = selectedIndex;
      }
    },

    enable : function () {
      this.dropdown.enable();
      if (this.dropdown.selectedIndex &lt;= 0 &amp;&amp; this._tmpSelectedIndex &lt; this.dropdown.options.length) {
        this.dropdown.selectedIndex = this._tmpSelectedIndex;
        return (this._tmpSelectedIndex &gt; 0);
      }
      return false;
    },

    disable : function () {
      this.dropdown.disable();
      this._tmpSelectedIndex = this.dropdown.selectedIndex;
      this.dropdown.selectedIndex = 0;
    },

    getElement : function() {
      return this.span;
    },

    onSelect : function(callback) {
      var _this = this;
      this.callback = callback;
      var events = ['change'];
      browser.isGecko &amp;&amp; events.push('keyup');
      events.each(function(eventName) {
        _this.dropdown.observe(eventName, function() {
          callback();
          _this._tmpSelectedIndex = _this.dropdown.selectedIndex;
        });
      });
    },

    onFocus : function(callback) {
      var _this = this;
      this.dropdown.observe('focus', function() {
        callback();
        if (_this.dropdown.selectedIndex == -1 &amp;&amp; _this._tmpSelectedIndex &lt; _this.dropdown.options.size()) {
          _this.dropdown.selectedIndex = _this._tmpSelectedIndex;
        }
      });
    },
    onBlur : function(callback) {
      this.dropdown.observe('blur', callback);
    },

    getSelectedValue : function () {
       return (this.dropdown.selectedIndex &gt;= 0) ? this.dropdown.options[this.dropdown.selectedIndex].value : '';
    },

    getSelectedClass : function() {
       return (this.dropdown.selectedIndex &gt;= 0) ? this.dropdown.options[this.dropdown.selectedIndex].className : '';
    },

    getSelectedOption : function () {
       return (this.dropdown.selectedIndex &gt;= 0) ? this.dropdown.options[this.dropdown.selectedIndex].innerHTML : '';
    }
  });

  widgets.FuzzyDatePicker = Class.create({
    initialize : function (input) {
      if (!input) {return};
      this.__input = input;
      this.__input.hide();
      this.__fuzzyInput = $(this.__input.id + '_entered')
      if (this.__fuzzyInput) {
        this.__recordBoth = true;
      }
      if (this.__fuzzyInput &amp;&amp; this.__fuzzyInput.value) {
        this.__date = JSON.parse(this.__fuzzyInput.value || '{}');
      } else if (this.__input.alt) {
        var parsedDate = new Date(this.__input.alt);
        this.__date = {'year': parsedDate.getUTCFullYear(), 'month': parsedDate.getUTCMonth() + 1, 'day': parsedDate.getUTCDate()};
      } else {
        this.__date = {};
      }

      this.container = new Element('div', {'class' : 'fuzzy-date-picker'});

      //Insertion is done before, so that validation errors can appear after it
      this.__input.insert({before : this.container});
      var format = (this.__input.title || 'yyyy-MM-dd').split(/\W+/);
      for (var i = 0; i &lt; format.length; ++i) {
        switch (format[i][0]) {
          case 'y':
            this.container.insert(this.createYearDropdown());
            break;
          case 'M':
            this.container.insert(this.createMonthDropdown());
            break;
          case 'd':
            this.container.insert(this.createDayDropdown());
            break;
        }
      }

      // If date data is provided in the fuzzyInput, then update the input so that any validations work properly.
      if (!this.__input.value &amp;&amp; this.__fuzzyInput &amp;&amp; this.__fuzzyInput.value &amp;&amp; this.__fuzzyInput.value !== "{}") {
        var dateValues = this.getCurrentDateValues();
        this.__input.value = dateValues.dateStr;
      }

      // TODO: yearSelector's (and month's &amp; day's) .onSelect() does not seem to fire
      //       upon programmatic update if a substitute is found can remove these hackish events
      this.container.observe("datepicker:date:changed", this.onProgrammaticUpdate.bind(this));
      this.onProgrammaticUpdate();
    },

    onProgrammaticUpdate : function() {
        this.yearSelected();
        this.monthSelected();
        this.updateDate();
    },

    createYearDropdown : function() {
      this.yearSelector = new widgets.FuzzyDatePickerDropdown({name: "year"});

      var today = new Date();
      var crtYear = today.getYear() + 1900;
      var startYear = 1900;

      var range = (this.__date.hasOwnProperty("range") &amp;&amp; this.__date.range.hasOwnProperty("years")) ? this.__date.range.years : 1;
      var year = this.__date.hasOwnProperty("year") ? this.__date.year : null;
      var values = [];
      if (year &gt; crtYear) {
          values.push({"value" : year, "selected" : true });
      }
      for (var y = crtYear; y &gt;= startYear; --y) {
        values.push({"value" : y, "selected" : ((year == y) &amp;&amp; (range &lt;= 1)) });
        if (y % 10 == 0) {
            values.push({ "value" : (y + "s"),
                          "cssClass" : "decade",
                          "text" : (y + 's'),
                          "selected" : ((year == y) &amp;&amp; (range &gt; 1))});
        }
      }

      var insertCentury = function(centuryStart) {
          var centuryEnd = centuryStart + 100;
          if (year != null &amp;&amp; year &gt;= centuryStart &amp;&amp; year &lt; centuryEnd &amp;&amp; range == 1) {
              values.push({"value" : year, "selected" : true });
          }
          var yearInCentury = (year != null) &amp;&amp; (year &gt;= centuryStart) &amp;&amp; (year &lt; centuryEnd) &amp;&amp; (range &gt; 1);
          values.push({"value": centuryStart + "s", "cssClass" : "century", "selected" : yearInCentury});
      }
      insertCentury(1800);
      insertCentury(1700);
      insertCentury(1600);
      insertCentury(1500);
      if (year != null &amp;&amp; year &lt; 1500) {
          values.push({"value" : year, "selected" : true });
      }

      this.yearSelector.populate(values);
      this.yearSelector.onSelect(this.yearSelected.bind(this));

      return this.yearSelector.getElement();
    },

    yearSelected : function() {
      if (!this.yearSelector) {
        return;
      }
      if (this.yearSelector.getSelectedValue() &gt; 0) {
      //  this.monthSelector.enable();
        this.monthSelector &amp;&amp; this.monthSelected();
      //} else {
      //  this.monthSelector.disable();
      //  this.daySelector.disable();
      }
      this.updateDate();
    },

    createMonthDropdown : function() {
      this.monthSelector = new widgets.FuzzyDatePickerDropdown({name: "month"});
      this.monthSelector.populate(this.getZeroPaddedValueRange(1,12, this.__date.month));
      //this.monthSelector.disable();
      this.monthSelector.onSelect(this.monthSelected.bind(this));
      return this.monthSelector.getElement();
    },

    monthSelected : function() {
      if (!this.monthSelector) {
        return;
      }
      if (this.monthSelector.getSelectedValue() &gt; 0) {
        this.daySelector &amp;&amp; this.daySelector.populate(this.getAvailableDays());
      //  this.daySelector.enable();
      //} else {
      //  this.daySelector.disable();
      }
      this.updateDate();
    },

    createDayDropdown : function() {
      this.daySelector = new widgets.FuzzyDatePickerDropdown({name: "day"});
      this.daySelector.populate(this.getZeroPaddedValueRange(1,31, this.__date.day));
      //this.daySelector.disable();
      this.daySelector.onSelect(this.updateDate.bind(this));
      return this.daySelector.getElement();
    },

    getAvailableDays : function () {
      var year = this.yearSelector.getSelectedValue() * 1;
      var month = this.monthSelector.getSelectedValue() * 1;
      var lastDayOfMonth = 0;
      if ([1,3,5,7,8,10,12].indexOf(month) &gt;= 0) {
        lastDayOfMonth = 31;
      } else if ([4,6,9,11].indexOf(month) &gt;= 0) {
        lastDayOfMonth = 30
      } else if (month == 2) {
        if (year % 4 == 0 &amp;&amp; (year % 100 != 0 || year % 400 == 0)) {
          lastDayOfMonth = 29;
        } else {
          lastDayOfMonth = 28;
        }
      }
      return this.getZeroPaddedValueRange(1, lastDayOfMonth);
    },

    getZeroPaddedValue : function (value) {
      return value ? ("0" + value).slice(-2) : "01";
    },

    getZeroPaddedValueRange : function (start, end, selected) {
      var values = [];
      if (start &lt;= end) {
          for (var v = start; v &lt;= end; ++v) {
              values.push({'value': v, 'text' : ("0" + v).slice(-2), 'selected' : selected == v});
          }
      } else {
          for (var v = end; v &lt;= start; --v) {
              values.push({'value': v, 'text' : ("0" + v).slice(-2), 'selected' : selected == v});
          }
      }
      return values;
    },

    getCurrentDateValues : function () {
        var dateObject = {};

        var y = this.yearSelector.getSelectedValue();
        var rangeMatch = y.match(/(\d\d\d\d)s$/);
        if (rangeMatch) {
            var range = (this.yearSelector.getSelectedClass() == "century") ? 100 : 10;
            dateObject["range"] = { "years": range };
            dateObject["year"] = parseInt(rangeMatch[1]);
        } else {
            if (y != "") {
                dateObject["year"] = parseInt(y);
            }
        }

        if (y &gt; 0) {
            var m = this.monthSelector &amp;&amp; this.monthSelector.getSelectedValue();
            if (m &gt; 0) {
                dateObject["month"] = parseInt(this.monthSelector.getSelectedOption());

                var d = this.daySelector &amp;&amp; this.daySelector.getSelectedValue();
                if (d &gt; 0) {
                    dateObject["day"] = parseInt(this.daySelector.getSelectedOption());
                }
            }
        }

        return {"dateObject" : dateObject, "dateStr" : (y &amp;&amp; !y.match(/\d\d\d\ds$/)) ? (y + "-" + this.getZeroPaddedValue(m) + "-" + this.getZeroPaddedValue(d)) : ""};
    },

    updateDate : function () {
        var dateValues = this.getCurrentDateValues();

        var newValue = JSON.stringify(dateValues.dateObject);
        if (this.__recordBoth) {
          var oldValue = this.__fuzzyInput.value;
          if (newValue != oldValue) {
            this.__fuzzyInput.value = newValue;
            this.__input.value = dateValues.dateStr;
            this.__input.alt = dateValues.dateStr ? dateValues.dateStr + "T00:00:00Z" : dateValues.dateStr;
            this.__input.fire("xwiki:date:changed");
          }
        } else {
          var oldValue = this.__input.value;
          if (newValue != oldValue) {
            this.__input.value = newValue;
            this.__input.alt = dateValues.dateStr ? dateValues.dateStr + "T00:00:00Z" : dateValues.dateStr;
            this.__input.fire("xwiki:date:changed");
          }
        }
    }
  });

  var init = function(event) {
    ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(element) {
      (element.hasClassName("fuzzy-date") ? [element] : element.select(".fuzzy-date")).each(function(dateInput) {
        if (!dateInput.__datePicker) {
          dateInput.__datePicker = new PhenoTips.widgets.FuzzyDatePicker(dateInput);
        }
      });
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  document.observe("xwiki:dom:updated", init);

  // End augmentation.

  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Fuzzy datepicker</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>12</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>27737a98-9433-41fd-83f6-ecb74ffac1a2</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>(function() {
  var init = function(event) {
    var containers = (event &amp;&amp; event.memo.elements) || [$('body')];
    containers.each(function(container) {
      container.select('input.suggestUsersAndGroups').each(function(input) {
        if (!input.hasClassName('initialized')) {
          var options = {
            script : XWiki.contextPath + "/rest/principals/suggest",
            noresults: "$services.localization.render('phenotips.widgets.usersAndGroupsPicker.noResults')"
          };
          new XWiki.widgets.UserPicker(input, options);
          input.addClassName('initialized');
        }
      });
    });
  };
  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);
  document.observe('xwiki:dom:updated', init);
})()</code>
    </property>
    <property>
      <name>Suggest users and groups</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>13</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d823f086-78f1-4019-8747-fcd55d2bd448</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.SegmentedBar = Class.create({
    options: {
      segments : 5,
      displayValue : true
    },
    /**
    A PhenoTips widget for displaying a value as a segmented bar HTML element. It uses the current text color and font size, so adjusting the look of the bar means changing the color and font-size on the HTML element returned by the generateSegmentedBar method, or on one of its ancestors, either via a CSS extension or programmatically. Example:

        var barOptions = {
          segments : 10,
          displayValue : false
        };
        container.insert(new PhenoTips.widgets.SegmentedBar(score, barOptions).generateSegmentedBar().setStyle({color: 'red', fontSize: '200%'}));

    @param value The value that this bar is meant to display. Must be between 0 and 1.

    @param options Options for styling the segmented bar, all values are optional:

    {
      segments: The number of segments in the bar; default is 5,
      displayValue: Option to display the percentage value after the bar; default is true
    }

    */
    initialize : function(value, options) {
      this.value = value;
      this.options = Object.extend(Object.clone(this.options), options || { });
    },
    generateSegmentedBar: function() {
      if (this.value &gt; 1 || this.value &lt; 0) {
        console &amp;&amp; console.warn("Invalid segmented bar value");
        return;
      }
      var bar = new Element('div', {
        'class' : 'segmented-bar',
        'title': Math.round(this.value * 100) + '%' || ''
      });
      var valueUnit = 1 / this.options.segments;
      for (var i = 0; i &lt; this.options.segments; ++i) {
        var segmentFill = 100 * Math.min(Math.max((this.value - i * valueUnit) / valueUnit, 0), 1);
        var segment = new Element('span', {
          'class': 'segmented-unit'
        });
        var segmentFillElement =  new Element('span', {
          'class': 'segmented-unit-fill'
        });
        segmentFillElement.setStyle({
          width: segmentFill + '%',
        });
        segment.insert(segmentFillElement);
        bar.insert(segment);
      }
      if(this.options.displayValue){
        bar.insert(' ' + Math.round(this.value * 100) + '%');
      }
      return bar;
    }
  });
  return PhenoTips;
})(PhenoTips || {});</code>
    </property>
    <property>
      <name>Segmented Bar</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>14</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d823f086-78f1-4019-8747-fcd55d2bd449</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function(XWiki) {
  // Start XWiki augmentation
  var widgets = XWiki.widgets = XWiki.widgets || {};

  widgets.SingleSubmitForm = Class.create({
    initialize: function(form) {
      this.form = form;
      this.form.observe('submit', this.lockForm.bindAsEventListener(this));
      // Caveat: submit such a form, get to a new page, go Back in browsing history -&gt; form disabled
      // Work around this problem by re-activating the form when the page is shown again
      window.addEventListener('pageshow', this.unlockForm.bindAsEventListener(this));
      // Caveat: sometimes, when the form is submitted, the navigation is confirmed in order to prevent unsaved data loss; but in this case, the form wasn't really successfully submitted -&gt; form disabled
      // Work around this problem by checking if a confirmation was requested, but this only works if this event listener is executed after the one requesting the confirmation
      window.addEventListener('beforeunload', function(event) {
          if (event.returnValue != '') {
            this.unlockForm()
          }
        }.bindAsEventListener(this));
      // In case the previous workaround didn't work, the form may be re-enabled when the data is saved
      document.observe('xwiki:actions:save', this.unlockForm.bindAsEventListener(this));
    },
    lockForm: function(event) {
      if (this.submitted) {
        event.stop();
      } else {
        this.submitted = true;
      }
    },
    unlockForm: function(event) {
      this.submitted = false;
    }
  });

  var init = function(event) {
    ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(element) {
      element.select("form.x-single-submit-form").each(function(form) {
        if (!form.__singleSubmit) {
          form.__singleSubmit = new XWiki.widgets.SingleSubmitForm(form);
        }
      });
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  document.observe("xwiki:dom:updated", init);

  // End XWiki augmentation.
  return XWiki;
}(XWiki || {}));
</code>
    </property>
    <property>
      <name>Prevent multiple clicks on forms that should only be submitted once</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>15</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d823f086-78f1-4019-8747-fcd55d2bd449</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function(XWiki) {
  // Start XWiki augmentation
  var widgets = XWiki.widgets = XWiki.widgets || {};

  widgets.UniquenessValidator = Class.create({
    initialize : function(input) {
      this.entityType = $('entity-type') &amp;&amp; $('entity-type').value;
      if (!this.entityType) {
        return;
      }
      this.input = input;
      this.valid = true;
      this.state = 'NEW';
      this.request = 0;
      this.value = input.value;
      this.serviceUrl = new XWiki.Document('CheckID', 'PhenoTips').getURL('get');
      if (!this.input.__validation) {
        this.input.__validation = new LiveValidation(this.input, {validMessage: '', wait : 500});
      }
      this.input.__validation.add(this.validate.bind(this));
    },
    check : function() {
      if (this.input.value != this.value) {
        this.value = this.input.value;
        this.state = 'CHECKING';
        new Ajax.Request(this.serviceUrl, {
          parameters : { outputSyntax: 'plain', eid: this.value, id: XWiki.Model.serialize(new XWiki.DocumentReference(XWiki.currentDocument.wiki, XWiki.currentDocument.space, XWiki.currentDocument.page)), entity : this.entityType},
          on200 : this.self.bindAsEventListener(this),
          on403 : this.empty.bindAsEventListener(this),
          on404 : this.available.bindAsEventListener(this),
          on409 : this.exists.bindAsEventListener(this),
          onComplete: this.responded.bindAsEventListener(this)
        });
      }
    },
    validate : function(value) {
      if (this.state == 'DONE') {
        this.value == value &amp;&amp; (this.valid || Validate.fail("$escapetool.javascript($services.localization.render('phenotips.PatientSheetCode.identifierExists'))"));
      }
      this.check();
      return true;
    },
    self : function() {
      this.valid = true;
    },
    available : function() {
      this.valid = true;
    },
    empty : function() {
      this.valid = false;
    },
    exists : function() {
      this.valid = false;
    },
    responded : function() {
      this.state = 'DONE';
      this.input.__validation.validate();
    }
  });

  var init = function(event) {
    ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(element) {
      element.select('input.check-unique, .external_id input').each(function(input) {
        if (!input.__uniqueness_validator) {
          input.__uniqueness_validator = new XWiki.widgets.UniquenessValidator(input);
        }
      });
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  document.observe("xwiki:dom:updated", init);

  // End XWiki augmentation.
  return XWiki;
}(XWiki || {}));
</code>
    </property>
    <property>
      <name>Uniqueness Validator</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>16</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>b0c48ba2-273f-4b63-814f-c166a9ab89d9</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.DetailsDialog = Class.create({
      initialize : function (termID, dataName, parentContainer, qualifierCount, qualifierDataClass) {
          this._container = parentContainer;
          this._dataName = dataName;
          this._termID = termID;
          this._elementID = termID + "_" + qualifierCount;
          this._qualifierMap = {};
          this._globalCount = qualifierCount;
          this._qualifierDataClass = qualifierDataClass;
          this._buildEmptyDialog();
      },

      /**
       * Generates a numeric select element.
       *
       * @param options {Object} an options object containing:
       *                         - "from" the starting value, as integer, for the numeric select
       *                         - "to" the final value, as integer, for the numeric select
       *                         - "step" the step size, as integer
       *                         - "majorStepSize" the major step size after which to generate a numeric range
       *                                           (e.g. majorStepSize = 10, means every 10th numeric element will be
       *                                           a range); if not specified, no ranges will be generated
       *                         - "defListItemClass" the css class for the definition list item
       *                         - "qualifierLabel" the label for the qualifier definition list element
       *                         - "qualifierName" the name of the qualifier definition list element
       *                         - "inputSourceClass" the css class for the input source element
       *                         - "displayedToStoredMapper" custom function mapping displayed value to how it should be stored
       *                         - "storedToDisplayedMapper" custom function mapping stored value to how it should be displayed
       * @return {*|DetailsDialog}
       */
      withNumericSelect : function (options) {
        // Define data ranges for the numeric select element.
        options = options || {};
        if (!options.from || !options.to) {
            return this;
        }
        var from = options.from;
        var to = options.to;
        var step = options.step || 1;
        var majorStepSize = options.majorStepSize || null;
        var inputSourceClass = options.inputSourceClass || "";
        var spanElem = new Element('span');
        var optionsHTML = '&lt;select name="' + this._dataName + '" class="' + inputSourceClass +
            '"&gt;&lt;option value=""&gt;&lt;/option&gt;';
        majorStepSize &amp;&amp; (optionsHTML += '&lt;option value="&lt;' + from + '"&gt;before ' + from + '&lt;/option&gt;');
        var counter = 1;
        var startRange = from;
        for (var num = from; num &lt;= to; num += step, counter++) {
            if (majorStepSize &amp;&amp; counter === majorStepSize) {
                counter = 0;
                optionsHTML += '&lt;option value="' + startRange + '-' + num + '"&gt;' + startRange + '-' + num + '&lt;/option&gt;';
                startRange = num + step;
            }
            optionsHTML += '&lt;option value="' + num + '"&gt;' + num + '&lt;/option&gt;';
        }
        majorStepSize &amp;&amp; (optionsHTML += '&lt;option value="&gt;' + to + '"&gt;after ' + to + '&lt;/option&gt;');
        optionsHTML += '&lt;/select&gt;'
        spanElem.innerHTML = optionsHTML;
        spanElem._getValue = this._defaultGetSelectValueFx(spanElem);
        spanElem._getNumericValue = options.numericApproximation;
        spanElem._setValue = this._setSelectValueFx(spanElem, options.storedToDisplayedMapper);
        spanElem._addValue = this._addSelectValueFx(spanElem, options.qualifierName, options.displayedToStoredMapper);
        options.inline = 'inline';
        this._qualifierDataClass &amp;&amp; options.qualifierName
            &amp;&amp; this._setPhenoTipsSelectFormData(spanElem, options.displayedToStoredMapper, this._qualifierDataClass + this._globalCount
            + "_", options.qualifierName);
        return this.withQualifierElement(spanElem, false, options);
      },

      /**
       * Generates a select element for an item array.
       *
       * @param options {Object} an options object containing:
       *                         - "data" the select list items, as array
       *                         - "defListItemClass" the css class for the definition list item
       *                         - "qualifierLabel" the label for the qualifier definition list element
       *                         - "qualifierName" the name of the qualifier definition list element
       *                         - "inputSourceClass" the css class for the input source element
       *                         - "displayedToStoredMapper" custom function mapping displayed value to how it should be stored
       *                         - "storedToDisplayedMapper" custom function mapping stored value to how it should be displayed
       */
      withItemSelect : function (options) {
          options = options || {};
          var inputSourceClass = options.inputSourceClass || "";
          var data = options.data || [""];
          var spanElem = new Element('span');
          var optionsHTML = '&lt;select name="' + this._dataName + '" class="' + inputSourceClass + '"&gt;';
          data.forEach(function (item) {
              optionsHTML += '&lt;option value="' + item + '"&gt;' + item + '&lt;/option&gt;';
          });
          optionsHTML += '&lt;/select&gt;';
          spanElem.innerHTML = optionsHTML;
          spanElem._getValue = this._defaultGetSelectValueFx(spanElem);
          spanElem._setValue = this._setSelectValueFx(spanElem, options.storedToDisplayedMapper);
          spanElem._addValue = this._addSelectValueFx(spanElem, options.qualifierName, options.displayedToStoredMapper);
          options.inline = 'inline';
          this._qualifierDataClass &amp;&amp; options.qualifierName
              &amp;&amp; this._setPhenoTipsSelectFormData(spanElem, options.displayedToStoredMapper, this._qualifierDataClass + this._globalCount
              + "_", options.qualifierName);
          return this.withQualifierElement(spanElem, false, options);
      },

      /**
       * Generates a list with radio button elements for each item in provided array.
       *
       * @param collapsible true iff the qualifier element is collapsible
       * @param options {Object} an options object containing:
       *                         - "data" the select list items, as array
       *                         - "defListItemClass" the css class for the definition list item
       *                         - "qualifierLabel" the label for the qualifier definition list element
       *                         - "qualifierName" the name of the qualifier definition list element
       *                         - "inputSourceClass" the css class for the input source element
       *                         - "displayedToStoredMapper" custom function mapping displayed value to how it should be stored
       *                         - "storedToDisplayedMapper" custom function mapping stored value to how it should be displayed
       */
      withRadioList : function (collapsible, options) {
          options = options || {};
          var _this = this;
          var inputSourceClass = options.inputSourceClass || "";
          var data = options.data || [];
          var spanElem = new Element('span');
          var radioHTML = '&lt;ul&gt;';
          data.forEach(function (item) {
              var inputId = inputSourceClass + "_" + _this._elementID + "_" + item;
              radioHTML +=
                  '&lt;li class="term-entry"&gt;' +
                  '&lt;input class="' + inputSourceClass + '" id="' + inputId + '" name="' + _this._dataName + '_' +
                  _this._elementID + '_' + options.qualifierName + '" title="' + item + '" type="radio"&gt;' +
                  '&lt;label for="' + inputId + '" title="' + item + '"&gt;' + item + '&lt;/label&gt;' +
                  '&lt;/li&gt;'
          });
          radioHTML += '&lt;/ul&gt;';
          spanElem.innerHTML = radioHTML;
          spanElem.down("li.term-entry").down('input').checked = true;
          spanElem._getValue = this._getRadioValueFx(spanElem, options.qualifierName);
          spanElem._setValue = this._setRadioValueFx(spanElem, options.storedToDisplayedMapper, collapsible);
          spanElem._addValue = this._addRadioValueFx(spanElem, options.qualifierName, options.displayedToStoredMapper);
          this._qualifierDataClass &amp;&amp; options.qualifierName
              &amp;&amp; this._setPhenoTipsRadioFormData(spanElem, options.displayedToStoredMapper, this._qualifierDataClass + this._globalCount
              + "_", options.qualifierName);
          return this.withQualifierElement(spanElem, collapsible, options);
      },

      /**
       * Generates and adds a text-box.
       *
       * @param collapsible true iff the qualifier element is collapsible
       * @param options {Object} an options object containing:
       *                         - "defListItemClass" the css class for the definition list item
       *                         - "qualifierLabel" the label for the qualifier definition list element
       *                         - "qualifierName" the name of the qualifier definition list element
       *                         - "inputSourceClass" the css class for the input source element
       *                         - "displayedToStoredMapper" custom function mapping displayed value to how it should be stored
       *                         - "storedToDisplayedMapper" custom function mapping stored value to how it should be displayed
       */
      withTextBox : function (collapsible, options) {
          var inputSourceClass = options &amp;&amp; options.inputSourceClass || "";
          var spanElem = new Element('span');
          var tbName = (this._qualifierDataClass &amp;&amp; options.qualifierName)
              ? this._qualifierDataClass + this._globalCount + "_" + options.qualifierName
              : this._dataName;
          spanElem.innerHTML = '&lt;textarea class="qualifier-notes ' + inputSourceClass + '" name="' + tbName + '"&gt;'
              + '&lt;/textarea&gt;';
          spanElem._getValue = this._getTextboxValueFx(spanElem);
          spanElem._setValue = this._setTextboxValueFx(spanElem, options.storedToDisplayedMapper, collapsible);
          spanElem._addValue = this._addTextboxValueFx(spanElem, options.qualifierName, options.displayedToStoredMapper);
          return this.withQualifierElement(spanElem, collapsible, options);
      },

      /**
       * Adds a date picker.
       *
       * @param collapsible true iff the qualifier element is collapsible
       * @param options {Object} an options object containing:
       *                         - "defListItemClass" the css class for the definition list item
       *                         - "qualifierLabel" the label for the qualifier definition list element
       *                         - "qualifierName" the name of the qualifier definition list element
       *                         - "displayedToStoredMapper" custom function mapping displayed value to how it should be stored
       *                         - "storedToDisplayedMapper" custom function mapping stored value to how it should be displayed
       */
      withDatePicker : function(collapsible, options) {
          var spanElem = new Element('span', {'class' : 'fuzzy-date-picker'});
          var dpJsonName = (this._qualifierDataClass &amp;&amp; options.qualifierName)
              ? this._qualifierDataClass + this._globalCount + "_" + options.qualifierName
              : this._dataName + '_' + this._elementID + '_' + (options.qualifierName || "");
          var dpName = (this._qualifierDataClass &amp;&amp; options.approxQualifierName)
              ? this._qualifierDataClass + this._globalCount + "_" + options.approxQualifierName
              : this._dataName + '_' + this._elementID + '_' + (options.approxQualifierName || "");
          var dateInput = new Element('input', {'class' : 'fuzzy-date hidden', 'name' : dpName});
          var fuzzyInput = new Element('input', {'id' : dpName + '_entered', 'name' : dpJsonName, 'class' : 'fuzzy-date-json hidden'})
          spanElem.insert(dateInput).insert(fuzzyInput);
          var fuzzyPicker = dateInput.__datePicker = new PhenoTips.widgets.FuzzyDatePicker(dateInput, "YMD");
          // Hack :(
          fuzzyPicker.__fuzzyInput = fuzzyInput;
          fuzzyPicker.__recordBoth = true;
          options.trackLastEnteredDate &amp;&amp; this._enableLastDateEnteredTracking(fuzzyPicker, spanElem, fuzzyInput, new Element('span', {'class' : this._dataName + '-paste-last-date-button', 'title' : "$!escapetool.javascript($services.localization.render('phenotips.widgets.detailsDialog.datePicker.pasteButton.tooltip'))"}).update('&lt;i class="fa fa-paste"&gt;&lt;/i&gt;'));
          spanElem._getValue = this._getDatePickerValueFx(fuzzyInput);
          spanElem._setValue = this._setDatePickerValueFx(fuzzyPicker, spanElem, options.storedToDisplayedMapper, collapsible);
          spanElem._addValue = this._addDatePickerValueFx(spanElem, options.qualifierName, options.approxQualifierName, options.displayedToStoredMapper);
          options.inline = 'inline';
          return this.withQualifierElement(spanElem, collapsible, options);
      },

      /**
       * Adds a custom qualifier definition list element.
       *
       * @param element {Element} the custom data collection element to add (e.g. a textbox)
       * @param collapsible {Boolean} true iff this is a collapsible element
       * @param options {Object} an options object containing:
       *                         - "defListItemClass" the css class for the definition list item
       *                         - "qualifierLabel" the label for the qualifier definition list element
       *                         - "qualifierName" the name of the qualifier definition list element
       *                         - "inline" contains the inline class name iff element is inline, not specified otherwise
       * @return {DetailsDialog}
       */
      withQualifierElement: function(element, collapsible, options) {
          var defListItemClass = options.defListItemClass || "";
          var qualifierLabel = options.qualifierLabel || "";
          var qualifierName = options.qualifierName || "";
          var dtElem = new Element('dt');
          var ddElem = new Element('dd');
          dtElem.addClassName(defListItemClass);
          if (options.inline) {
              dtElem.addClassName(options.inline);
              ddElem.addClassName(options.inline);
          }
          ddElem.addClassName(defListItemClass);
          var selectedValue;
          if (collapsible) {
              dtElem.addClassName("collapsible");
              ddElem.addClassName("collapsed");
              dtElem.insert('&lt;span class="collapse-button"&gt;►&lt;/span&gt;');
              var termEntry = element.down("li.term-entry");
              var termInput = termEntry &amp;&amp; termEntry.down('input');

              var selectedTitle = termInput &amp;&amp; termInput.title || "";
              selectedValue = '&lt;span class="selected-value"&gt;' + selectedTitle + '&lt;/span&gt;';
              ddElem.hide();
          }
          (!qualifierLabel &amp;&amp; dtElem.addClassName('hidden')) || dtElem.insert('&lt;label&gt;' + qualifierLabel + '&lt;/label&gt;');
          selectedValue &amp;&amp; dtElem.insert(selectedValue);
          ddElem.insert(element);
          this._attachSummaryFx(element, dtElem, ddElem);
          this._qualifierList.insert(dtElem).insert(ddElem);
          qualifierName &amp;&amp; (this._qualifierMap[qualifierName] = element);
          return this;
      },

      /**
       * Adds a delete action element to the dialog.
       *
       * @return {DetailsDialog} self
       */
      withDeleteAction : function (ajaxAction) {
          this._deleteAction = new Element('span',
              {'id' : 'delete_' + this._elementID, 'class' : this._dataName + '-dialog-delete action-done clickable'}).update("✖");
          this._termDetails.insert({top : this._deleteAction});
          this._attachOnDeleteListener(this._deleteAction, ajaxAction);
          this._deleteAction.addClassName("hidden");
          return this;
      },

      /**
       * Attaches the dialog to the parent container (this._container).
       *
       * @return {DetailsDialog} self
       */
      attach: function() {
          this._container.insert(this._termDetails);
          return this;
      },

      /**
       * Returns the constructed dialog element.
       *
       * @return {Element|*} the constructed dialog element
       */
      getDialog: function() {
          return this._termDetails;
      },

      /**
       * Gets the qualifier ID.
       *
       * @return {String} the qualifier ID
       */
      getID: function() {
          return this._elementID;
      },

      /**
       * Gets the values for all the input sources in the dialog.
       *
       * @return {Object} containing the custom element name to value mapping
       */
      getValues: function() {
          var values = {};
          for (var key in this._qualifierMap) {
              if (this._qualifierMap.hasOwnProperty(key)) {
                var element = this._qualifierMap[key];
                element._addValue(values);
              }
          }
          return values;
      },

      /**
       * Sets values for the dialog.
       *
       * @param values {Object} the values are key-value pairs, where the keys should be the same as in _qualifierMap
       */
      setValues : function (values) {
          if (!values) { return; }
          for (var key in values) {
              if (values.hasOwnProperty(key)) {
                  var elem = this._qualifierMap[key];
                  if (elem) {
                      elem._setValue(values[key]);
                  }
              }
          }
          return this;
      },

      /**
       * Blurs the dialog.
       */
      blur: function() {
          if (this._termDetails.hasClassName('focused')) {
              this._termDetails.removeClassName('focused');
              this._termDetails.addClassName('blurred');
              this._deleteAction &amp;&amp; this._deleteAction.addClassName("hidden");
              this._editAction &amp;&amp; this._editAction.removeClassName("hidden");
              this._toggleSummarize();
              if(this._termDetails.select("dd:not(.hidden)").filter(function(x) { return x.visible(); }).size() &lt;= 0) {
                this._termDetails.insert({'top': new Element('span', {'class' : 'no-data'}).insert("$!escapetool.javascript($services.localization.render('phenotips.widgets.detailsDialog.noAdditionalInfo'))")});
                var containerDiv = this._termDetails.down('div.term-details');
                containerDiv &amp;&amp; containerDiv.hide();
              }
          }
      },

      /**
       * Focuses the dialog.
       */
      focus: function() {
          if (!this._termDetails.hasClassName('focused')) {
              this._termDetails.removeClassName('blurred');
              this._termDetails.addClassName('focused');
              this._deleteAction &amp;&amp; this._deleteAction.removeClassName("hidden");
              this._editAction &amp;&amp; this._editAction.addClassName("hidden");
              this._toggleSummarize();
              var noDataSpan = this._termDetails &amp;&amp; this._termDetails.down('span.no-data');
              if (noDataSpan) {
                noDataSpan.remove();
                var containerDiv = this._termDetails.down('div.term-details');
                containerDiv &amp;&amp; containerDiv.show();
              }
          }

      },

      _enableLastDateEnteredTracking : function(fuzzyPicker, spanElem, fuzzyInput, pasteIcon) {
          if (fuzzyPicker &amp;&amp; spanElem &amp;&amp; fuzzyInput &amp;&amp; pasteIcon) {
              spanElem.insert(pasteIcon);
              var _this = this;
              var selectCallback = function() {
                  fuzzyPicker.updateDate();
                  var newDateVal = fuzzyInput.value;
                  document.lastPickedDate = newDateVal;
                  Event.fire(document, _this._dataName + ":dialog:dateselected", {"date" : newDateVal, "dialog" : _this.getDialog(), "selector" : pasteIcon.className});
              };
              fuzzyPicker.yearSelector.onSelect(selectCallback);
              fuzzyPicker.monthSelector.onSelect(selectCallback);
              fuzzyPicker.daySelector.onSelect(selectCallback);

              pasteIcon.observe('click', function(event) {
                  var dateJSON = document.lastPickedDate &amp;&amp; JSON.parse(document.lastPickedDate);
                  if (dateJSON) {
                      spanElem._setValue(dateJSON);
                  }
              });
          }
      },

      _setPhenoTipsSelectFormData : function(spanElem, toStored, qualifierClass, qualifierName) {
          var inputStrElem = new Element('input', {'class': 'string-select-val', 'type': 'hidden'});
          var inputNumElem;
          if (spanElem._getNumericValue) {
              inputNumElem = new Element('input', {'class': 'to-numeric-select-val', 'type': 'hidden'});
              spanElem.insert(inputNumElem);
          }
          spanElem.insert(inputStrElem);
          var selectElem = spanElem.down('select');
          var formattedVal = function () { return toStored ? toStored(spanElem._getValue()) : spanElem._getValue(); };
          var value = formattedVal();
          this._setInput(inputStrElem, value, qualifierClass + qualifierName);
          inputNumElem &amp;&amp; this._setInput(inputNumElem, spanElem._getNumericValue(value), qualifierClass + "numeric" + qualifierName.charAt(0).capitalize() + qualifierName.substr(1));
          var _this = this;
          selectElem.observe('change', function(event) {
              var value = formattedVal();
              _this._setInput(inputStrElem, value, null);
              inputNumElem &amp;&amp; _this._setInput(inputNumElem, spanElem._getNumericValue(value), null);
          });
      },

      _setPhenoTipsRadioFormData : function(spanElem, toStored, qualifierClass, qualifierName) {
          var inputStrElem = new Element('input', {'class': 'string-radio-val', 'type': 'hidden'});
          spanElem.insert(inputStrElem);
          var ulElem = spanElem.down('ul');
          var formattedVal = function () { return toStored ? toStored(spanElem._getValue()) : spanElem._getValue(); };
          var value = formattedVal();
          this._setInput(inputStrElem, value, qualifierClass + qualifierName);
          var _this = this;
          ulElem.observe('change', function(event) {
              var value = formattedVal();
              _this._setInput(inputStrElem, value, null);
          });
      },

      _setInput : function(input, value, name) {
          input.value = value;
          name &amp;&amp; (input.name = name);
      },

      /**
       * Attaches a function for creating a summary of the element.
       *
       * @param element the element holding the qualifier input element being summarized
       * @param dtElem the qualifier item title element
       * @param ddElem the qualifier item value element
       * @private
       */
      _attachSummaryFx : function (element, dtElem, ddElem) {
          var _this = this;
          element._toggleSummarize = function () {
              var isCollapsed = ddElem.hasClassName('collapsed');
              if (ddElem.visible() || (dtElem.visible() &amp;&amp; isCollapsed)) {
                  _this._showSummary(dtElem, ddElem, element._getValue());
              } else {
                  _this._showEditable(dtElem, ddElem);
              }
          };
      },

      /**
       * Triggers the display of the summary qualifier item version.
       *
       * @param dtElem the qualifier item title element
       * @param ddElem the qualifier item value element
       * @param val the value that was entered for the qualifier element
       * @private
       */
      _showSummary : function (dtElem, ddElem, val) {
          ddElem.hide();
          // If some value was entered for the qualifier, create the summary.
          if (val.length &gt; 0 &amp;&amp; val !== "Unknown") {
              var dtSummary;
              var ddSummary;
              if (dtElem.hasClassName('collapsible')) {
                  dtElem.hide();
                  dtSummary = '&lt;dt class="' + dtElem.className + ' preview"&gt;' + dtElem.down('label').innerHTML + '&lt;/dt&gt;';
                  dtElem.insert({'after' : dtSummary});
              }
              ddSummary = '&lt;dd class="' + ddElem.className + ' preview"&gt;' + val + '&lt;/dd&gt;';
              ddElem.insert({'after' : ddSummary});
          } else {
              dtElem.hide();
          }
      },

      /**
       * Triggers the display of the editable qualifier item version.
       *
       * @param dtElem the qualifier item title element
       * @param ddElem the qualifier item value element
       * @private
       */
      _showEditable : function (dtElem, ddElem) {
          dtElem.show();
          // Show only if not collapsed.
          ddElem &amp;&amp; !ddElem.hasClassName('collapsed') &amp;&amp; ddElem.show();
          var dtSummary;
          var ddSummary;
          // Remove the summary elements.
          dtSummary = dtElem.next('dt.preview');
          ddSummary = ddElem.next('dd.preview');
          dtSummary &amp;&amp; dtSummary.remove();
          ddSummary &amp;&amp; ddSummary.remove();
      },

      /**
       * A function for retrieving the selected select list value from the element.
       *
       * @param element the parent element holding the select list
       * @return {Function} a function for retrieving the selected value from the select list element
       * @private
       */
      _defaultGetSelectValueFx : function (element) {
          return function () {
              var select = element.down('select');
              return select.selectedIndex &gt;= 0 ? select.options[select.selectedIndex].value : "";
          };
      },

      /**
       * A function for setting a selected select list value.
       *
       * @param element the parent element holding the select list
       * @param valueMapperFx the custom value mapper function; null if value should be used as is
       * @return {Function} a function for selecting the provided value in the select list element
       * @private
       */
      _setSelectValueFx : function (element, valueMapperFx) {
          return function (value) {
              element.down('select').value = valueMapperFx ? valueMapperFx(value) : value;
              var hiddenInput = element.down('input[type="hidden"].string-select-val');
              hiddenInput &amp;&amp; (hiddenInput.value = value);
              var hiddenNumericInput = element.down('input[type="hidden"].to-numeric-select-val');
              hiddenNumericInput &amp;&amp; (hiddenNumericInput.value = element._getNumericValue(value));
          };
      },

      /**
       * A function for adding a selected select list value to the summary {Object}.
       *
       * @param element the parent element holding the select list
       * @param qualifierName the user-provided qualifier name
       * @param valueMapperFx the custom value mapper function; null if value should be used as is
       * @return {Function} a function for adding the selected select list value to the summary {Object}
       * @private
       */
      _addSelectValueFx : function (element, qualifierName, valueMapperFx) {
          return function (values) {
              if (qualifierName) {
                  values[qualifierName] = valueMapperFx ? valueMapperFx(element._getValue()) : element._getValue();
                  element._getNumericValue &amp;&amp; (values["numeric" + qualifierName.charAt(0).capitalize() + qualifierName.substr(1)] = element._getNumericValue(element._getValue()));
              }
          };
      },

      /**
       * A function for retrieving the selected radio list value from the element.
       *
       * @param element the parent element holding the radio list
       * @param qualifierName the user-provided qualifier name
       * @return {Function} a function for retrieving the selected value from the radio list element
       * @private
       */
      _getRadioValueFx: function(element, qualifierName) {
          var _this = this;
          return function() {
            return element.down('input[name="' + _this._dataName + '_' + _this._elementID + '_' + qualifierName
                + '"]:checked').title;
          };
      },

      /**
       * A function for setting a selected radio list value.
       *
       * @param element the parent element holding the radio list
       * @param valueMapperFx the custom value mapper function; null if value should be used as is
       * @param collapsible true iff the element is collapsible
       * @return {Function} a function for selecting the provided value in the radio list element
       * @private
       */
      _setRadioValueFx : function (element, valueMapperFx, collapsible) {
          var _this = this;
          return function (value) {
              var checkedTitle = valueMapperFx ? valueMapperFx(value) : value;
              var toUncheck = element.down('input:checked');
              toUncheck &amp;&amp; (toUncheck.checked = false);
              var selection = element.down('input[title="' + checkedTitle + '"]');
              if (!selection) { return; }
              var hiddenInput = element.down('input[type="hidden"].string-radio-val');
              hiddenInput &amp;&amp; (hiddenInput.value = value);
              selection.checked = true;
              var ddElem = selection.up('dd');
              var dtElem = ddElem &amp;&amp; ddElem.previous('dt');
              if (dtElem) {
                  _this._updateLabelWithSelection(selection, dtElem);
                  collapsible &amp;&amp; _this._collapseElem(dtElem, ddElem);
              }
          };
      },

      /**
       * A function for adding a selected radio list value to the summary {Object}.
       *
       * @param element the parent element holding the radio list
       * @param qualifierName the user-provided qualifier name
       * @param valueMapperFx the custom value mapper function; null if value should be used as is
       * @return {Function} a function for adding the selected radio list value to the summary {Object}
       * @private
       */
      _addRadioValueFx: function(element, qualifierName, valueMapperFx) {
          return function(values) {
              var fieldName = qualifierName || null;
              if (fieldName) {
                  values[fieldName] = valueMapperFx ? valueMapperFx(element._getValue()) : element._getValue();
              }
          };
      },

      /**
       * A function for retrieving an input value.
       *
       * @param inputElem the input element
       * @return {Function} a function for retrieving the value from the input element
       * @private
       */
      _getDatePickerValueFx: function(inputElem) {
          return function() {
              var data = JSON.parse(inputElem.value || '{}');
              var year = data.range ? (data.year ? data.year + "s" : "") : data.year;
              var month = data.month;
              var day = data.day;
              var dateStr = "";
              if (!year) { return dateStr; }
              dateStr = dateStr + year;
              if (!month) { return dateStr; }
              dateStr = dateStr + "-" + month.toString().padStart(2, '0');
              return day ? dateStr + "-" + day.toString().padStart(2, '0') : dateStr;
          };
      },

      _setDatePickerValueFx: function(fuzzyPicker, spanElem, valueMapperFx, collapsible) {
          var _this = this;
          return function (value) {
              if (value) {
                  var year = (value.range ? (value.year ? value.year + "s" : "") : value.year);
                  year &amp;&amp; (spanElem.down('select.year').value = year);
                  value.month &amp;&amp; (spanElem.down('select.month').value = value.month);
                  value.day &amp;&amp; (spanElem.down('select.day').value = value.day);
                  fuzzyPicker.onProgrammaticUpdate();
              }
          };
      },

      _addDatePickerValueFx: function (element, qualifierName, approxQualifierName, valueMapperFx) {
          return function (values) {
              if (qualifierName) {
                  var dateElem = element.down('input.hidden.fuzzy-date-json');
                  var date = dateElem &amp;&amp; dateElem.value || "";
                  var dateJsonElem = element.down('input.hidden.fuzzy-date-json');
                  var dateJson = dateJsonElem &amp;&amp; dateJsonElem.value || "";
                  approxQualifierName &amp;&amp; (values[approxQualifierName] = valueMapperFx ? valueMapperFx(date) : date);
                  qualifierName &amp;&amp; (values[qualifierName] = JSON.parse(dateJson));
              }
          };
      },

      /**
       * A function for retrieving the text box value from the textarea element.
       *
       * @param element the parent element holding the text box
       * @return {Function} a function for retrieving the value from the textarea element
       * @private
       */
      _getTextboxValueFx: function(element) {
          return function() {
              return element.down('textarea').value;
          };
      },

      /**
       * A function for setting a textarea value.
       *
       * @param element the parent element holding the text box
       * @param valueMapperFx the custom value mapper function; null if value should be used as is
       * @param collapsible true iff the element is collapsible
       * @return {Function} a function for setting a provided value to the textarea element
       * @private
       */
      _setTextboxValueFx: function(element, valueMapperFx, collapsible) {
          return function(value) {
              element.down('textarea').value = valueMapperFx ? valueMapperFx(value) : value;
          };
      },

      /**
       * A function for adding a textarea value to the summary {Object}.
       *
       * @param element the parent element holding the text box
       * @param qualifierName the user-provided name of the qualifier being processed
       * @param valueMapperFx the custom value mapper function; null if value should be used as is
       * @return {Function} a function for adding the textarea value to the summary {Object}
       * @private
       */
      _addTextboxValueFx : function (element, qualifierName, valueMapperFx) {
          return function (values) {
              var fieldName = qualifierName || null;
              if (fieldName) {
                  values[fieldName] = valueMapperFx ? valueMapperFx(element.down('textarea').value) : element.down('textarea').value;
              }
          };
      },

      /**
       * Toggles the summary/edit mode for the dialog.
       * @private
       */
      _toggleSummarize: function() {
          for (var key in this._qualifierMap) {
              if (this._qualifierMap.hasOwnProperty(key)) {
                  var elem = this._qualifierMap[key];
                  elem._toggleSummarize();
              }
          }
      },

      /**
       * Builds an empty dialog where qualifiers will be added.
       * @private
       */
      _buildEmptyDialog : function () {
          this._termDetails = new Element('div', {'class' : 'summary-item focused'});

          var hiddenInput = this._qualifierDataClass
              ? '&lt;input id="' + this._elementID + '" type="hidden" value="' + this._termID + '" name="' + this._qualifierDataClass + this._globalCount + '_' + this._dataName + '"&gt;'
              : '&lt;input id="' + this._elementID + '" type="hidden" value="' + this._elementID + '"&gt;';
          this._termDetails.innerHTML = hiddenInput +
              '&lt;div id="term_details_' + this._elementID + '" class="term-details"&gt;' +
                  '&lt;dl&gt;&lt;/dl&gt;' +
                  '&lt;div class="clearfloats"&gt;&lt;/div&gt;' +
              '&lt;/div&gt;';

          // Add the edit action icon.
          this._editAction = new Element('span', {'id' : 'edit_' + this._elementID, 'class' : this._dataName + '-dialog-edit action-edit fa fa-pencil clickable'});
          this._editAction.addClassName("hidden");
          this._termDetails.insert({top : this._editAction});

          this._qualifierList = this._termDetails.down('dl');
          // Attach listeners for the collapse action.
          this._attachQualifierStateChangeListener();
      },

      /**
       * Attaches a listener for clicks on the dialog delete button.
       * @param deleteAction
       * @param ajaxAction
       * @private
       */
      _attachOnDeleteListener : function (deleteAction, ajaxDeleteAction) {
          var _this = this;
          var deleteElements = function() {
              _this._termDetails.remove();
              _this._qualifierMap = {};
              Event.fire(_this._container, _this._dataName + ':dialog:deleted', {'id' : _this._elementID});
          };
          deleteAction.observe('click', function () {
              if (ajaxDeleteAction) {
                  var url =  ajaxDeleteAction.replace(/([&amp;?]classid=)(xXx__COUNT_TEMPLATE__xXx)([&amp;$])/, "$1" + _this._globalCount + "$3");
                  _this._sendRemoveRequest(deleteAction, url, deleteElements);
              } else {
                  deleteElements()
              }
          });
      },

      _sendRemoveRequest : function (deleteTrigger, ajaxDeleteAction, deleteElementsFx) {
          if (deleteTrigger.disabled) {
              return false;
          }
          new Ajax.Request(ajaxDeleteAction, {
              onCreate : function() {
                  deleteTrigger.disabled = true;
              },
              onSuccess : function () {
                  deleteElementsFx();
              }
          });
      },

      /**
       * Attaches an onclick listener to observe click events on specified elements.
       * @private
       */
      _attachQualifierStateChangeListener: function() {
          var _this = this;
          this._termDetails.observe('click', function(event) {
              var elem = event.target.up();
              var ddElem;
              // The on-click event is to collapse/un-collapse an element
              if (elem &amp;&amp; elem.hasClassName('collapsible')) {
                  ddElem = elem.next('dd');
                  ddElem &amp;&amp; _this._toggleCollapsed(elem, ddElem);
              // The on-click event is to select some list item
              } else if (elem &amp;&amp; elem.hasClassName('term-entry')) {
                  ddElem = elem.up('dd');
                  ddElem &amp;&amp; _this._updateLabelWithSelection(elem.down('input'), ddElem.previous('dt'));
              }
          });
      },

      /**
       * Updates the definition list element label with the current selection.
       *
       * @param elInput the current selection made by user
       * @param dtElem the element holding the label
       * @private
       */
      _updateLabelWithSelection: function(elInput, dtElem) {
          var currentValHolder = dtElem &amp;&amp; dtElem.down('span.selected-value');
          if (currentValHolder) {
              var selectedValue = elInput &amp;&amp; elInput.title || "";
              currentValHolder.update(selectedValue);
              if (selectedValue === "Unknown" || selectedValue === "") {
                  currentValHolder.removeClassName("selected");
              } else {
                  currentValHolder.addClassName("selected");
              }
          }
      },

      /**
       * Toggles collapsed for a collapsible element.
       *
       * @param dtElem the element containing the collapse button
       * @param ddElem the element containing the data to be collapsed
       * @private
       */
      _toggleCollapsed: function(dtElem, ddElem) {
          if (ddElem.hasClassName('collapsed')) {
              this._expandElem(dtElem, ddElem);
          } else {
              this._collapseElem(dtElem, ddElem);
          }
      },

      /**
       * Collapse the collapsible element.
       *
       * @param dtElem the label element
       * @param ddElem the value element
       * @private
       */
      _collapseElem: function(dtElem, ddElem) {
          var collapseSpan = dtElem.down('span.collapse-button');
          ddElem.addClassName('collapsed');
          collapseSpan.innerHTML = "►";
          ddElem.hide()
      },

      /**
       * Expand the collapsible element.
       *
       * @param dtElem the label element
       * @param ddElem the value element
       * @private
       */
      _expandElem: function(dtElem, ddElem) {
          var collapseSpan = dtElem.down('span.collapse-button');
          ddElem.removeClassName('collapsed');
          collapseSpan.innerHTML = "▼";
          ddElem.show();
      }
  });

  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Details Dialog</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>17</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>435aac82-d4e1-4516-b628-641c60fcabbe</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function (PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  widgets.DetailsDialogGroup = Class.create({
      initialize : function (dataName, options) {
          this._dataName = dataName;
          // If this._allowMultiDialogs is true, more than one qualifier dialog can be added per term.
          this._qualifierNo = 0;

          var groupOptions = options || {};
          this._termDeleteAction = groupOptions.termDeleteAction;
          this._allowMultiDialogs = groupOptions.allowMultiDialogs || false;
          this._disableTermDelete = groupOptions.disableTermDelete || false;
          this._doneTypingInterval = groupOptions.doneTypingInterval || 500;

          this._dialogOptions = [];

          this._dialogMap = {};

          this._crtFocus = null;

          // Builds an empty container for the term.
          this._buildEmptyContainer();

          // Attach listeners.
          this._addDialogDeletedListener();
          this._addDialogFocusManagers();
          this._attachKeyUpObserver();
      },

      getID : function () {
          return this._termID;
      },

      /**
       * Returns the constructed dialog group element for the term.
       *
       * @return {Element|*} the dialog group element for the term
       */
      get : function () {
          return this._qualifiersContainer;
      },

      /**
       * Associates the dialog group with some term.
       *
       * @param label {String} the label for the term; if null or empty, will be set to ID
       * @param termID {String} the ID for the term; must not be null or empty
       * @param tooltip the class name of the tooltip to be created; null/undefined if no tooltip should be attached
       * @param nonselectable {Boolean} set to true iff the label should not be selectable, and should only be present iff term can be applied to patient
       * @return {DetailsDialogGroup} self
       */
      withLabel : function (label, termID, tooltip, nonselectable) {
          var trimmedID = (termID &amp;&amp; termID.strip()) || "";
          var trimmedLabel = (label &amp;&amp; label.strip()) || "";
          this._termID = trimmedID;
          this._label = trimmedLabel || trimmedID;
          this._nonselectable = nonselectable;
          if (this._termID === "") {
              return this;
          }
          this._qualifiersContainer.id = this._dataName + "_" + this._termID;
          var termData = this._qualifiersContainer.down('span.term-data');
          var termDataHTML = '&lt;label class="label-field"&gt;';
          termDataHTML += '&lt;input id="status_' + this._termID + '" class="term-status" name="' + this._dataName +
              '" type="checkbox"&gt; ';
          var hiddenInputs = this._getHiddenTermInputs();
          termDataHTML += this._label + '&lt;/label&gt;' + hiddenInputs;
          termData.innerHTML = termDataHTML;
          nonselectable &amp;&amp; this._disableCheckBox(termData);
          this._addTooltip(tooltip);
          this._initButtons();
          return this;
      },

      /**
       * If a global qualifier count function is provided, then use it to count qualifiers instead of this._qualifierNo.
       *
       * @param getGlobalCountFx {Function} a function that retrieves the global qualifier count
       */
      withGlobalQualifierCount : function (getGlobalCountFx, setGlobalCountFx) {
          this._globalQualifierCount = getGlobalCountFx;
          this._setGlobalQualifierCount = setGlobalCountFx;
          return this;
      },

      withTermDataMarker : function (termDataMarkerClass) {
          this._termDataClass = termDataMarkerClass;
          return this;
      },

      withQualifierDataMarker : function (qualifierDataMarkerClass) {
          this._qualifierDataClass = qualifierDataMarkerClass;
          return this;
      },

      dialogsAddNumericSelect : function(options) {
          var addNumericSelect = function (currentDialog) {
              currentDialog.withNumericSelect(options);
          };
          this._dialogOptions.push(addNumericSelect);
          return this;
      },

      dialogsAddItemSelect : function (options) {
          var addItemSelect = function (currentDialog) {
              currentDialog.withItemSelect(options);
          };
          this._dialogOptions.push(addItemSelect);
          return this;
      },

      dialogsAddRadioList : function (collapsible, options) {
          var addRadioList = function (currentDialog) {
              currentDialog.withRadioList(collapsible, options);
          };
          this._dialogOptions.push(addRadioList);
          return this;
      },

      dialogsAddDatePicker : function (collapsible, options) {
          var addDatePicker = function (currentDialog) {
              currentDialog.withDatePicker(collapsible, options);
          };
          this._dialogOptions.push(addDatePicker);
          return this;
      },

      dialogsAddTextBox : function (collapsible, options) {
          var addTextBox = function (currentDialog) {
              currentDialog.withTextBox(collapsible, options);
          };
          this._dialogOptions.push(addTextBox);
          return this;
      },

      dialogsAddCustomElement : function (element, collapsible, options) {
          var addCustomElement = function (currentDialog) {
              currentDialog.withQualifierElement(element, collapsible, options);
          };
          this._dialogOptions.push(addCustomElement);
          return this;
      },

      dialogsAddDeleteAction : function (ajaxAction) {
          var addDeleteAction = function (currentDialog) {
              currentDialog.withDeleteAction(ajaxAction);
          };
          this._dialogOptions.push(addDeleteAction);
          return this;
      },

      clearDialogOptions: function() {
          this._dialogOptions = [];
          return this;
      },

      /**
       * Returns true iff status input is marked as selected, false otherwise.
       *
       * @return {Boolean}
       */
      isAffected : function () {
          var status = this._qualifiersContainer.down('input.term-status');
          // If status checkbox is not present, that means that term is assumed to be "affected" by default.
          return !status || status.checked;
      },

      /**
       * Sets as affected and adds an empty qualifier dialog.
       *
       * @param silent true iff this should be performed silently, with no events fired
       */
      initAffected : function (silent) {
          this.affected(true);
          this.addDialog(silent, this._globalQualifierCount &amp;&amp; this._globalQualifierCount());
          this._allowMultiDialogs &amp;&amp; this._addDetailsClickListener();
      },

      /**
       * Sets as affected iff status is true, unaffected otherwise.
       *
       * @param status true iff affected, false otherwise
       */
      affected : function (status) {
          var statusElem = this._qualifiersContainer.down('input.term-status');
          statusElem &amp;&amp; (statusElem.checked = status);
      },

      /**
       * Gets and returns all the qualifier values that were entered.
       *
       * @return {{id: (String|*|string), label: (String|*|string), affected: (*|Boolean), qualifiers: Array}}
       */
      getValues: function() {
          var qualifiers = [];
          for (var key in this._dialogMap) {
              if (this._dialogMap.hasOwnProperty(key)) {
                  qualifiers.push(this._dialogMap[key].getValues());
              }
          }
        return {
            "id" : this._termID,
            "label" : this._label,
            "affected" : this.isAffected(),
            "qualifiers" : qualifiers
          };
      },

      /**
       * Sets the qualifiers to the values provided.
       *
       * @param values the qualifier values to set
       * @param fireEvents {Boolean} values are set silently by default; set to true if this should not be the case
       */
      setValues : function (values, fireEvents) {
          // If no values provided, do nothing.
          if (!values) { return; }
          this._clearDetails();
          // Wrong term.
          if (values.id !== undefined &amp;&amp; this._termID !== values.id) { return; }
          // Want to change the label.
          if (values.label !== undefined) {
              var trimmedLabel = values.label &amp;&amp; values.label.strip();
              // The label should not be empty.
              this._label !== trimmedLabel &amp;&amp; (this._label = trimmedLabel || this._termID);
          }
          // If affected and qualifiers are provided, set affected and add qualifiers.
          if (values.affected &amp;&amp; values.qualifiers &amp;&amp; values.qualifiers.length &gt; 0) {
              this.affected(values.affected);
              var silent = !fireEvents;
              this._setQualifiers(values.qualifiers, silent);
          }
      },

      /**
       * Clear all qualifier details and un-select term.
       */
      clearDetails: function() {
          this._clearDetails();
          Event.fire(this._qualifiersContainer, this._dataName + ':term:cleared');
      },

      /**
       * Adds a qualifiers dialog.
       *
       * @param silent true iff dialog creation should be silent (that is, no event should be fired)
       * @return {DetailsDialog} the dialog just created
       */
      addDialog : function (silent, count) {
          var dialog = this._addDialog(count);
          this._setGlobalQualifierCount &amp;&amp; count >= this._globalQualifierCount() &amp;&amp; this._setGlobalQualifierCount(++count);
          this._dialogMap[dialog.getID()] = dialog;
          this._applyDialogOptions(dialog);
          !this._allowMultiDialogs &amp;&amp; this._removeDetailsClickListener();
          this._dialogHolder.show();
          if (!silent) {
              Event.fire(this._qualifiersContainer, this._dataName + ':dialog:added', {'element' : dialog.getDialog()});
              Event.fire(document, this._dataName + ':dialog:added', {'element' : dialog.getDialog()});
          }
          return dialog;
      },

      /**
       * Returns the number of qualifiers contained by the term.
       *
       * @return {number}
       */
      size: function() {
          var summaryItems = this._qualifiersContainer.select('div.summary-item');
          return summaryItems ? summaryItems.length : 0;
      },

      _disableCheckBox : function (termData) {
          termData.down('input.term-status').hide();
          termData.down('label').observe('click', function(event) {
              event.preventDefault();
          });
      },

      _getHiddenTermInputs : function () {
          if (this._termDataClass) {
              var affected = this.isAffected();
              var phenoTipsName = this._termDataClass + this._dataName;
              var phenoTipsStatus = this._termDataClass + "affected";
              return '&lt;input class="term-id" type="hidden" value="' + this._termID + '" name="' + phenoTipsName + '"&gt;'
                  + '&lt;input class="affected-status" type="hidden" value="' + affected + '" name="' + phenoTipsStatus + '"&gt;';
          } else {
              return '&lt;input class="term-id" type="hidden" value="' + this._termID + '"&gt;'
          }
      },

      _setQualifiers : function (qualifiers, silent) {
          var _this = this;
          qualifiers.forEach(function (qualifier) {
              _this.addDialog(silent, qualifier.count).setValues(qualifier).blur();
          });
          this._allowMultiDialogs &amp;&amp; this._addDetailsClickListener();
      },

      /**
       * Clears the details by removing all listeners, and emptying all containers and maps.
       * @private
       */
      _clearDetails: function() {
          this._qualifierNo = 0;
          this._dialogHolder.descendants().forEach(function(elem) {
              elem.stopObserving();
          });
          this._dialogMap = {};
          this._dialogHolder.update();
          this._dialogHolder.hide();
          this.affected(false);
          this._removeDetailsClickListener();
      },

      /**
       * Builds an empty container that will hold qualifiers dialogs for a term.
       * @private
       */
      _buildEmptyContainer : function () {
          this._qualifiersContainer = new Element('table', {'class' : 'summary-group ' + this._dataName + "-summary-group"});
          this._qualifiersContainer.name = this._dataName;

          this._dialogHolder = new Element('td', {'class' : 'dialog-holder'});

          var tbody = new Element('tbody')
              .insert(new Element('tr', {'class' : 'term-holder'})
                  .insert(new Element('td')
                      .insert(new Element('span', {'class' : 'term-data'}))
                      .insert(new Element('span', {'class' : 'delete-button-holder'}))))
              .insert(new Element('tr')
                  .insert(this._dialogHolder))
              .insert(new Element('tr')
                  .insert(new Element('td', {'class' : 'add-button-holder'})));

          this._qualifiersContainer.insert(tbody);
          this._dialogHolder.hide();
      },

      _addTooltip : function (tooltip) {
          if (!tooltip) { return; }
          var infoTool = "";
          var termData = this._qualifiersContainer.down('span.term-data');
          if ("notmapped" === tooltip) {
              infoTool = new Element('span', {'class' : 'fa fa-exclamation-triangle'});
          } else {
              infoTool = new Element('span', {'class' : 'fa fa-info-circle xHelpButton ' + tooltip, 'title' : this.getID()});
              new PhenoTips.widgets.HelpButton(infoTool);
          }
          termData.insert(infoTool);
      },

      /**
       * Sets the starting state for the "Add Details" and "Delete" buttons.
       *
       * @private
       */
      _initButtons : function () {
          this._addButtonHolder = this._qualifiersContainer.down('td.add-button-holder');
          this._addDetailsButton = new Element('span', {
              'id' : 'add_details_' + this._termID,
              'class' : 'patient-menu-button patient-details-add'
          }).update('&lt;i class="fa fa-plus"&gt;&lt;/i&gt; ...');

          this._addButtonHolder.insert(this._addDetailsButton);

          // Hide delete button or attach observers.
          this._deleteButtonHolder = this._qualifiersContainer.down('span.delete-button-holder');
          if (this._disableTermDelete) {
              this._deleteButtonHolder.hide();
          } else {
              this._deleteButton = new Element('span', {
                  'id' : 'delete_term_' + this._termID,
                  'class' : 'action-done patient-term-delete clickable'
              }).update('✖');
              this._deleteButtonHolder.insert(this._deleteButton);
              this._addTermDeleteListener();
          }
          // Need to hide the add details button and add the select listener.
          this._addButtonHolder.hide();
          this._addOnTermSelectListener();
      },

      /**
       * Applies the predefined dialog options onto some {DetailsDialog}.
       * @param {DetailsDialog} dialog
       * @return {DetailsDialog} the updated dialog
       * @private
       */
      _applyDialogOptions: function(dialog) {
          this._dialogOptions.forEach(function(applyOption) {
              applyOption(dialog);
          });
          return dialog;
      },

      /**
       * Adds an empty dialog and returns it.
       *
       * @return {DetailsDialog} the attached dialog
       * @private
       */
      _addDialog : function (count) {
          var qualifierCount = (count != null &amp;&amp; count != undefined) ? count : this._qualifierNo;
          var dialog = new PhenoTips.widgets.DetailsDialog(this._termID, this._dataName, this._dialogHolder, qualifierCount, this._qualifierDataClass).attach();
          // Count the number of qualifiers for current term, regardless.
          this._qualifierNo++
          return dialog;
      },

      /**
       * Listens for click on the delete button.
       * @private
       */
      _addTermDeleteListener : function () {
          var _this = this;
          var deleteFx = function() {
              var idInput = _this._qualifiersContainer.down('input.term-id');
              var id = idInput &amp;&amp; idInput.value;
              _this._clearDetails();
              _this._removeTermDeleteListener();
              _this._qualifiersContainer.remove();
              Event.fire(_this._qualifiersContainer, _this._dataName + ':term:deleted', {'id' : id});
          };
          this._deleteButton.observe('click', function () {
              if (_this._termDeleteAction) {
                  _this._sendRemoveRequest(_this._deleteButton, _this._termDeleteAction, deleteFx, _this._qualifierNo);
              } else {
                  deleteFx();
              }
          });
          this._deleteButtonHolder.show();
      },

      _sendRemoveRequest : function (deleteTrigger, ajaxDeleteAction, deleteElementsFx, confirmed) {
          var requestHandlers = {
              onCreate : function() {
                  deleteTrigger.disabled = true;
              },
              onSuccess : function () {
                  deleteElementsFx();
              }
          };
          return confirmed
              ? new XWiki.widgets.ConfirmedAjaxRequest(ajaxDeleteAction, requestHandlers, {
                    confirmationText : "$!escapetool.javascript($services.localization.render('phenotips.widgets.detailsDialogGroup.termDeleteConfirmation'))"
                })
              : new Ajax.Request(ajaxDeleteAction, requestHandlers);
      },

      /**
       * Removes the click listener for delete button.
       * @private
       */
      _removeTermDeleteListener : function () {
          this._deleteButton.stopObserving('click');
          this._deleteButtonHolder.hide();
      },

      /**
       * Listens for term being selected.
       * @private
       */
      _addOnTermSelectListener : function () {
          var _this = this;
          var statusInput = this._qualifiersContainer.down('input.term-status');
          // IE fix.
          statusInput.observe('click', function (event) {
              event.stopPropagation();
          });
          statusInput.observe('change', function (event) {
              event.stop();
              if (statusInput.checked) {
                  _this._allowMultiDialogs &amp;&amp; _this._addDetailsClickListener();
                  _this.addDialog(false, _this._globalQualifierCount &amp;&amp; _this._globalQualifierCount());
              } else {
                  _this._removeDetailsClickListener();
                  _this.clearDetails();
              }
              Event.fire(_this._qualifiersContainer, _this._dataName + ':status:changed', {'id' : _this._termID});
          })
      },

      /**
       * Adds a listener for the add details button.
       * @private
       */
      _addDetailsClickListener : function () {
          var _this = this;
          this._addDetailsButton.observe('click', function (event) {
              event.stop();
              _this._shouldAddDialog() &amp;&amp; _this.addDialog(false, _this._globalQualifierCount &amp;&amp; _this._globalQualifierCount())
          });
          this._addButtonHolder.show();
      },

      _shouldAddDialog: function() {
        var noDataElem = this.get().down('span.no-data');
        if (noDataElem) {
          noDataElem.click();
          return false;
        } else {
          // There is no "no-data" element. Either the dialog has data, or it has no data and is focused.
          var shouldAdd = true;
          // Look at all the dialogs for this group.
          $H(this._dialogMap).each(function(pair) {
            // If there is already an empty dialog present, then do not add another dialog.
            if (pair.value.getDialog().select(":input:not([value='']):not([type='hidden']):not(.hidden)").filter(function(x) { return x.visible(); }).size() &lt;= 0) {
              shouldAdd = false;
              throw $break;
            }
          });
          return shouldAdd;
        }
      },

      /**
       * Removes the listener for the add details button.
       * @private
       */
      _removeDetailsClickListener: function() {
          this._addDetailsButton.stopObserving('click');
          this._addButtonHolder.hide();
      },

      /**
       * Adds a listener for a dialog being deleted.
       * @private
       */
      _addDialogDeletedListener : function () {
          var _this = this;
          this._dialogHolder.observe(_this._dataName + ':dialog:deleted', function (event) {
              if (!this.down()) {
                  // Stop event propagation and clear everything.
                  event.stop();
                  _this.clearDetails();
                  _this._nonselectable &amp;&amp; _this._deleteButton.click();
              } else {
                  event.memo &amp;&amp; event.memo.id &amp;&amp; (delete _this._dialogMap[event.memo.id]);
              }
          });
      },

      _addDialogFocusManagers : function () {
          var _this = this;
          // Observe adding of a new dialog. Want to blur any focused dialogs and focus the added dialog.
          document.observe(this._dataName + ':dialog:added', function (event) {
              var addedDialog = event.memo &amp;&amp; event.memo.element;
              if (!addedDialog) { return; }
              if (addedDialog.up('td.dialog-holder') === _this._dialogHolder) {
                  if (_this._crtFocus) {
                      _this._blur(_this._crtFocus);
                  }
                  _this._crtFocus = addedDialog;
                  _this._focus(_this._crtFocus);
              } else {
                  if (_this._crtFocus) {
                      _this._blur(_this._crtFocus);
                      _this._crtFocus = null;
                  }
              }
          });
          // Observe clicks.
          document.observe('click', function (event) {
              var clickedDialogHolder = event.findElement('td.dialog-holder');
              if (clickedDialogHolder === _this._dialogHolder) {
                  var summaryItem = event.findElement('div.summary-item');
                  if (_this._crtFocus) {
                      if (_this._crtFocus !== summaryItem) {
                          _this._blur(_this._crtFocus);
                          _this._crtFocus = summaryItem || null;
                          summaryItem &amp;&amp; _this._focus(_this._crtFocus);
                      }
                  } else {
                      _this._crtFocus = summaryItem || null;
                      summaryItem &amp;&amp; _this._focus(_this._crtFocus);
                  }
              } else {
                  if (_this._crtFocus &amp;&amp; ('term-status' !== event.target.className)) {
                      // Blur anything in focus.
                      _this._blur(_this._crtFocus);
                      _this._crtFocus = null;
                  }
              }
          });
      },

      /**
       * Blurs a dialog element.
       *
       * @param elem a dialog element
       * @private
       */
      _blur : function (elem) {
          var elemID = elem.down('input').id;
          var dialog = this._dialogMap[elemID];
          if (dialog) {
              dialog.blur();
              Event.fire(this._qualifiersContainer, this._dataName + ':dialog:blurred');
          }
      },

      /**
       * Focuses a dialog element.
       *
       * @param elem a dialog element
       * @private
       */
      _focus : function (elem) {
          var elemID = elem.down('input').id;
          var dialog = this._dialogMap[elemID];
          if (dialog) {
            dialog.focus();
            Event.fire(this._qualifiersContainer, this._dataName + ':dialog:focused');
          }
      },

      /**
       * Attaches an observer to the _dialogHolder, that monitors any 'keyup' events on any object with
       * class name 'qualifier-notes'. Fires a custom events when notes are updated.
       * Code adapted from https://stackoverflow.com/a/4220182
       *
       * @private
       */
      _attachKeyUpObserver: function() {
          var _this = this;
          var typingTimer;
          this._dialogHolder.observe('keyup', function(event) {
              clearTimeout(typingTimer);
              typingTimer = setTimeout(doneTyping.bind(_this, event), _this._doneTypingInterval);
          });

          this._dialogHolder.observe('keydown', function() {
              clearTimeout(typingTimer);
          });

          var doneTyping = function(event) {
              var _this = this;
              event.target.hasClassName('qualifier-notes') &amp;&amp;
                Event.fire(_this._qualifiersContainer, _this._dataName + ':notes:updated', {'target' : event.target});
          };
      }
  });
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Details Dialog Group</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>18</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>27737a98-9433-41fd-83f6-ecb74ffac1a2</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>(function() {
  var init = function(event) {
    var containers = (event &amp;&amp; event.memo.elements) || [$('body')];
    containers.each(function(container) {
      container.select('input.suggestWorkgroups').each(function(input) {
        if (!input.hasClassName('initialized')) {
          var options = {
            script : XWiki.contextPath + "/rest/principals/suggest?searchUsers=false",
            noresults: "$services.localization.render('phenotips.widgets.workgroupPicker.noResults')"
          };
          new XWiki.widgets.UserPicker(input, options);
          input.addClassName('initialized');
        }
      });
    });
  };
  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);
  document.observe('xwiki:dom:updated', init);
})();</code>
    </property>
    <property>
      <name>Suggest workgroups</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>19</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>a7716835-4f90-462d-bbad-7710b30b564b</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>(function() {
  var init = function(event) {
    $$('.collapsible-subsection:not(.initialized)').each(function(item) {
     var showIcon = new Element('span', {'class' : 'fa fa-plus-square-o'}).update(' show');
     var hideIcon = new Element('span', {'class' : 'fa fa-minus-square-o'}).update(' hide');

      var sectionHeader = item.select('h3')[0];
      var sectionContent = item.select('.box-content')[0];
      if (!sectionHeader || !sectionContent) { return; }

      var trigger = new Element("span", {'class' : 'expand-tool'}).update('►');
      trigger.observe('click', function(event) {
        event.stop();
        sectionContent.toggleClassName('hidden');
        trigger.update(sectionContent.hasClassName('hidden') ? '►' : '▼');
      });

      sectionHeader.insert({top: trigger});
      sectionContent.addClassName('hidden');
      item.addClassName('initialized');
    });
  };
  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);
  document.observe('xwiki:dom:updated', init);
})();</code>
    </property>
    <property>
      <name>Collapsible subsection behavior</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>3adf8acf-b6e8-4d05-a382-fa56ee969cf9</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
.msdialog-modal-container {
  position: absolute;/*fixed;*/
  top: 0px;
  bottom: 0px;
  left: 0px;
  right: 0px;
  width: 100%;
  height: 100%;
  text-align: center;
  z-index: 100014;/*1005;*/
}
/* For IE6, which doesn't understand position: fixed. */
* html .msdialog-modal-container {
  position: absolute;
}
/* Semi-transparent overlay screen that covers the entire page. */
.msdialog-screen {
  position: absolute;
  top: 0px;
  bottom: 0px;
  left: 0px;
  right: 0px;
  width: 100%;
  height: 100%;
  background-color: #000;
}
.msdialog-box {
  text-align: left;
  padding: 0;
  margin: auto;
  position: relative;
  width: 60%;
  color: #000;
  border: 2px solid #333;
  background-color: #f5f5f5;
  border-radius: 8px;
  box-shadow: 0 0 6px $theme.linkColor;
}
.msdialog-box .content{
  margin: .8em;
}
.msdialog-close {
  float: right;
  cursor: pointer;
  width: .8em;
  margin-right: .4em;
  height: 1.4em;
  text-align : center;
  font-weight: bold;
  font-family: Arial, Helvetica, sans-serif;
  line-height: 1.4em;
  color: #FFF;
}
* html .msdialog-close {
  width: 22px;
}
.msdialog-title {
  font-size: 80%;
  font-weight: bold;
  color: #FFF;
  background-color: #333;
  border-radius: 5.5px 5.5px 0 0;
  padding: .3em 1.2em .3em .8em;
  cursor: move;
}
.msdialog-box .xform {
  width: 100%;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Modified Modal popup</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>95d4225b-2cf1-4680-9922-a2d82e238ffe</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
.xhover {
  background:red;
}

input[type="text"].suggest {
  border-width: 1px;
}

body {
  position: relative;
}

div.suggestItems {
  position:absolute;
  border: 1px solid #eee;
  border-top: none;
  background: white;
  z-index: 100013;
  text-align:left;
  box-shadow: 0 4px 8px #777;
  margin-left: 1px;
  margin-top: 5px;
}
div.suggestItems:before {
  border-left: 11px solid transparent;
  border-right: 11px solid transparent;
  border-top: 0 none;
  border-bottom: 11px solid $theme.borderColor;
  content: "";
  display: block;
  left: 50%;
  margin-left: -11px;
  position: absolute;
  top: -11px;
}
div.suggestItems:after {
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-top: 0 none;
  border-bottom: 10px solid $theme.pageContentBackgroundColor;
  content: "";
  display: block;
  left: 50%;
  margin-left: -10px;
  position: absolute;
  top: -10px;
}

div.suggestItems .hide-button-wrapper {
  text-align: right;
  line-height: 1em;
  border-bottom: 1px dotted;
}
div.suggestItems .hide-button {
  color: $theme.linkColor;
  cursor: pointer;
  font-size: 0.8em;
  font-style: italic;
  opacity: 1;
  padding: 0 0.5em;
  margin: 0 4px;
}
div.suggestItems ul {
  margin: 0px;
}

div.suggestItems li {
  overflow:hidden;
  white-space:normal !important;
  width: auto !important;
  float: none !important;
  padding: 4px;
}

div.suggestItems .suggestItem.custom-value .suggestId {
  display: none !important;
}

div.suggestItems em {
  font-weight:normal !important;
  margin-right:2px;
}

div.suggestItems span.info span.hint {
  color: #777;
  margin-left:5px;
}

div.suggestItems span.matching-alternative-name {
  display: inline-block;
  padding-left: 55px;
}

div.suggestItems span.matching-alternative-name:before {
  content: "$services.localization.render('phenotips.widgets.suggest.matchingAlternativeName.before')";
  font-size: 0.8em;
  opacity: .4;
}

div.suggestItems span.matching-alternative-name:after {
  content: "$services.localization.render('phenotips.widgets.suggest.matchingAlternativeName.after')";
  font-size: 0.8em;
  opacity: .4;
}

div.suggestItems div.info {
  color: #777;
  font-size: 0.8em;
  padding-left:5px;
}

div.suggestItems div.info span.legend {
  font-weight: normal;
}

ul.suggestList {
  margin:0px !important;
  text-transform:none;
  color: #333;
  font-weight:normal;
  padding: 0;
}

ul.suggestList li{
  padding: 4px;
  border-top: 1px dotted #777;
}
ul.suggestList li:first-child{
  border-top: 0 none;
}
ul.suggestList .xhighlight {
  background-color: $theme.highlightColor;
  cursor:pointer;
}

div.suggestItemName {
  text-indent: 0;
}

div.suggestItem, li.noSuggestion div {
  color: #333;
  font-size: 0.875em;
}

div.suggestItemName,
div.suggestItemInfo {
  text-decoration: inherit;
}

.highlight {
  background-color: $theme.highlightColor;
  color: #000;
  font-weight:bold;
  text-decoration: inherit;
}

div.resultContainer div.sourceName {
  background-color: #DDD;
  font-variant: small-caps;
  font-weight: 700;
  color: #333;
  padding-top:3px;
  font-size:0.875em;
  background-position:3px 3px;
  background-repeat:no-repeat;
}

.horizontalLayout div.resultContainer div.sourceName {
  float:left;
  width:150px;
  margin-right:3px;
  padding-right:20px;
  text-align:right;
  background-position:right center;
}

.horizontalLayout div.resultContainer div.xitemcontainer {
  margin-left:10px;
}

.horizontalLayout div.resultContainer div.results {
  clear:both;
  background-color: #DDD;
}

.horizontalLayout div.resultContainer ul.suggestList {
  background-color:white;
}

div.resultContainer div.sourceContent.loading {
  background-position:center center;
  min-height:30px;
}

.suggestId:before {
  content: "[";
}
.suggestId:after {
  content: "] ";
}
.suggestId {
  font-size: 87%;
}
.suggestInfo {
  font-size: 100%;
  word-wrap: normal !important;
  display: inline-block;
  width: 100%;
  float: right;
  line-height:1.2em !important;
}
.suggestInfo dl {
  display: inline;
}
.suggestInfo dt {
  font-style: italic;
}

.suggestInfo dt, .suggestInfo dd {
  margin-left: 1.2em;
  position: relative;
}
.suggestInfo dt.collapsed + dd {
  display: none;
}
.suggestInfo dt .expand-tool {
  cursor: pointer;
  position: absolute;
  top: 0em;
  left: -1.2em;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Modified suggest</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>2</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>64464fe6-5214-4cab-b03d-ba1892d3bb2c</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
.accepted-suggestions {
  margin: 0 0 1em !important;
  list-style-type: none;
  padding: 0;
}

.accepted-suggestions li {
  position: relative;
  line-height: 1.3em;
}
.accepted-suggestion {
  padding: .05em 0;
}
.accepted-suggestions li .key {
  font-size: 87%;
  color: #777;
}
.accepted-suggestions li .value {
  margin-right: 0.5em;
}
.accepted-suggestions li .delete-tool,
.clear-tool {
  display: none;
  color: #a00;
  line-height: 1em;
  font-size: 87%;
  margin: 0 0.5em;
  cursor: pointer;
  float: right;
}
.clear-tool {
  display: block;
}
.accepted-suggestions li:hover {
  background: $theme.highlightColor;
}
.accepted-suggestions li:hover .delete-tool {
  position: absolute;
  top: .4em;
  right: 0;
  display: inline;
}
.accepted-suggestions li .tooltip {
  display: none;
  position: absolute;
  top: 1.35em;
  left: 12.5%;
  width: 75%;
  border: 0 none;
  background: #fff;
  padding: 4px 8px;
  border-radius: 0 12px 12px 12px;
  box-shadow: 0 0 6px #777;
  z-index: 20;
}
.accepted-suggestions li:hover .tooltip {
  display: block;
}
.accepted-suggestions li .tooltip dt {
  color: #000;
  font-style: italic;
  margin: .4em 0 0.2em;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Multi suggest</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>3</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>8b79ea53-be8b-4d5e-a725-4d60224414b7</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template("colorThemeInit.vm")

.ontology-tree {
  text-align: left;
}
.ontology-tree .parents{
  list-style-type: none;
  margin: 0;
  padding: 0;
}

.ontology-tree .parents .parent:before {
  display: inline-block;
  float: left;
  font-size: 1.2em;
  content: "\251C"; /*"\2523";*/
  width: .8em;
}
.ontology-tree .parent:first-child:before {
  content: "\250C";/*"\250f";*/
}

.ontology-tree .root:before {
  display: inline-block;
  float: left;
  content: "\2514\2500";/*"\2517\2501";*/
  width: 1.4em;
  font-size: 1.2em;
  font-weight: normal;
  color: transparent;
}

.ontology-tree .parents+.root:before {
  color: $theme.textColor;
}

.ontology-tree .key {
  opacity: .4;
  font-size: .8em;
}
.ontology-tree .root&gt;.entry-data .value {
  font-weight: bold;
}
.ontology-tree .root&gt;.descendents {
  margin-left: 2.4em;
}
.ontology-tree .no-root&gt;.descendents {
  margin: 0 0;
}
.ontology-tree .no-root:before {
  display: none;
}
.ontology-tree .root&gt;.empty {
  margin-left: 3.8em;
}
.ontology-tree .descendents li {
  clear: both;
}
.ontology-tree .collapsed .descendents {
  display: none;
}
.ontology-tree .descendents {
  list-style-type: none;
  margin: 0 0 0 1em;
  padding: 0;
}
.ontology-tree .entry-tools {
  /* float: right; */
  display: inline-block;
  margin-left: 0.5em;
  margin-right: 0.5em;
  min-width: 17px;
  vertical-align: middle;
}
.ontology-tree .entry-data {
  line-height: 1.4em;
}
.ontology-tree .info {
  cursor: pointer;
}
.ontology-tree .entry-data:hover {
  background: $theme.highlightColor;
}

.ontology-tree .accepted &gt;.entry-data {
  background-color: $theme.backgroundSecondaryColor;
}
.ontology-tree .accepted &gt;.entry-data .info .value {
  font-weight: bold;
}

.ontology-tree .entry, .term-entry {
  position: relative;
}
.expand-tool {
  display: inline-block;
  color: $theme.linkColor;
  width: .8em;
  text-shadow: 0 0 5px #ccc;
  cursor: pointer;
  font-size: .8em;
  margin-right: 0.5em;
  vertical-align: middle;
}
.expand-tool.locked {
  color: $theme.textColor;
  opacity: .4;
  cursor: default;
}
.expand-tool.disabled {
  visibility: hidden;
  cursor: default;
}
.select-tool {
  vertical-align: middle;
}
.ontology-tree .subterm-selected .select-tool {
  opacity: .5;
}
.ontology-tree .subterm-selected .expand-tool:after {
  background: none repeat scroll 0 0 $theme.linkColor;
  color: $theme.linkColor;
  content: "...";
  display: inline-block;
  font-weight: bold;
  margin-left: 1.3em;
  position: absolute;
  text-align: center;
  top: .3em;
  width: 11px;
}
.msdialog-box .ontology-tree .term-tools {
  display: none;
}
.dialog-ontology-browser {
  z-index: 400000 !important;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Ontology browser</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>4</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>a629e713-040b-4000-b42e-4b34bb397448</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
.dropdown {
  margin-left: 1.2em;
  width: 95%;
  z-index: 100;
}
.dropdown.emphasized-box {
  margin-left: -4px;
  padding: 0.25em 0.25em 0.25em 1.05em;
  /*position: absolute;*/
}
.dropdown .close {
  cursor: pointer;
  right: .25em;
  position: absolute;
}
.dropdown .ontology-tree .entry-data {
  line-height: 1.4em;
  padding-right: 1.1em;
}
.dropdown .ontology-tree .entry-data&gt;.info .key {
  display: none;
}
.term-label .expand-tool {
  display: inline-block;
  margin-top: -0.5em;
}
.dropdown:not(.invisible) + br {
  display: none;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Dropdown style</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>5</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>6a32e24f-34dd-4972-b5da-305be3db4027</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>ol.xwiki-free-multiselect {
  list-style-position: outside;
}
input.xwiki-free-multiselect-value {
  max-width: 50% !important;
  margin-bottom: 1em;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Free Multiselect</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>6</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>db98aaff-6646-4778-8d05-160724bac290</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.unit-system-selector {
  float: right;
  padding: 3px 3px 0;
  border-radius: 3px;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Unit system selector</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>7</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>00ed2265-5601-43d6-94b9-c1cab4eaae52</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

/* The help icon, already displayed as a question mark character. */
.xHelpButton {
  cursor: pointer;
  line-height: 0.75em;
  display: inline-block;
  padding: .125em;
}
.xHelpButton:hover {
  color: $theme.linkColor;
}

/* The box containing the tooltip, displayed when clicking on the help icon. */
.xTooltip {
  background: $theme.pageContentBackgroundColor;
  border: 0 none;
  border-radius: 0 1em 1em;
  box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);
  color: $theme.textColor;
  display: inline-block;
  margin: 0.7em 0 0 -0.3em;
  max-width: 80%;
  padding: 0.75em 1em;
  position: absolute;
  z-index: 25;
}
.xTooltip.error {
  color: $theme.notificationErrorColor;
  font-weight: bold;
}
.xTooltip .hide-tool {
  cursor: pointer;
  float: right;
  margin-right: -0.5em;
  margin-top: -0.6em;
}

.xTooltip .value {
  font-weight: bold;
}
.xTooltip .key {
  font-size: .8em;
  opacity: .7;
}
.xTooltip dl {
  margin: .3em 0;
}
.xTooltip dl.minified {
  overflow-y: hidden;
}
.xTooltip div.expand-button {
  cursor: pointer;
  color: $theme.linkColor;
}
.xTooltip div.expand-button:last-child {
  margin-bottom: 1.5em;
}
.xTooltip dt {
  font-style: italic;
  margin: 1em 0 0.2em;
}
.xTooltip .term-tools {
  margin: .4em 0;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Help buttons</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>8</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>1fcf8d61-83d1-4fdb-8723-64b8de5cd688</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>input.suggestWorkgroups, input.suggestUsersAndGroups {
  background-position: .3em center;
  background-repeat: no-repeat;
  padding-left: 2em;
}
input.suggestWorkgroups {
  background-image: url("$xwiki.getSkinFile('icons/datamodel/groups.png')");
}
input.suggestUsersAndGroups {
  background-image: url("$xwiki.getSkinFile('icons/datamodel/users.png')");
}
</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Suggest users, groups and workgroups</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>9</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>a9b51b91-4ca2-45c8-9b25-845afcdd9a6e</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.segmented-bar {
  white-space: nowrap;
  width: auto;
}
.segmented-bar .segmented-unit {
  border: 1px solid currentColor;
  border-radius: 1px;
  display: inline-block;
  height: 1ex;
  margin: 0;
  padding: 0;
  width: 1ex;
}
.segmented-bar .segmented-unit+.segmented-unit {
  margin-left: 0.2ex;
}
.segmented-bar .segmented-unit-fill {
  display: block;
  height: 100%;
  background: currentColor;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Segmented Bar</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Widgets</name>
    <number>10</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>65c4f9a3-b203-4392-9f97-972f305c03d8</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

.collapsible-subsection {
    margin-bottom: 2em;
}
.collapsible-subsection h3 {
    margin-bottom: 0 !important;
}
.collapsible-subsection .box-content {
    background: $theme.pageBackgroundColor;
    padding: .5em 1em;
}

 .collapsible-subsection .expand-tool {
    width: .5em;
}
</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Collapsible subsection style</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>
